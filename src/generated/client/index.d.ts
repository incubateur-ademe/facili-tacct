
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model inconfort_thermique
 * 
 */
export type inconfort_thermique = $Result.DefaultSelection<Prisma.$inconfort_thermiquePayload>
/**
 * Model clc_epci
 * 
 */
export type clc_epci = $Result.DefaultSelection<Prisma.$clc_epciPayload>
/**
 * Model collectivites_searchbar
 * 
 */
export type collectivites_searchbar = $Result.DefaultSelection<Prisma.$collectivites_searchbarPayload>
/**
 * Model biodiversite
 * 
 */
export type biodiversite = $Result.DefaultSelection<Prisma.$biodiversitePayload>
/**
 * Model gestion_risques
 * 
 */
export type gestion_risques = $Result.DefaultSelection<Prisma.$gestion_risquesPayload>
/**
 * Model communes_drom
 * 
 */
export type communes_drom = $Result.DefaultSelection<Prisma.$communes_dromPayload>
/**
 * Model ressources_eau
 * 
 */
export type ressources_eau = $Result.DefaultSelection<Prisma.$ressources_eauPayload>
/**
 * Model agriculture_bio
 * 
 */
export type agriculture_bio = $Result.DefaultSelection<Prisma.$agriculture_bioPayload>
/**
 * Model erosion_cotiere
 * 
 */
export type erosion_cotiere = $Result.DefaultSelection<Prisma.$erosion_cotierePayload>
/**
 * Model epci
 * 
 */
export type epci = $Result.DefaultSelection<Prisma.$epciPayload>
/**
 * Model surfaces_protegees
 * 
 */
export type surfaces_protegees = $Result.DefaultSelection<Prisma.$surfaces_protegeesPayload>
/**
 * Model consommation_espaces_naf
 * 
 */
export type consommation_espaces_naf = $Result.DefaultSelection<Prisma.$consommation_espaces_nafPayload>
/**
 * Model north_star_metric
 * 
 */
export type north_star_metric = $Result.DefaultSelection<Prisma.$north_star_metricPayload>
/**
 * Model etat_cours_d_eau
 * 
 */
export type etat_cours_d_eau = $Result.DefaultSelection<Prisma.$etat_cours_d_eauPayload>
/**
 * Model aot_40
 * 
 */
export type aot_40 = $Result.DefaultSelection<Prisma.$aot_40Payload>
/**
 * Model qualite_sites_baignade
 * 
 */
export type qualite_sites_baignade = $Result.DefaultSelection<Prisma.$qualite_sites_baignadePayload>
/**
 * Model communes
 * This table has subclasses and requires additional setup for migrations. Visit https://pris.ly/d/table-inheritance for more info.
 */
export type communes = $Result.DefaultSelection<Prisma.$communesPayload>
/**
 * Model patch4c
 * 
 */
export type patch4c = $Result.DefaultSelection<Prisma.$patch4cPayload>
/**
 * Model agriculture
 * 
 */
export type agriculture = $Result.DefaultSelection<Prisma.$agriculturePayload>
/**
 * Model incendies_foret
 * 
 */
export type incendies_foret = $Result.DefaultSelection<Prisma.$incendies_foretPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Inconfort_thermiques
 * const inconfort_thermiques = await prisma.inconfort_thermique.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Inconfort_thermiques
   * const inconfort_thermiques = await prisma.inconfort_thermique.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs, $Utils.Call<Prisma.TypeMapCb, {
    extArgs: ExtArgs
  }>, ClientOptions>

      /**
   * `prisma.inconfort_thermique`: Exposes CRUD operations for the **inconfort_thermique** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Inconfort_thermiques
    * const inconfort_thermiques = await prisma.inconfort_thermique.findMany()
    * ```
    */
  get inconfort_thermique(): Prisma.inconfort_thermiqueDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.clc_epci`: Exposes CRUD operations for the **clc_epci** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clc_epcis
    * const clc_epcis = await prisma.clc_epci.findMany()
    * ```
    */
  get clc_epci(): Prisma.clc_epciDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.collectivites_searchbar`: Exposes CRUD operations for the **collectivites_searchbar** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Collectivites_searchbars
    * const collectivites_searchbars = await prisma.collectivites_searchbar.findMany()
    * ```
    */
  get collectivites_searchbar(): Prisma.collectivites_searchbarDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.biodiversite`: Exposes CRUD operations for the **biodiversite** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Biodiversites
    * const biodiversites = await prisma.biodiversite.findMany()
    * ```
    */
  get biodiversite(): Prisma.biodiversiteDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.gestion_risques`: Exposes CRUD operations for the **gestion_risques** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Gestion_risques
    * const gestion_risques = await prisma.gestion_risques.findMany()
    * ```
    */
  get gestion_risques(): Prisma.gestion_risquesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.communes_drom`: Exposes CRUD operations for the **communes_drom** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Communes_droms
    * const communes_droms = await prisma.communes_drom.findMany()
    * ```
    */
  get communes_drom(): Prisma.communes_dromDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.ressources_eau`: Exposes CRUD operations for the **ressources_eau** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ressources_eaus
    * const ressources_eaus = await prisma.ressources_eau.findMany()
    * ```
    */
  get ressources_eau(): Prisma.ressources_eauDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.agriculture_bio`: Exposes CRUD operations for the **agriculture_bio** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Agriculture_bios
    * const agriculture_bios = await prisma.agriculture_bio.findMany()
    * ```
    */
  get agriculture_bio(): Prisma.agriculture_bioDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.erosion_cotiere`: Exposes CRUD operations for the **erosion_cotiere** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Erosion_cotieres
    * const erosion_cotieres = await prisma.erosion_cotiere.findMany()
    * ```
    */
  get erosion_cotiere(): Prisma.erosion_cotiereDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.epci`: Exposes CRUD operations for the **epci** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Epcis
    * const epcis = await prisma.epci.findMany()
    * ```
    */
  get epci(): Prisma.epciDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.surfaces_protegees`: Exposes CRUD operations for the **surfaces_protegees** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Surfaces_protegees
    * const surfaces_protegees = await prisma.surfaces_protegees.findMany()
    * ```
    */
  get surfaces_protegees(): Prisma.surfaces_protegeesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.consommation_espaces_naf`: Exposes CRUD operations for the **consommation_espaces_naf** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Consommation_espaces_nafs
    * const consommation_espaces_nafs = await prisma.consommation_espaces_naf.findMany()
    * ```
    */
  get consommation_espaces_naf(): Prisma.consommation_espaces_nafDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.north_star_metric`: Exposes CRUD operations for the **north_star_metric** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more North_star_metrics
    * const north_star_metrics = await prisma.north_star_metric.findMany()
    * ```
    */
  get north_star_metric(): Prisma.north_star_metricDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.etat_cours_d_eau`: Exposes CRUD operations for the **etat_cours_d_eau** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Etat_cours_d_eaus
    * const etat_cours_d_eaus = await prisma.etat_cours_d_eau.findMany()
    * ```
    */
  get etat_cours_d_eau(): Prisma.etat_cours_d_eauDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.aot_40`: Exposes CRUD operations for the **aot_40** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Aot_40s
    * const aot_40s = await prisma.aot_40.findMany()
    * ```
    */
  get aot_40(): Prisma.aot_40Delegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.qualite_sites_baignade`: Exposes CRUD operations for the **qualite_sites_baignade** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Qualite_sites_baignades
    * const qualite_sites_baignades = await prisma.qualite_sites_baignade.findMany()
    * ```
    */
  get qualite_sites_baignade(): Prisma.qualite_sites_baignadeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.communes`: Exposes CRUD operations for the **communes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Communes
    * const communes = await prisma.communes.findMany()
    * ```
    */
  get communes(): Prisma.communesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.patch4c`: Exposes CRUD operations for the **patch4c** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Patch4cs
    * const patch4cs = await prisma.patch4c.findMany()
    * ```
    */
  get patch4c(): Prisma.patch4cDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.agriculture`: Exposes CRUD operations for the **agriculture** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Agricultures
    * const agricultures = await prisma.agriculture.findMany()
    * ```
    */
  get agriculture(): Prisma.agricultureDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.incendies_foret`: Exposes CRUD operations for the **incendies_foret** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Incendies_forets
    * const incendies_forets = await prisma.incendies_foret.findMany()
    * ```
    */
  get incendies_foret(): Prisma.incendies_foretDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.3.0
   * Query Engine version: 173f8d54f8d52e692c7e27e72a88314ec7aeff60
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    inconfort_thermique: 'inconfort_thermique',
    clc_epci: 'clc_epci',
    collectivites_searchbar: 'collectivites_searchbar',
    biodiversite: 'biodiversite',
    gestion_risques: 'gestion_risques',
    communes_drom: 'communes_drom',
    ressources_eau: 'ressources_eau',
    agriculture_bio: 'agriculture_bio',
    erosion_cotiere: 'erosion_cotiere',
    epci: 'epci',
    surfaces_protegees: 'surfaces_protegees',
    consommation_espaces_naf: 'consommation_espaces_naf',
    north_star_metric: 'north_star_metric',
    etat_cours_d_eau: 'etat_cours_d_eau',
    aot_40: 'aot_40',
    qualite_sites_baignade: 'qualite_sites_baignade',
    communes: 'communes',
    patch4c: 'patch4c',
    agriculture: 'agriculture',
    incendies_foret: 'incendies_foret'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "inconfort_thermique" | "clc_epci" | "collectivites_searchbar" | "biodiversite" | "gestion_risques" | "communes_drom" | "ressources_eau" | "agriculture_bio" | "erosion_cotiere" | "epci" | "surfaces_protegees" | "consommation_espaces_naf" | "north_star_metric" | "etat_cours_d_eau" | "aot_40" | "qualite_sites_baignade" | "communes" | "patch4c" | "agriculture" | "incendies_foret"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      inconfort_thermique: {
        payload: Prisma.$inconfort_thermiquePayload<ExtArgs>
        fields: Prisma.inconfort_thermiqueFieldRefs
        operations: {
          findUnique: {
            args: Prisma.inconfort_thermiqueFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$inconfort_thermiquePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.inconfort_thermiqueFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$inconfort_thermiquePayload>
          }
          findFirst: {
            args: Prisma.inconfort_thermiqueFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$inconfort_thermiquePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.inconfort_thermiqueFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$inconfort_thermiquePayload>
          }
          findMany: {
            args: Prisma.inconfort_thermiqueFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$inconfort_thermiquePayload>[]
          }
          create: {
            args: Prisma.inconfort_thermiqueCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$inconfort_thermiquePayload>
          }
          createMany: {
            args: Prisma.inconfort_thermiqueCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.inconfort_thermiqueCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$inconfort_thermiquePayload>[]
          }
          delete: {
            args: Prisma.inconfort_thermiqueDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$inconfort_thermiquePayload>
          }
          update: {
            args: Prisma.inconfort_thermiqueUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$inconfort_thermiquePayload>
          }
          deleteMany: {
            args: Prisma.inconfort_thermiqueDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.inconfort_thermiqueUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.inconfort_thermiqueUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$inconfort_thermiquePayload>[]
          }
          upsert: {
            args: Prisma.inconfort_thermiqueUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$inconfort_thermiquePayload>
          }
          aggregate: {
            args: Prisma.Inconfort_thermiqueAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInconfort_thermique>
          }
          groupBy: {
            args: Prisma.inconfort_thermiqueGroupByArgs<ExtArgs>
            result: $Utils.Optional<Inconfort_thermiqueGroupByOutputType>[]
          }
          count: {
            args: Prisma.inconfort_thermiqueCountArgs<ExtArgs>
            result: $Utils.Optional<Inconfort_thermiqueCountAggregateOutputType> | number
          }
        }
      }
      clc_epci: {
        payload: Prisma.$clc_epciPayload<ExtArgs>
        fields: Prisma.clc_epciFieldRefs
        operations: {
          findUnique: {
            args: Prisma.clc_epciFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clc_epciPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.clc_epciFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clc_epciPayload>
          }
          findFirst: {
            args: Prisma.clc_epciFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clc_epciPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.clc_epciFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clc_epciPayload>
          }
          findMany: {
            args: Prisma.clc_epciFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clc_epciPayload>[]
          }
          create: {
            args: Prisma.clc_epciCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clc_epciPayload>
          }
          createMany: {
            args: Prisma.clc_epciCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.clc_epciCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clc_epciPayload>[]
          }
          delete: {
            args: Prisma.clc_epciDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clc_epciPayload>
          }
          update: {
            args: Prisma.clc_epciUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clc_epciPayload>
          }
          deleteMany: {
            args: Prisma.clc_epciDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.clc_epciUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.clc_epciUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clc_epciPayload>[]
          }
          upsert: {
            args: Prisma.clc_epciUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clc_epciPayload>
          }
          aggregate: {
            args: Prisma.Clc_epciAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClc_epci>
          }
          groupBy: {
            args: Prisma.clc_epciGroupByArgs<ExtArgs>
            result: $Utils.Optional<Clc_epciGroupByOutputType>[]
          }
          count: {
            args: Prisma.clc_epciCountArgs<ExtArgs>
            result: $Utils.Optional<Clc_epciCountAggregateOutputType> | number
          }
        }
      }
      collectivites_searchbar: {
        payload: Prisma.$collectivites_searchbarPayload<ExtArgs>
        fields: Prisma.collectivites_searchbarFieldRefs
        operations: {
          findUnique: {
            args: Prisma.collectivites_searchbarFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$collectivites_searchbarPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.collectivites_searchbarFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$collectivites_searchbarPayload>
          }
          findFirst: {
            args: Prisma.collectivites_searchbarFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$collectivites_searchbarPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.collectivites_searchbarFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$collectivites_searchbarPayload>
          }
          findMany: {
            args: Prisma.collectivites_searchbarFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$collectivites_searchbarPayload>[]
          }
          create: {
            args: Prisma.collectivites_searchbarCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$collectivites_searchbarPayload>
          }
          createMany: {
            args: Prisma.collectivites_searchbarCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.collectivites_searchbarCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$collectivites_searchbarPayload>[]
          }
          delete: {
            args: Prisma.collectivites_searchbarDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$collectivites_searchbarPayload>
          }
          update: {
            args: Prisma.collectivites_searchbarUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$collectivites_searchbarPayload>
          }
          deleteMany: {
            args: Prisma.collectivites_searchbarDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.collectivites_searchbarUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.collectivites_searchbarUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$collectivites_searchbarPayload>[]
          }
          upsert: {
            args: Prisma.collectivites_searchbarUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$collectivites_searchbarPayload>
          }
          aggregate: {
            args: Prisma.Collectivites_searchbarAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCollectivites_searchbar>
          }
          groupBy: {
            args: Prisma.collectivites_searchbarGroupByArgs<ExtArgs>
            result: $Utils.Optional<Collectivites_searchbarGroupByOutputType>[]
          }
          count: {
            args: Prisma.collectivites_searchbarCountArgs<ExtArgs>
            result: $Utils.Optional<Collectivites_searchbarCountAggregateOutputType> | number
          }
        }
      }
      biodiversite: {
        payload: Prisma.$biodiversitePayload<ExtArgs>
        fields: Prisma.biodiversiteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.biodiversiteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$biodiversitePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.biodiversiteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$biodiversitePayload>
          }
          findFirst: {
            args: Prisma.biodiversiteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$biodiversitePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.biodiversiteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$biodiversitePayload>
          }
          findMany: {
            args: Prisma.biodiversiteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$biodiversitePayload>[]
          }
          create: {
            args: Prisma.biodiversiteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$biodiversitePayload>
          }
          createMany: {
            args: Prisma.biodiversiteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.biodiversiteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$biodiversitePayload>[]
          }
          delete: {
            args: Prisma.biodiversiteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$biodiversitePayload>
          }
          update: {
            args: Prisma.biodiversiteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$biodiversitePayload>
          }
          deleteMany: {
            args: Prisma.biodiversiteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.biodiversiteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.biodiversiteUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$biodiversitePayload>[]
          }
          upsert: {
            args: Prisma.biodiversiteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$biodiversitePayload>
          }
          aggregate: {
            args: Prisma.BiodiversiteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBiodiversite>
          }
          groupBy: {
            args: Prisma.biodiversiteGroupByArgs<ExtArgs>
            result: $Utils.Optional<BiodiversiteGroupByOutputType>[]
          }
          count: {
            args: Prisma.biodiversiteCountArgs<ExtArgs>
            result: $Utils.Optional<BiodiversiteCountAggregateOutputType> | number
          }
        }
      }
      gestion_risques: {
        payload: Prisma.$gestion_risquesPayload<ExtArgs>
        fields: Prisma.gestion_risquesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.gestion_risquesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$gestion_risquesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.gestion_risquesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$gestion_risquesPayload>
          }
          findFirst: {
            args: Prisma.gestion_risquesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$gestion_risquesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.gestion_risquesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$gestion_risquesPayload>
          }
          findMany: {
            args: Prisma.gestion_risquesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$gestion_risquesPayload>[]
          }
          create: {
            args: Prisma.gestion_risquesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$gestion_risquesPayload>
          }
          createMany: {
            args: Prisma.gestion_risquesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.gestion_risquesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$gestion_risquesPayload>[]
          }
          delete: {
            args: Prisma.gestion_risquesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$gestion_risquesPayload>
          }
          update: {
            args: Prisma.gestion_risquesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$gestion_risquesPayload>
          }
          deleteMany: {
            args: Prisma.gestion_risquesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.gestion_risquesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.gestion_risquesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$gestion_risquesPayload>[]
          }
          upsert: {
            args: Prisma.gestion_risquesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$gestion_risquesPayload>
          }
          aggregate: {
            args: Prisma.Gestion_risquesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGestion_risques>
          }
          groupBy: {
            args: Prisma.gestion_risquesGroupByArgs<ExtArgs>
            result: $Utils.Optional<Gestion_risquesGroupByOutputType>[]
          }
          count: {
            args: Prisma.gestion_risquesCountArgs<ExtArgs>
            result: $Utils.Optional<Gestion_risquesCountAggregateOutputType> | number
          }
        }
      }
      communes_drom: {
        payload: Prisma.$communes_dromPayload<ExtArgs>
        fields: Prisma.communes_dromFieldRefs
        operations: {
          findUnique: {
            args: Prisma.communes_dromFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$communes_dromPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.communes_dromFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$communes_dromPayload>
          }
          findFirst: {
            args: Prisma.communes_dromFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$communes_dromPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.communes_dromFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$communes_dromPayload>
          }
          findMany: {
            args: Prisma.communes_dromFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$communes_dromPayload>[]
          }
          delete: {
            args: Prisma.communes_dromDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$communes_dromPayload>
          }
          update: {
            args: Prisma.communes_dromUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$communes_dromPayload>
          }
          deleteMany: {
            args: Prisma.communes_dromDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.communes_dromUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.communes_dromUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$communes_dromPayload>[]
          }
          aggregate: {
            args: Prisma.Communes_dromAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCommunes_drom>
          }
          groupBy: {
            args: Prisma.communes_dromGroupByArgs<ExtArgs>
            result: $Utils.Optional<Communes_dromGroupByOutputType>[]
          }
          count: {
            args: Prisma.communes_dromCountArgs<ExtArgs>
            result: $Utils.Optional<Communes_dromCountAggregateOutputType> | number
          }
        }
      }
      ressources_eau: {
        payload: Prisma.$ressources_eauPayload<ExtArgs>
        fields: Prisma.ressources_eauFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ressources_eauFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ressources_eauPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ressources_eauFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ressources_eauPayload>
          }
          findFirst: {
            args: Prisma.ressources_eauFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ressources_eauPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ressources_eauFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ressources_eauPayload>
          }
          findMany: {
            args: Prisma.ressources_eauFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ressources_eauPayload>[]
          }
          create: {
            args: Prisma.ressources_eauCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ressources_eauPayload>
          }
          createMany: {
            args: Prisma.ressources_eauCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ressources_eauCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ressources_eauPayload>[]
          }
          delete: {
            args: Prisma.ressources_eauDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ressources_eauPayload>
          }
          update: {
            args: Prisma.ressources_eauUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ressources_eauPayload>
          }
          deleteMany: {
            args: Prisma.ressources_eauDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ressources_eauUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ressources_eauUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ressources_eauPayload>[]
          }
          upsert: {
            args: Prisma.ressources_eauUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ressources_eauPayload>
          }
          aggregate: {
            args: Prisma.Ressources_eauAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRessources_eau>
          }
          groupBy: {
            args: Prisma.ressources_eauGroupByArgs<ExtArgs>
            result: $Utils.Optional<Ressources_eauGroupByOutputType>[]
          }
          count: {
            args: Prisma.ressources_eauCountArgs<ExtArgs>
            result: $Utils.Optional<Ressources_eauCountAggregateOutputType> | number
          }
        }
      }
      agriculture_bio: {
        payload: Prisma.$agriculture_bioPayload<ExtArgs>
        fields: Prisma.agriculture_bioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.agriculture_bioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$agriculture_bioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.agriculture_bioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$agriculture_bioPayload>
          }
          findFirst: {
            args: Prisma.agriculture_bioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$agriculture_bioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.agriculture_bioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$agriculture_bioPayload>
          }
          findMany: {
            args: Prisma.agriculture_bioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$agriculture_bioPayload>[]
          }
          create: {
            args: Prisma.agriculture_bioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$agriculture_bioPayload>
          }
          createMany: {
            args: Prisma.agriculture_bioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.agriculture_bioCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$agriculture_bioPayload>[]
          }
          delete: {
            args: Prisma.agriculture_bioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$agriculture_bioPayload>
          }
          update: {
            args: Prisma.agriculture_bioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$agriculture_bioPayload>
          }
          deleteMany: {
            args: Prisma.agriculture_bioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.agriculture_bioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.agriculture_bioUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$agriculture_bioPayload>[]
          }
          upsert: {
            args: Prisma.agriculture_bioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$agriculture_bioPayload>
          }
          aggregate: {
            args: Prisma.Agriculture_bioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAgriculture_bio>
          }
          groupBy: {
            args: Prisma.agriculture_bioGroupByArgs<ExtArgs>
            result: $Utils.Optional<Agriculture_bioGroupByOutputType>[]
          }
          count: {
            args: Prisma.agriculture_bioCountArgs<ExtArgs>
            result: $Utils.Optional<Agriculture_bioCountAggregateOutputType> | number
          }
        }
      }
      erosion_cotiere: {
        payload: Prisma.$erosion_cotierePayload<ExtArgs>
        fields: Prisma.erosion_cotiereFieldRefs
        operations: {
          findUnique: {
            args: Prisma.erosion_cotiereFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$erosion_cotierePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.erosion_cotiereFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$erosion_cotierePayload>
          }
          findFirst: {
            args: Prisma.erosion_cotiereFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$erosion_cotierePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.erosion_cotiereFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$erosion_cotierePayload>
          }
          findMany: {
            args: Prisma.erosion_cotiereFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$erosion_cotierePayload>[]
          }
          delete: {
            args: Prisma.erosion_cotiereDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$erosion_cotierePayload>
          }
          update: {
            args: Prisma.erosion_cotiereUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$erosion_cotierePayload>
          }
          deleteMany: {
            args: Prisma.erosion_cotiereDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.erosion_cotiereUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.erosion_cotiereUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$erosion_cotierePayload>[]
          }
          aggregate: {
            args: Prisma.Erosion_cotiereAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateErosion_cotiere>
          }
          groupBy: {
            args: Prisma.erosion_cotiereGroupByArgs<ExtArgs>
            result: $Utils.Optional<Erosion_cotiereGroupByOutputType>[]
          }
          count: {
            args: Prisma.erosion_cotiereCountArgs<ExtArgs>
            result: $Utils.Optional<Erosion_cotiereCountAggregateOutputType> | number
          }
        }
      }
      epci: {
        payload: Prisma.$epciPayload<ExtArgs>
        fields: Prisma.epciFieldRefs
        operations: {
          findUnique: {
            args: Prisma.epciFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$epciPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.epciFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$epciPayload>
          }
          findFirst: {
            args: Prisma.epciFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$epciPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.epciFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$epciPayload>
          }
          findMany: {
            args: Prisma.epciFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$epciPayload>[]
          }
          delete: {
            args: Prisma.epciDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$epciPayload>
          }
          update: {
            args: Prisma.epciUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$epciPayload>
          }
          deleteMany: {
            args: Prisma.epciDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.epciUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.epciUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$epciPayload>[]
          }
          aggregate: {
            args: Prisma.EpciAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEpci>
          }
          groupBy: {
            args: Prisma.epciGroupByArgs<ExtArgs>
            result: $Utils.Optional<EpciGroupByOutputType>[]
          }
          count: {
            args: Prisma.epciCountArgs<ExtArgs>
            result: $Utils.Optional<EpciCountAggregateOutputType> | number
          }
        }
      }
      surfaces_protegees: {
        payload: Prisma.$surfaces_protegeesPayload<ExtArgs>
        fields: Prisma.surfaces_protegeesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.surfaces_protegeesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$surfaces_protegeesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.surfaces_protegeesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$surfaces_protegeesPayload>
          }
          findFirst: {
            args: Prisma.surfaces_protegeesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$surfaces_protegeesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.surfaces_protegeesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$surfaces_protegeesPayload>
          }
          findMany: {
            args: Prisma.surfaces_protegeesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$surfaces_protegeesPayload>[]
          }
          create: {
            args: Prisma.surfaces_protegeesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$surfaces_protegeesPayload>
          }
          createMany: {
            args: Prisma.surfaces_protegeesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.surfaces_protegeesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$surfaces_protegeesPayload>[]
          }
          delete: {
            args: Prisma.surfaces_protegeesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$surfaces_protegeesPayload>
          }
          update: {
            args: Prisma.surfaces_protegeesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$surfaces_protegeesPayload>
          }
          deleteMany: {
            args: Prisma.surfaces_protegeesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.surfaces_protegeesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.surfaces_protegeesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$surfaces_protegeesPayload>[]
          }
          upsert: {
            args: Prisma.surfaces_protegeesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$surfaces_protegeesPayload>
          }
          aggregate: {
            args: Prisma.Surfaces_protegeesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSurfaces_protegees>
          }
          groupBy: {
            args: Prisma.surfaces_protegeesGroupByArgs<ExtArgs>
            result: $Utils.Optional<Surfaces_protegeesGroupByOutputType>[]
          }
          count: {
            args: Prisma.surfaces_protegeesCountArgs<ExtArgs>
            result: $Utils.Optional<Surfaces_protegeesCountAggregateOutputType> | number
          }
        }
      }
      consommation_espaces_naf: {
        payload: Prisma.$consommation_espaces_nafPayload<ExtArgs>
        fields: Prisma.consommation_espaces_nafFieldRefs
        operations: {
          findUnique: {
            args: Prisma.consommation_espaces_nafFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$consommation_espaces_nafPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.consommation_espaces_nafFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$consommation_espaces_nafPayload>
          }
          findFirst: {
            args: Prisma.consommation_espaces_nafFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$consommation_espaces_nafPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.consommation_espaces_nafFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$consommation_espaces_nafPayload>
          }
          findMany: {
            args: Prisma.consommation_espaces_nafFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$consommation_espaces_nafPayload>[]
          }
          create: {
            args: Prisma.consommation_espaces_nafCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$consommation_espaces_nafPayload>
          }
          createMany: {
            args: Prisma.consommation_espaces_nafCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.consommation_espaces_nafCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$consommation_espaces_nafPayload>[]
          }
          delete: {
            args: Prisma.consommation_espaces_nafDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$consommation_espaces_nafPayload>
          }
          update: {
            args: Prisma.consommation_espaces_nafUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$consommation_espaces_nafPayload>
          }
          deleteMany: {
            args: Prisma.consommation_espaces_nafDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.consommation_espaces_nafUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.consommation_espaces_nafUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$consommation_espaces_nafPayload>[]
          }
          upsert: {
            args: Prisma.consommation_espaces_nafUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$consommation_espaces_nafPayload>
          }
          aggregate: {
            args: Prisma.Consommation_espaces_nafAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateConsommation_espaces_naf>
          }
          groupBy: {
            args: Prisma.consommation_espaces_nafGroupByArgs<ExtArgs>
            result: $Utils.Optional<Consommation_espaces_nafGroupByOutputType>[]
          }
          count: {
            args: Prisma.consommation_espaces_nafCountArgs<ExtArgs>
            result: $Utils.Optional<Consommation_espaces_nafCountAggregateOutputType> | number
          }
        }
      }
      north_star_metric: {
        payload: Prisma.$north_star_metricPayload<ExtArgs>
        fields: Prisma.north_star_metricFieldRefs
        operations: {
          findUnique: {
            args: Prisma.north_star_metricFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$north_star_metricPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.north_star_metricFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$north_star_metricPayload>
          }
          findFirst: {
            args: Prisma.north_star_metricFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$north_star_metricPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.north_star_metricFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$north_star_metricPayload>
          }
          findMany: {
            args: Prisma.north_star_metricFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$north_star_metricPayload>[]
          }
          create: {
            args: Prisma.north_star_metricCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$north_star_metricPayload>
          }
          createMany: {
            args: Prisma.north_star_metricCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.north_star_metricCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$north_star_metricPayload>[]
          }
          delete: {
            args: Prisma.north_star_metricDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$north_star_metricPayload>
          }
          update: {
            args: Prisma.north_star_metricUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$north_star_metricPayload>
          }
          deleteMany: {
            args: Prisma.north_star_metricDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.north_star_metricUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.north_star_metricUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$north_star_metricPayload>[]
          }
          upsert: {
            args: Prisma.north_star_metricUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$north_star_metricPayload>
          }
          aggregate: {
            args: Prisma.North_star_metricAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNorth_star_metric>
          }
          groupBy: {
            args: Prisma.north_star_metricGroupByArgs<ExtArgs>
            result: $Utils.Optional<North_star_metricGroupByOutputType>[]
          }
          count: {
            args: Prisma.north_star_metricCountArgs<ExtArgs>
            result: $Utils.Optional<North_star_metricCountAggregateOutputType> | number
          }
        }
      }
      etat_cours_d_eau: {
        payload: Prisma.$etat_cours_d_eauPayload<ExtArgs>
        fields: Prisma.etat_cours_d_eauFieldRefs
        operations: {
          findUnique: {
            args: Prisma.etat_cours_d_eauFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$etat_cours_d_eauPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.etat_cours_d_eauFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$etat_cours_d_eauPayload>
          }
          findFirst: {
            args: Prisma.etat_cours_d_eauFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$etat_cours_d_eauPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.etat_cours_d_eauFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$etat_cours_d_eauPayload>
          }
          findMany: {
            args: Prisma.etat_cours_d_eauFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$etat_cours_d_eauPayload>[]
          }
          delete: {
            args: Prisma.etat_cours_d_eauDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$etat_cours_d_eauPayload>
          }
          update: {
            args: Prisma.etat_cours_d_eauUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$etat_cours_d_eauPayload>
          }
          deleteMany: {
            args: Prisma.etat_cours_d_eauDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.etat_cours_d_eauUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.etat_cours_d_eauUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$etat_cours_d_eauPayload>[]
          }
          aggregate: {
            args: Prisma.Etat_cours_d_eauAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEtat_cours_d_eau>
          }
          groupBy: {
            args: Prisma.etat_cours_d_eauGroupByArgs<ExtArgs>
            result: $Utils.Optional<Etat_cours_d_eauGroupByOutputType>[]
          }
          count: {
            args: Prisma.etat_cours_d_eauCountArgs<ExtArgs>
            result: $Utils.Optional<Etat_cours_d_eauCountAggregateOutputType> | number
          }
        }
      }
      aot_40: {
        payload: Prisma.$aot_40Payload<ExtArgs>
        fields: Prisma.aot_40FieldRefs
        operations: {
          findUnique: {
            args: Prisma.aot_40FindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$aot_40Payload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.aot_40FindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$aot_40Payload>
          }
          findFirst: {
            args: Prisma.aot_40FindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$aot_40Payload> | null
          }
          findFirstOrThrow: {
            args: Prisma.aot_40FindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$aot_40Payload>
          }
          findMany: {
            args: Prisma.aot_40FindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$aot_40Payload>[]
          }
          create: {
            args: Prisma.aot_40CreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$aot_40Payload>
          }
          createMany: {
            args: Prisma.aot_40CreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.aot_40CreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$aot_40Payload>[]
          }
          delete: {
            args: Prisma.aot_40DeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$aot_40Payload>
          }
          update: {
            args: Prisma.aot_40UpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$aot_40Payload>
          }
          deleteMany: {
            args: Prisma.aot_40DeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.aot_40UpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.aot_40UpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$aot_40Payload>[]
          }
          upsert: {
            args: Prisma.aot_40UpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$aot_40Payload>
          }
          aggregate: {
            args: Prisma.Aot_40AggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAot_40>
          }
          groupBy: {
            args: Prisma.aot_40GroupByArgs<ExtArgs>
            result: $Utils.Optional<Aot_40GroupByOutputType>[]
          }
          count: {
            args: Prisma.aot_40CountArgs<ExtArgs>
            result: $Utils.Optional<Aot_40CountAggregateOutputType> | number
          }
        }
      }
      qualite_sites_baignade: {
        payload: Prisma.$qualite_sites_baignadePayload<ExtArgs>
        fields: Prisma.qualite_sites_baignadeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.qualite_sites_baignadeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$qualite_sites_baignadePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.qualite_sites_baignadeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$qualite_sites_baignadePayload>
          }
          findFirst: {
            args: Prisma.qualite_sites_baignadeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$qualite_sites_baignadePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.qualite_sites_baignadeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$qualite_sites_baignadePayload>
          }
          findMany: {
            args: Prisma.qualite_sites_baignadeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$qualite_sites_baignadePayload>[]
          }
          create: {
            args: Prisma.qualite_sites_baignadeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$qualite_sites_baignadePayload>
          }
          createMany: {
            args: Prisma.qualite_sites_baignadeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.qualite_sites_baignadeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$qualite_sites_baignadePayload>[]
          }
          delete: {
            args: Prisma.qualite_sites_baignadeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$qualite_sites_baignadePayload>
          }
          update: {
            args: Prisma.qualite_sites_baignadeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$qualite_sites_baignadePayload>
          }
          deleteMany: {
            args: Prisma.qualite_sites_baignadeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.qualite_sites_baignadeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.qualite_sites_baignadeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$qualite_sites_baignadePayload>[]
          }
          upsert: {
            args: Prisma.qualite_sites_baignadeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$qualite_sites_baignadePayload>
          }
          aggregate: {
            args: Prisma.Qualite_sites_baignadeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQualite_sites_baignade>
          }
          groupBy: {
            args: Prisma.qualite_sites_baignadeGroupByArgs<ExtArgs>
            result: $Utils.Optional<Qualite_sites_baignadeGroupByOutputType>[]
          }
          count: {
            args: Prisma.qualite_sites_baignadeCountArgs<ExtArgs>
            result: $Utils.Optional<Qualite_sites_baignadeCountAggregateOutputType> | number
          }
        }
      }
      communes: {
        payload: Prisma.$communesPayload<ExtArgs>
        fields: Prisma.communesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.communesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$communesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.communesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$communesPayload>
          }
          findFirst: {
            args: Prisma.communesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$communesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.communesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$communesPayload>
          }
          findMany: {
            args: Prisma.communesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$communesPayload>[]
          }
          create: {
            args: Prisma.communesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$communesPayload>
          }
          createMany: {
            args: Prisma.communesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.communesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$communesPayload>[]
          }
          delete: {
            args: Prisma.communesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$communesPayload>
          }
          update: {
            args: Prisma.communesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$communesPayload>
          }
          deleteMany: {
            args: Prisma.communesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.communesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.communesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$communesPayload>[]
          }
          upsert: {
            args: Prisma.communesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$communesPayload>
          }
          aggregate: {
            args: Prisma.CommunesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCommunes>
          }
          groupBy: {
            args: Prisma.communesGroupByArgs<ExtArgs>
            result: $Utils.Optional<CommunesGroupByOutputType>[]
          }
          count: {
            args: Prisma.communesCountArgs<ExtArgs>
            result: $Utils.Optional<CommunesCountAggregateOutputType> | number
          }
        }
      }
      patch4c: {
        payload: Prisma.$patch4cPayload<ExtArgs>
        fields: Prisma.patch4cFieldRefs
        operations: {
          findUnique: {
            args: Prisma.patch4cFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$patch4cPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.patch4cFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$patch4cPayload>
          }
          findFirst: {
            args: Prisma.patch4cFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$patch4cPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.patch4cFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$patch4cPayload>
          }
          findMany: {
            args: Prisma.patch4cFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$patch4cPayload>[]
          }
          create: {
            args: Prisma.patch4cCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$patch4cPayload>
          }
          createMany: {
            args: Prisma.patch4cCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.patch4cCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$patch4cPayload>[]
          }
          delete: {
            args: Prisma.patch4cDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$patch4cPayload>
          }
          update: {
            args: Prisma.patch4cUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$patch4cPayload>
          }
          deleteMany: {
            args: Prisma.patch4cDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.patch4cUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.patch4cUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$patch4cPayload>[]
          }
          upsert: {
            args: Prisma.patch4cUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$patch4cPayload>
          }
          aggregate: {
            args: Prisma.Patch4cAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePatch4c>
          }
          groupBy: {
            args: Prisma.patch4cGroupByArgs<ExtArgs>
            result: $Utils.Optional<Patch4cGroupByOutputType>[]
          }
          count: {
            args: Prisma.patch4cCountArgs<ExtArgs>
            result: $Utils.Optional<Patch4cCountAggregateOutputType> | number
          }
        }
      }
      agriculture: {
        payload: Prisma.$agriculturePayload<ExtArgs>
        fields: Prisma.agricultureFieldRefs
        operations: {
          findUnique: {
            args: Prisma.agricultureFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$agriculturePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.agricultureFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$agriculturePayload>
          }
          findFirst: {
            args: Prisma.agricultureFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$agriculturePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.agricultureFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$agriculturePayload>
          }
          findMany: {
            args: Prisma.agricultureFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$agriculturePayload>[]
          }
          create: {
            args: Prisma.agricultureCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$agriculturePayload>
          }
          createMany: {
            args: Prisma.agricultureCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.agricultureCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$agriculturePayload>[]
          }
          delete: {
            args: Prisma.agricultureDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$agriculturePayload>
          }
          update: {
            args: Prisma.agricultureUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$agriculturePayload>
          }
          deleteMany: {
            args: Prisma.agricultureDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.agricultureUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.agricultureUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$agriculturePayload>[]
          }
          upsert: {
            args: Prisma.agricultureUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$agriculturePayload>
          }
          aggregate: {
            args: Prisma.AgricultureAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAgriculture>
          }
          groupBy: {
            args: Prisma.agricultureGroupByArgs<ExtArgs>
            result: $Utils.Optional<AgricultureGroupByOutputType>[]
          }
          count: {
            args: Prisma.agricultureCountArgs<ExtArgs>
            result: $Utils.Optional<AgricultureCountAggregateOutputType> | number
          }
        }
      }
      incendies_foret: {
        payload: Prisma.$incendies_foretPayload<ExtArgs>
        fields: Prisma.incendies_foretFieldRefs
        operations: {
          findUnique: {
            args: Prisma.incendies_foretFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$incendies_foretPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.incendies_foretFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$incendies_foretPayload>
          }
          findFirst: {
            args: Prisma.incendies_foretFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$incendies_foretPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.incendies_foretFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$incendies_foretPayload>
          }
          findMany: {
            args: Prisma.incendies_foretFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$incendies_foretPayload>[]
          }
          create: {
            args: Prisma.incendies_foretCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$incendies_foretPayload>
          }
          createMany: {
            args: Prisma.incendies_foretCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.incendies_foretCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$incendies_foretPayload>[]
          }
          delete: {
            args: Prisma.incendies_foretDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$incendies_foretPayload>
          }
          update: {
            args: Prisma.incendies_foretUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$incendies_foretPayload>
          }
          deleteMany: {
            args: Prisma.incendies_foretDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.incendies_foretUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.incendies_foretUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$incendies_foretPayload>[]
          }
          upsert: {
            args: Prisma.incendies_foretUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$incendies_foretPayload>
          }
          aggregate: {
            args: Prisma.Incendies_foretAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateIncendies_foret>
          }
          groupBy: {
            args: Prisma.incendies_foretGroupByArgs<ExtArgs>
            result: $Utils.Optional<Incendies_foretGroupByOutputType>[]
          }
          count: {
            args: Prisma.incendies_foretCountArgs<ExtArgs>
            result: $Utils.Optional<Incendies_foretCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    inconfort_thermique?: inconfort_thermiqueOmit
    clc_epci?: clc_epciOmit
    collectivites_searchbar?: collectivites_searchbarOmit
    biodiversite?: biodiversiteOmit
    gestion_risques?: gestion_risquesOmit
    communes_drom?: communes_dromOmit
    ressources_eau?: ressources_eauOmit
    agriculture_bio?: agriculture_bioOmit
    erosion_cotiere?: erosion_cotiereOmit
    epci?: epciOmit
    surfaces_protegees?: surfaces_protegeesOmit
    consommation_espaces_naf?: consommation_espaces_nafOmit
    north_star_metric?: north_star_metricOmit
    etat_cours_d_eau?: etat_cours_d_eauOmit
    aot_40?: aot_40Omit
    qualite_sites_baignade?: qualite_sites_baignadeOmit
    communes?: communesOmit
    patch4c?: patch4cOmit
    agriculture?: agricultureOmit
    incendies_foret?: incendies_foretOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model inconfort_thermique
   */

  export type AggregateInconfort_thermique = {
    _count: Inconfort_thermiqueCountAggregateOutputType | null
    _avg: Inconfort_thermiqueAvgAggregateOutputType | null
    _sum: Inconfort_thermiqueSumAggregateOutputType | null
    _min: Inconfort_thermiqueMinAggregateOutputType | null
    _max: Inconfort_thermiqueMaxAggregateOutputType | null
  }

  export type Inconfort_thermiqueAvgAggregateOutputType = {
    index: number | null
    region: number | null
    age_bati_post06: number | null
    age_bati_91_05: number | null
    age_bati_46_90: number | null
    age_bati_19_45: number | null
    age_bati_pre_19: number | null
    tee_log: number | null
    tee_mob: number | null
    precarite_logement: number | null
    NA5AZ_sum: number | null
    NA5BE_sum: number | null
    NA5FZ_sum: number | null
    NA5GU_sum: number | null
    NA5OQ_sum: number | null
    s_geom_cstr_bati: number | null
    hauteur: number | null
    h_x_s: number | null
    densite_bati: number | null
    clc_1_artificialise: number | null
    clc_2_agricole: number | null
    clc_3_foret_semiNaturel: number | null
    clc_4_humide: number | null
    clc_5_eau: number | null
    superf_choro: number | null
  }

  export type Inconfort_thermiqueSumAggregateOutputType = {
    index: bigint | null
    region: number | null
    age_bati_post06: number | null
    age_bati_91_05: number | null
    age_bati_46_90: number | null
    age_bati_19_45: number | null
    age_bati_pre_19: number | null
    tee_log: number | null
    tee_mob: number | null
    precarite_logement: number | null
    NA5AZ_sum: number | null
    NA5BE_sum: number | null
    NA5FZ_sum: number | null
    NA5GU_sum: number | null
    NA5OQ_sum: number | null
    s_geom_cstr_bati: number | null
    hauteur: number | null
    h_x_s: number | null
    densite_bati: number | null
    clc_1_artificialise: number | null
    clc_2_agricole: number | null
    clc_3_foret_semiNaturel: number | null
    clc_4_humide: number | null
    clc_5_eau: number | null
    superf_choro: number | null
  }

  export type Inconfort_thermiqueMinAggregateOutputType = {
    index: bigint | null
    code_geographique: string | null
    libelle_geographique: string | null
    epci: string | null
    libelle_epci: string | null
    departement: string | null
    region: number | null
    age_bati_post06: number | null
    age_bati_91_05: number | null
    age_bati_46_90: number | null
    age_bati_19_45: number | null
    age_bati_pre_19: number | null
    under_4_sum_1968: string | null
    to_80_sum_1968: string | null
    over_80_sum_1968: string | null
    under_4_sum_1975: string | null
    to_80_sum_1975: string | null
    over_80_sum_1975: string | null
    under_4_sum_1982: string | null
    to_80_sum_1982: string | null
    over_80_sum_1982: string | null
    under_4_sum_1990: string | null
    to_80_sum_1990: string | null
    over_80_sum_1990: string | null
    under_4_sum_1999: string | null
    to_80_sum_1999: string | null
    over_80_sum_1999: string | null
    under_4_sum_2009: string | null
    to_80_sum_2009: string | null
    over_80_sum_2009: string | null
    under_4_sum_2014: string | null
    to_80_sum_2014: string | null
    over_80_sum_2014: string | null
    under_4_sum_2020: string | null
    to_80_sum_2020: string | null
    over_80_sum_2020: string | null
    P20_POP80P: string | null
    P20_POP80P_PSEUL: string | null
    P20_POP80P_PSEUL_PERCENT: string | null
    tee_log: number | null
    tee_mob: number | null
    precarite_logement: number | null
    NA5AZ_sum: number | null
    NA5BE_sum: number | null
    NA5FZ_sum: number | null
    NA5GU_sum: number | null
    NA5OQ_sum: number | null
    s_geom_cstr_bati: number | null
    hauteur: number | null
    h_x_s: number | null
    densite_bati: number | null
    clc_1_artificialise: number | null
    clc_2_agricole: number | null
    clc_3_foret_semiNaturel: number | null
    clc_4_humide: number | null
    clc_5_eau: number | null
    superf_choro: number | null
  }

  export type Inconfort_thermiqueMaxAggregateOutputType = {
    index: bigint | null
    code_geographique: string | null
    libelle_geographique: string | null
    epci: string | null
    libelle_epci: string | null
    departement: string | null
    region: number | null
    age_bati_post06: number | null
    age_bati_91_05: number | null
    age_bati_46_90: number | null
    age_bati_19_45: number | null
    age_bati_pre_19: number | null
    under_4_sum_1968: string | null
    to_80_sum_1968: string | null
    over_80_sum_1968: string | null
    under_4_sum_1975: string | null
    to_80_sum_1975: string | null
    over_80_sum_1975: string | null
    under_4_sum_1982: string | null
    to_80_sum_1982: string | null
    over_80_sum_1982: string | null
    under_4_sum_1990: string | null
    to_80_sum_1990: string | null
    over_80_sum_1990: string | null
    under_4_sum_1999: string | null
    to_80_sum_1999: string | null
    over_80_sum_1999: string | null
    under_4_sum_2009: string | null
    to_80_sum_2009: string | null
    over_80_sum_2009: string | null
    under_4_sum_2014: string | null
    to_80_sum_2014: string | null
    over_80_sum_2014: string | null
    under_4_sum_2020: string | null
    to_80_sum_2020: string | null
    over_80_sum_2020: string | null
    P20_POP80P: string | null
    P20_POP80P_PSEUL: string | null
    P20_POP80P_PSEUL_PERCENT: string | null
    tee_log: number | null
    tee_mob: number | null
    precarite_logement: number | null
    NA5AZ_sum: number | null
    NA5BE_sum: number | null
    NA5FZ_sum: number | null
    NA5GU_sum: number | null
    NA5OQ_sum: number | null
    s_geom_cstr_bati: number | null
    hauteur: number | null
    h_x_s: number | null
    densite_bati: number | null
    clc_1_artificialise: number | null
    clc_2_agricole: number | null
    clc_3_foret_semiNaturel: number | null
    clc_4_humide: number | null
    clc_5_eau: number | null
    superf_choro: number | null
  }

  export type Inconfort_thermiqueCountAggregateOutputType = {
    index: number
    code_geographique: number
    libelle_geographique: number
    epci: number
    libelle_epci: number
    departement: number
    region: number
    age_bati_post06: number
    age_bati_91_05: number
    age_bati_46_90: number
    age_bati_19_45: number
    age_bati_pre_19: number
    under_4_sum_1968: number
    to_80_sum_1968: number
    over_80_sum_1968: number
    under_4_sum_1975: number
    to_80_sum_1975: number
    over_80_sum_1975: number
    under_4_sum_1982: number
    to_80_sum_1982: number
    over_80_sum_1982: number
    under_4_sum_1990: number
    to_80_sum_1990: number
    over_80_sum_1990: number
    under_4_sum_1999: number
    to_80_sum_1999: number
    over_80_sum_1999: number
    under_4_sum_2009: number
    to_80_sum_2009: number
    over_80_sum_2009: number
    under_4_sum_2014: number
    to_80_sum_2014: number
    over_80_sum_2014: number
    under_4_sum_2020: number
    to_80_sum_2020: number
    over_80_sum_2020: number
    P20_POP80P: number
    P20_POP80P_PSEUL: number
    P20_POP80P_PSEUL_PERCENT: number
    tee_log: number
    tee_mob: number
    precarite_logement: number
    NA5AZ_sum: number
    NA5BE_sum: number
    NA5FZ_sum: number
    NA5GU_sum: number
    NA5OQ_sum: number
    s_geom_cstr_bati: number
    hauteur: number
    h_x_s: number
    densite_bati: number
    clc_1_artificialise: number
    clc_2_agricole: number
    clc_3_foret_semiNaturel: number
    clc_4_humide: number
    clc_5_eau: number
    superf_choro: number
    _all: number
  }


  export type Inconfort_thermiqueAvgAggregateInputType = {
    index?: true
    region?: true
    age_bati_post06?: true
    age_bati_91_05?: true
    age_bati_46_90?: true
    age_bati_19_45?: true
    age_bati_pre_19?: true
    tee_log?: true
    tee_mob?: true
    precarite_logement?: true
    NA5AZ_sum?: true
    NA5BE_sum?: true
    NA5FZ_sum?: true
    NA5GU_sum?: true
    NA5OQ_sum?: true
    s_geom_cstr_bati?: true
    hauteur?: true
    h_x_s?: true
    densite_bati?: true
    clc_1_artificialise?: true
    clc_2_agricole?: true
    clc_3_foret_semiNaturel?: true
    clc_4_humide?: true
    clc_5_eau?: true
    superf_choro?: true
  }

  export type Inconfort_thermiqueSumAggregateInputType = {
    index?: true
    region?: true
    age_bati_post06?: true
    age_bati_91_05?: true
    age_bati_46_90?: true
    age_bati_19_45?: true
    age_bati_pre_19?: true
    tee_log?: true
    tee_mob?: true
    precarite_logement?: true
    NA5AZ_sum?: true
    NA5BE_sum?: true
    NA5FZ_sum?: true
    NA5GU_sum?: true
    NA5OQ_sum?: true
    s_geom_cstr_bati?: true
    hauteur?: true
    h_x_s?: true
    densite_bati?: true
    clc_1_artificialise?: true
    clc_2_agricole?: true
    clc_3_foret_semiNaturel?: true
    clc_4_humide?: true
    clc_5_eau?: true
    superf_choro?: true
  }

  export type Inconfort_thermiqueMinAggregateInputType = {
    index?: true
    code_geographique?: true
    libelle_geographique?: true
    epci?: true
    libelle_epci?: true
    departement?: true
    region?: true
    age_bati_post06?: true
    age_bati_91_05?: true
    age_bati_46_90?: true
    age_bati_19_45?: true
    age_bati_pre_19?: true
    under_4_sum_1968?: true
    to_80_sum_1968?: true
    over_80_sum_1968?: true
    under_4_sum_1975?: true
    to_80_sum_1975?: true
    over_80_sum_1975?: true
    under_4_sum_1982?: true
    to_80_sum_1982?: true
    over_80_sum_1982?: true
    under_4_sum_1990?: true
    to_80_sum_1990?: true
    over_80_sum_1990?: true
    under_4_sum_1999?: true
    to_80_sum_1999?: true
    over_80_sum_1999?: true
    under_4_sum_2009?: true
    to_80_sum_2009?: true
    over_80_sum_2009?: true
    under_4_sum_2014?: true
    to_80_sum_2014?: true
    over_80_sum_2014?: true
    under_4_sum_2020?: true
    to_80_sum_2020?: true
    over_80_sum_2020?: true
    P20_POP80P?: true
    P20_POP80P_PSEUL?: true
    P20_POP80P_PSEUL_PERCENT?: true
    tee_log?: true
    tee_mob?: true
    precarite_logement?: true
    NA5AZ_sum?: true
    NA5BE_sum?: true
    NA5FZ_sum?: true
    NA5GU_sum?: true
    NA5OQ_sum?: true
    s_geom_cstr_bati?: true
    hauteur?: true
    h_x_s?: true
    densite_bati?: true
    clc_1_artificialise?: true
    clc_2_agricole?: true
    clc_3_foret_semiNaturel?: true
    clc_4_humide?: true
    clc_5_eau?: true
    superf_choro?: true
  }

  export type Inconfort_thermiqueMaxAggregateInputType = {
    index?: true
    code_geographique?: true
    libelle_geographique?: true
    epci?: true
    libelle_epci?: true
    departement?: true
    region?: true
    age_bati_post06?: true
    age_bati_91_05?: true
    age_bati_46_90?: true
    age_bati_19_45?: true
    age_bati_pre_19?: true
    under_4_sum_1968?: true
    to_80_sum_1968?: true
    over_80_sum_1968?: true
    under_4_sum_1975?: true
    to_80_sum_1975?: true
    over_80_sum_1975?: true
    under_4_sum_1982?: true
    to_80_sum_1982?: true
    over_80_sum_1982?: true
    under_4_sum_1990?: true
    to_80_sum_1990?: true
    over_80_sum_1990?: true
    under_4_sum_1999?: true
    to_80_sum_1999?: true
    over_80_sum_1999?: true
    under_4_sum_2009?: true
    to_80_sum_2009?: true
    over_80_sum_2009?: true
    under_4_sum_2014?: true
    to_80_sum_2014?: true
    over_80_sum_2014?: true
    under_4_sum_2020?: true
    to_80_sum_2020?: true
    over_80_sum_2020?: true
    P20_POP80P?: true
    P20_POP80P_PSEUL?: true
    P20_POP80P_PSEUL_PERCENT?: true
    tee_log?: true
    tee_mob?: true
    precarite_logement?: true
    NA5AZ_sum?: true
    NA5BE_sum?: true
    NA5FZ_sum?: true
    NA5GU_sum?: true
    NA5OQ_sum?: true
    s_geom_cstr_bati?: true
    hauteur?: true
    h_x_s?: true
    densite_bati?: true
    clc_1_artificialise?: true
    clc_2_agricole?: true
    clc_3_foret_semiNaturel?: true
    clc_4_humide?: true
    clc_5_eau?: true
    superf_choro?: true
  }

  export type Inconfort_thermiqueCountAggregateInputType = {
    index?: true
    code_geographique?: true
    libelle_geographique?: true
    epci?: true
    libelle_epci?: true
    departement?: true
    region?: true
    age_bati_post06?: true
    age_bati_91_05?: true
    age_bati_46_90?: true
    age_bati_19_45?: true
    age_bati_pre_19?: true
    under_4_sum_1968?: true
    to_80_sum_1968?: true
    over_80_sum_1968?: true
    under_4_sum_1975?: true
    to_80_sum_1975?: true
    over_80_sum_1975?: true
    under_4_sum_1982?: true
    to_80_sum_1982?: true
    over_80_sum_1982?: true
    under_4_sum_1990?: true
    to_80_sum_1990?: true
    over_80_sum_1990?: true
    under_4_sum_1999?: true
    to_80_sum_1999?: true
    over_80_sum_1999?: true
    under_4_sum_2009?: true
    to_80_sum_2009?: true
    over_80_sum_2009?: true
    under_4_sum_2014?: true
    to_80_sum_2014?: true
    over_80_sum_2014?: true
    under_4_sum_2020?: true
    to_80_sum_2020?: true
    over_80_sum_2020?: true
    P20_POP80P?: true
    P20_POP80P_PSEUL?: true
    P20_POP80P_PSEUL_PERCENT?: true
    tee_log?: true
    tee_mob?: true
    precarite_logement?: true
    NA5AZ_sum?: true
    NA5BE_sum?: true
    NA5FZ_sum?: true
    NA5GU_sum?: true
    NA5OQ_sum?: true
    s_geom_cstr_bati?: true
    hauteur?: true
    h_x_s?: true
    densite_bati?: true
    clc_1_artificialise?: true
    clc_2_agricole?: true
    clc_3_foret_semiNaturel?: true
    clc_4_humide?: true
    clc_5_eau?: true
    superf_choro?: true
    _all?: true
  }

  export type Inconfort_thermiqueAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which inconfort_thermique to aggregate.
     */
    where?: inconfort_thermiqueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of inconfort_thermiques to fetch.
     */
    orderBy?: inconfort_thermiqueOrderByWithRelationInput | inconfort_thermiqueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: inconfort_thermiqueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` inconfort_thermiques from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` inconfort_thermiques.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned inconfort_thermiques
    **/
    _count?: true | Inconfort_thermiqueCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Inconfort_thermiqueAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Inconfort_thermiqueSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Inconfort_thermiqueMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Inconfort_thermiqueMaxAggregateInputType
  }

  export type GetInconfort_thermiqueAggregateType<T extends Inconfort_thermiqueAggregateArgs> = {
        [P in keyof T & keyof AggregateInconfort_thermique]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInconfort_thermique[P]>
      : GetScalarType<T[P], AggregateInconfort_thermique[P]>
  }




  export type inconfort_thermiqueGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: inconfort_thermiqueWhereInput
    orderBy?: inconfort_thermiqueOrderByWithAggregationInput | inconfort_thermiqueOrderByWithAggregationInput[]
    by: Inconfort_thermiqueScalarFieldEnum[] | Inconfort_thermiqueScalarFieldEnum
    having?: inconfort_thermiqueScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Inconfort_thermiqueCountAggregateInputType | true
    _avg?: Inconfort_thermiqueAvgAggregateInputType
    _sum?: Inconfort_thermiqueSumAggregateInputType
    _min?: Inconfort_thermiqueMinAggregateInputType
    _max?: Inconfort_thermiqueMaxAggregateInputType
  }

  export type Inconfort_thermiqueGroupByOutputType = {
    index: bigint
    code_geographique: string
    libelle_geographique: string
    epci: string
    libelle_epci: string
    departement: string
    region: number
    age_bati_post06: number | null
    age_bati_91_05: number | null
    age_bati_46_90: number | null
    age_bati_19_45: number | null
    age_bati_pre_19: number | null
    under_4_sum_1968: string | null
    to_80_sum_1968: string | null
    over_80_sum_1968: string | null
    under_4_sum_1975: string | null
    to_80_sum_1975: string | null
    over_80_sum_1975: string | null
    under_4_sum_1982: string | null
    to_80_sum_1982: string | null
    over_80_sum_1982: string | null
    under_4_sum_1990: string | null
    to_80_sum_1990: string | null
    over_80_sum_1990: string | null
    under_4_sum_1999: string | null
    to_80_sum_1999: string | null
    over_80_sum_1999: string | null
    under_4_sum_2009: string | null
    to_80_sum_2009: string | null
    over_80_sum_2009: string | null
    under_4_sum_2014: string | null
    to_80_sum_2014: string | null
    over_80_sum_2014: string | null
    under_4_sum_2020: string | null
    to_80_sum_2020: string | null
    over_80_sum_2020: string | null
    P20_POP80P: string | null
    P20_POP80P_PSEUL: string | null
    P20_POP80P_PSEUL_PERCENT: string | null
    tee_log: number | null
    tee_mob: number | null
    precarite_logement: number | null
    NA5AZ_sum: number | null
    NA5BE_sum: number | null
    NA5FZ_sum: number | null
    NA5GU_sum: number | null
    NA5OQ_sum: number | null
    s_geom_cstr_bati: number | null
    hauteur: number | null
    h_x_s: number | null
    densite_bati: number | null
    clc_1_artificialise: number | null
    clc_2_agricole: number | null
    clc_3_foret_semiNaturel: number | null
    clc_4_humide: number | null
    clc_5_eau: number | null
    superf_choro: number | null
    _count: Inconfort_thermiqueCountAggregateOutputType | null
    _avg: Inconfort_thermiqueAvgAggregateOutputType | null
    _sum: Inconfort_thermiqueSumAggregateOutputType | null
    _min: Inconfort_thermiqueMinAggregateOutputType | null
    _max: Inconfort_thermiqueMaxAggregateOutputType | null
  }

  type GetInconfort_thermiqueGroupByPayload<T extends inconfort_thermiqueGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Inconfort_thermiqueGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Inconfort_thermiqueGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Inconfort_thermiqueGroupByOutputType[P]>
            : GetScalarType<T[P], Inconfort_thermiqueGroupByOutputType[P]>
        }
      >
    >


  export type inconfort_thermiqueSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    index?: boolean
    code_geographique?: boolean
    libelle_geographique?: boolean
    epci?: boolean
    libelle_epci?: boolean
    departement?: boolean
    region?: boolean
    age_bati_post06?: boolean
    age_bati_91_05?: boolean
    age_bati_46_90?: boolean
    age_bati_19_45?: boolean
    age_bati_pre_19?: boolean
    under_4_sum_1968?: boolean
    to_80_sum_1968?: boolean
    over_80_sum_1968?: boolean
    under_4_sum_1975?: boolean
    to_80_sum_1975?: boolean
    over_80_sum_1975?: boolean
    under_4_sum_1982?: boolean
    to_80_sum_1982?: boolean
    over_80_sum_1982?: boolean
    under_4_sum_1990?: boolean
    to_80_sum_1990?: boolean
    over_80_sum_1990?: boolean
    under_4_sum_1999?: boolean
    to_80_sum_1999?: boolean
    over_80_sum_1999?: boolean
    under_4_sum_2009?: boolean
    to_80_sum_2009?: boolean
    over_80_sum_2009?: boolean
    under_4_sum_2014?: boolean
    to_80_sum_2014?: boolean
    over_80_sum_2014?: boolean
    under_4_sum_2020?: boolean
    to_80_sum_2020?: boolean
    over_80_sum_2020?: boolean
    P20_POP80P?: boolean
    P20_POP80P_PSEUL?: boolean
    P20_POP80P_PSEUL_PERCENT?: boolean
    tee_log?: boolean
    tee_mob?: boolean
    precarite_logement?: boolean
    NA5AZ_sum?: boolean
    NA5BE_sum?: boolean
    NA5FZ_sum?: boolean
    NA5GU_sum?: boolean
    NA5OQ_sum?: boolean
    s_geom_cstr_bati?: boolean
    hauteur?: boolean
    h_x_s?: boolean
    densite_bati?: boolean
    clc_1_artificialise?: boolean
    clc_2_agricole?: boolean
    clc_3_foret_semiNaturel?: boolean
    clc_4_humide?: boolean
    clc_5_eau?: boolean
    superf_choro?: boolean
  }, ExtArgs["result"]["inconfort_thermique"]>

  export type inconfort_thermiqueSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    index?: boolean
    code_geographique?: boolean
    libelle_geographique?: boolean
    epci?: boolean
    libelle_epci?: boolean
    departement?: boolean
    region?: boolean
    age_bati_post06?: boolean
    age_bati_91_05?: boolean
    age_bati_46_90?: boolean
    age_bati_19_45?: boolean
    age_bati_pre_19?: boolean
    under_4_sum_1968?: boolean
    to_80_sum_1968?: boolean
    over_80_sum_1968?: boolean
    under_4_sum_1975?: boolean
    to_80_sum_1975?: boolean
    over_80_sum_1975?: boolean
    under_4_sum_1982?: boolean
    to_80_sum_1982?: boolean
    over_80_sum_1982?: boolean
    under_4_sum_1990?: boolean
    to_80_sum_1990?: boolean
    over_80_sum_1990?: boolean
    under_4_sum_1999?: boolean
    to_80_sum_1999?: boolean
    over_80_sum_1999?: boolean
    under_4_sum_2009?: boolean
    to_80_sum_2009?: boolean
    over_80_sum_2009?: boolean
    under_4_sum_2014?: boolean
    to_80_sum_2014?: boolean
    over_80_sum_2014?: boolean
    under_4_sum_2020?: boolean
    to_80_sum_2020?: boolean
    over_80_sum_2020?: boolean
    P20_POP80P?: boolean
    P20_POP80P_PSEUL?: boolean
    P20_POP80P_PSEUL_PERCENT?: boolean
    tee_log?: boolean
    tee_mob?: boolean
    precarite_logement?: boolean
    NA5AZ_sum?: boolean
    NA5BE_sum?: boolean
    NA5FZ_sum?: boolean
    NA5GU_sum?: boolean
    NA5OQ_sum?: boolean
    s_geom_cstr_bati?: boolean
    hauteur?: boolean
    h_x_s?: boolean
    densite_bati?: boolean
    clc_1_artificialise?: boolean
    clc_2_agricole?: boolean
    clc_3_foret_semiNaturel?: boolean
    clc_4_humide?: boolean
    clc_5_eau?: boolean
    superf_choro?: boolean
  }, ExtArgs["result"]["inconfort_thermique"]>

  export type inconfort_thermiqueSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    index?: boolean
    code_geographique?: boolean
    libelle_geographique?: boolean
    epci?: boolean
    libelle_epci?: boolean
    departement?: boolean
    region?: boolean
    age_bati_post06?: boolean
    age_bati_91_05?: boolean
    age_bati_46_90?: boolean
    age_bati_19_45?: boolean
    age_bati_pre_19?: boolean
    under_4_sum_1968?: boolean
    to_80_sum_1968?: boolean
    over_80_sum_1968?: boolean
    under_4_sum_1975?: boolean
    to_80_sum_1975?: boolean
    over_80_sum_1975?: boolean
    under_4_sum_1982?: boolean
    to_80_sum_1982?: boolean
    over_80_sum_1982?: boolean
    under_4_sum_1990?: boolean
    to_80_sum_1990?: boolean
    over_80_sum_1990?: boolean
    under_4_sum_1999?: boolean
    to_80_sum_1999?: boolean
    over_80_sum_1999?: boolean
    under_4_sum_2009?: boolean
    to_80_sum_2009?: boolean
    over_80_sum_2009?: boolean
    under_4_sum_2014?: boolean
    to_80_sum_2014?: boolean
    over_80_sum_2014?: boolean
    under_4_sum_2020?: boolean
    to_80_sum_2020?: boolean
    over_80_sum_2020?: boolean
    P20_POP80P?: boolean
    P20_POP80P_PSEUL?: boolean
    P20_POP80P_PSEUL_PERCENT?: boolean
    tee_log?: boolean
    tee_mob?: boolean
    precarite_logement?: boolean
    NA5AZ_sum?: boolean
    NA5BE_sum?: boolean
    NA5FZ_sum?: boolean
    NA5GU_sum?: boolean
    NA5OQ_sum?: boolean
    s_geom_cstr_bati?: boolean
    hauteur?: boolean
    h_x_s?: boolean
    densite_bati?: boolean
    clc_1_artificialise?: boolean
    clc_2_agricole?: boolean
    clc_3_foret_semiNaturel?: boolean
    clc_4_humide?: boolean
    clc_5_eau?: boolean
    superf_choro?: boolean
  }, ExtArgs["result"]["inconfort_thermique"]>

  export type inconfort_thermiqueSelectScalar = {
    index?: boolean
    code_geographique?: boolean
    libelle_geographique?: boolean
    epci?: boolean
    libelle_epci?: boolean
    departement?: boolean
    region?: boolean
    age_bati_post06?: boolean
    age_bati_91_05?: boolean
    age_bati_46_90?: boolean
    age_bati_19_45?: boolean
    age_bati_pre_19?: boolean
    under_4_sum_1968?: boolean
    to_80_sum_1968?: boolean
    over_80_sum_1968?: boolean
    under_4_sum_1975?: boolean
    to_80_sum_1975?: boolean
    over_80_sum_1975?: boolean
    under_4_sum_1982?: boolean
    to_80_sum_1982?: boolean
    over_80_sum_1982?: boolean
    under_4_sum_1990?: boolean
    to_80_sum_1990?: boolean
    over_80_sum_1990?: boolean
    under_4_sum_1999?: boolean
    to_80_sum_1999?: boolean
    over_80_sum_1999?: boolean
    under_4_sum_2009?: boolean
    to_80_sum_2009?: boolean
    over_80_sum_2009?: boolean
    under_4_sum_2014?: boolean
    to_80_sum_2014?: boolean
    over_80_sum_2014?: boolean
    under_4_sum_2020?: boolean
    to_80_sum_2020?: boolean
    over_80_sum_2020?: boolean
    P20_POP80P?: boolean
    P20_POP80P_PSEUL?: boolean
    P20_POP80P_PSEUL_PERCENT?: boolean
    tee_log?: boolean
    tee_mob?: boolean
    precarite_logement?: boolean
    NA5AZ_sum?: boolean
    NA5BE_sum?: boolean
    NA5FZ_sum?: boolean
    NA5GU_sum?: boolean
    NA5OQ_sum?: boolean
    s_geom_cstr_bati?: boolean
    hauteur?: boolean
    h_x_s?: boolean
    densite_bati?: boolean
    clc_1_artificialise?: boolean
    clc_2_agricole?: boolean
    clc_3_foret_semiNaturel?: boolean
    clc_4_humide?: boolean
    clc_5_eau?: boolean
    superf_choro?: boolean
  }

  export type inconfort_thermiqueOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"index" | "code_geographique" | "libelle_geographique" | "epci" | "libelle_epci" | "departement" | "region" | "age_bati_post06" | "age_bati_91_05" | "age_bati_46_90" | "age_bati_19_45" | "age_bati_pre_19" | "under_4_sum_1968" | "to_80_sum_1968" | "over_80_sum_1968" | "under_4_sum_1975" | "to_80_sum_1975" | "over_80_sum_1975" | "under_4_sum_1982" | "to_80_sum_1982" | "over_80_sum_1982" | "under_4_sum_1990" | "to_80_sum_1990" | "over_80_sum_1990" | "under_4_sum_1999" | "to_80_sum_1999" | "over_80_sum_1999" | "under_4_sum_2009" | "to_80_sum_2009" | "over_80_sum_2009" | "under_4_sum_2014" | "to_80_sum_2014" | "over_80_sum_2014" | "under_4_sum_2020" | "to_80_sum_2020" | "over_80_sum_2020" | "P20_POP80P" | "P20_POP80P_PSEUL" | "P20_POP80P_PSEUL_PERCENT" | "tee_log" | "tee_mob" | "precarite_logement" | "NA5AZ_sum" | "NA5BE_sum" | "NA5FZ_sum" | "NA5GU_sum" | "NA5OQ_sum" | "s_geom_cstr_bati" | "hauteur" | "h_x_s" | "densite_bati" | "clc_1_artificialise" | "clc_2_agricole" | "clc_3_foret_semiNaturel" | "clc_4_humide" | "clc_5_eau" | "superf_choro", ExtArgs["result"]["inconfort_thermique"]>

  export type $inconfort_thermiquePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "inconfort_thermique"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      index: bigint
      code_geographique: string
      libelle_geographique: string
      epci: string
      libelle_epci: string
      departement: string
      region: number
      age_bati_post06: number | null
      age_bati_91_05: number | null
      age_bati_46_90: number | null
      age_bati_19_45: number | null
      age_bati_pre_19: number | null
      under_4_sum_1968: string | null
      to_80_sum_1968: string | null
      over_80_sum_1968: string | null
      under_4_sum_1975: string | null
      to_80_sum_1975: string | null
      over_80_sum_1975: string | null
      under_4_sum_1982: string | null
      to_80_sum_1982: string | null
      over_80_sum_1982: string | null
      under_4_sum_1990: string | null
      to_80_sum_1990: string | null
      over_80_sum_1990: string | null
      under_4_sum_1999: string | null
      to_80_sum_1999: string | null
      over_80_sum_1999: string | null
      under_4_sum_2009: string | null
      to_80_sum_2009: string | null
      over_80_sum_2009: string | null
      under_4_sum_2014: string | null
      to_80_sum_2014: string | null
      over_80_sum_2014: string | null
      under_4_sum_2020: string | null
      to_80_sum_2020: string | null
      over_80_sum_2020: string | null
      P20_POP80P: string | null
      P20_POP80P_PSEUL: string | null
      P20_POP80P_PSEUL_PERCENT: string | null
      tee_log: number | null
      tee_mob: number | null
      precarite_logement: number | null
      NA5AZ_sum: number | null
      NA5BE_sum: number | null
      NA5FZ_sum: number | null
      NA5GU_sum: number | null
      NA5OQ_sum: number | null
      s_geom_cstr_bati: number | null
      hauteur: number | null
      h_x_s: number | null
      densite_bati: number | null
      clc_1_artificialise: number | null
      clc_2_agricole: number | null
      clc_3_foret_semiNaturel: number | null
      clc_4_humide: number | null
      clc_5_eau: number | null
      superf_choro: number | null
    }, ExtArgs["result"]["inconfort_thermique"]>
    composites: {}
  }

  type inconfort_thermiqueGetPayload<S extends boolean | null | undefined | inconfort_thermiqueDefaultArgs> = $Result.GetResult<Prisma.$inconfort_thermiquePayload, S>

  type inconfort_thermiqueCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<inconfort_thermiqueFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Inconfort_thermiqueCountAggregateInputType | true
    }

  export interface inconfort_thermiqueDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['inconfort_thermique'], meta: { name: 'inconfort_thermique' } }
    /**
     * Find zero or one Inconfort_thermique that matches the filter.
     * @param {inconfort_thermiqueFindUniqueArgs} args - Arguments to find a Inconfort_thermique
     * @example
     * // Get one Inconfort_thermique
     * const inconfort_thermique = await prisma.inconfort_thermique.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends inconfort_thermiqueFindUniqueArgs>(args: SelectSubset<T, inconfort_thermiqueFindUniqueArgs<ExtArgs>>): Prisma__inconfort_thermiqueClient<$Result.GetResult<Prisma.$inconfort_thermiquePayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Inconfort_thermique that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {inconfort_thermiqueFindUniqueOrThrowArgs} args - Arguments to find a Inconfort_thermique
     * @example
     * // Get one Inconfort_thermique
     * const inconfort_thermique = await prisma.inconfort_thermique.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends inconfort_thermiqueFindUniqueOrThrowArgs>(args: SelectSubset<T, inconfort_thermiqueFindUniqueOrThrowArgs<ExtArgs>>): Prisma__inconfort_thermiqueClient<$Result.GetResult<Prisma.$inconfort_thermiquePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Inconfort_thermique that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {inconfort_thermiqueFindFirstArgs} args - Arguments to find a Inconfort_thermique
     * @example
     * // Get one Inconfort_thermique
     * const inconfort_thermique = await prisma.inconfort_thermique.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends inconfort_thermiqueFindFirstArgs>(args?: SelectSubset<T, inconfort_thermiqueFindFirstArgs<ExtArgs>>): Prisma__inconfort_thermiqueClient<$Result.GetResult<Prisma.$inconfort_thermiquePayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Inconfort_thermique that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {inconfort_thermiqueFindFirstOrThrowArgs} args - Arguments to find a Inconfort_thermique
     * @example
     * // Get one Inconfort_thermique
     * const inconfort_thermique = await prisma.inconfort_thermique.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends inconfort_thermiqueFindFirstOrThrowArgs>(args?: SelectSubset<T, inconfort_thermiqueFindFirstOrThrowArgs<ExtArgs>>): Prisma__inconfort_thermiqueClient<$Result.GetResult<Prisma.$inconfort_thermiquePayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Inconfort_thermiques that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {inconfort_thermiqueFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Inconfort_thermiques
     * const inconfort_thermiques = await prisma.inconfort_thermique.findMany()
     * 
     * // Get first 10 Inconfort_thermiques
     * const inconfort_thermiques = await prisma.inconfort_thermique.findMany({ take: 10 })
     * 
     * // Only select the `index`
     * const inconfort_thermiqueWithIndexOnly = await prisma.inconfort_thermique.findMany({ select: { index: true } })
     * 
     */
    findMany<T extends inconfort_thermiqueFindManyArgs>(args?: SelectSubset<T, inconfort_thermiqueFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$inconfort_thermiquePayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Inconfort_thermique.
     * @param {inconfort_thermiqueCreateArgs} args - Arguments to create a Inconfort_thermique.
     * @example
     * // Create one Inconfort_thermique
     * const Inconfort_thermique = await prisma.inconfort_thermique.create({
     *   data: {
     *     // ... data to create a Inconfort_thermique
     *   }
     * })
     * 
     */
    create<T extends inconfort_thermiqueCreateArgs>(args: SelectSubset<T, inconfort_thermiqueCreateArgs<ExtArgs>>): Prisma__inconfort_thermiqueClient<$Result.GetResult<Prisma.$inconfort_thermiquePayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Inconfort_thermiques.
     * @param {inconfort_thermiqueCreateManyArgs} args - Arguments to create many Inconfort_thermiques.
     * @example
     * // Create many Inconfort_thermiques
     * const inconfort_thermique = await prisma.inconfort_thermique.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends inconfort_thermiqueCreateManyArgs>(args?: SelectSubset<T, inconfort_thermiqueCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Inconfort_thermiques and returns the data saved in the database.
     * @param {inconfort_thermiqueCreateManyAndReturnArgs} args - Arguments to create many Inconfort_thermiques.
     * @example
     * // Create many Inconfort_thermiques
     * const inconfort_thermique = await prisma.inconfort_thermique.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Inconfort_thermiques and only return the `index`
     * const inconfort_thermiqueWithIndexOnly = await prisma.inconfort_thermique.createManyAndReturn({
     *   select: { index: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends inconfort_thermiqueCreateManyAndReturnArgs>(args?: SelectSubset<T, inconfort_thermiqueCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$inconfort_thermiquePayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Inconfort_thermique.
     * @param {inconfort_thermiqueDeleteArgs} args - Arguments to delete one Inconfort_thermique.
     * @example
     * // Delete one Inconfort_thermique
     * const Inconfort_thermique = await prisma.inconfort_thermique.delete({
     *   where: {
     *     // ... filter to delete one Inconfort_thermique
     *   }
     * })
     * 
     */
    delete<T extends inconfort_thermiqueDeleteArgs>(args: SelectSubset<T, inconfort_thermiqueDeleteArgs<ExtArgs>>): Prisma__inconfort_thermiqueClient<$Result.GetResult<Prisma.$inconfort_thermiquePayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Inconfort_thermique.
     * @param {inconfort_thermiqueUpdateArgs} args - Arguments to update one Inconfort_thermique.
     * @example
     * // Update one Inconfort_thermique
     * const inconfort_thermique = await prisma.inconfort_thermique.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends inconfort_thermiqueUpdateArgs>(args: SelectSubset<T, inconfort_thermiqueUpdateArgs<ExtArgs>>): Prisma__inconfort_thermiqueClient<$Result.GetResult<Prisma.$inconfort_thermiquePayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Inconfort_thermiques.
     * @param {inconfort_thermiqueDeleteManyArgs} args - Arguments to filter Inconfort_thermiques to delete.
     * @example
     * // Delete a few Inconfort_thermiques
     * const { count } = await prisma.inconfort_thermique.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends inconfort_thermiqueDeleteManyArgs>(args?: SelectSubset<T, inconfort_thermiqueDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Inconfort_thermiques.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {inconfort_thermiqueUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Inconfort_thermiques
     * const inconfort_thermique = await prisma.inconfort_thermique.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends inconfort_thermiqueUpdateManyArgs>(args: SelectSubset<T, inconfort_thermiqueUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Inconfort_thermiques and returns the data updated in the database.
     * @param {inconfort_thermiqueUpdateManyAndReturnArgs} args - Arguments to update many Inconfort_thermiques.
     * @example
     * // Update many Inconfort_thermiques
     * const inconfort_thermique = await prisma.inconfort_thermique.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Inconfort_thermiques and only return the `index`
     * const inconfort_thermiqueWithIndexOnly = await prisma.inconfort_thermique.updateManyAndReturn({
     *   select: { index: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends inconfort_thermiqueUpdateManyAndReturnArgs>(args: SelectSubset<T, inconfort_thermiqueUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$inconfort_thermiquePayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Inconfort_thermique.
     * @param {inconfort_thermiqueUpsertArgs} args - Arguments to update or create a Inconfort_thermique.
     * @example
     * // Update or create a Inconfort_thermique
     * const inconfort_thermique = await prisma.inconfort_thermique.upsert({
     *   create: {
     *     // ... data to create a Inconfort_thermique
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Inconfort_thermique we want to update
     *   }
     * })
     */
    upsert<T extends inconfort_thermiqueUpsertArgs>(args: SelectSubset<T, inconfort_thermiqueUpsertArgs<ExtArgs>>): Prisma__inconfort_thermiqueClient<$Result.GetResult<Prisma.$inconfort_thermiquePayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Inconfort_thermiques.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {inconfort_thermiqueCountArgs} args - Arguments to filter Inconfort_thermiques to count.
     * @example
     * // Count the number of Inconfort_thermiques
     * const count = await prisma.inconfort_thermique.count({
     *   where: {
     *     // ... the filter for the Inconfort_thermiques we want to count
     *   }
     * })
    **/
    count<T extends inconfort_thermiqueCountArgs>(
      args?: Subset<T, inconfort_thermiqueCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Inconfort_thermiqueCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Inconfort_thermique.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Inconfort_thermiqueAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Inconfort_thermiqueAggregateArgs>(args: Subset<T, Inconfort_thermiqueAggregateArgs>): Prisma.PrismaPromise<GetInconfort_thermiqueAggregateType<T>>

    /**
     * Group by Inconfort_thermique.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {inconfort_thermiqueGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends inconfort_thermiqueGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: inconfort_thermiqueGroupByArgs['orderBy'] }
        : { orderBy?: inconfort_thermiqueGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, inconfort_thermiqueGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInconfort_thermiqueGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the inconfort_thermique model
   */
  readonly fields: inconfort_thermiqueFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for inconfort_thermique.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__inconfort_thermiqueClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the inconfort_thermique model
   */ 
  interface inconfort_thermiqueFieldRefs {
    readonly index: FieldRef<"inconfort_thermique", 'BigInt'>
    readonly code_geographique: FieldRef<"inconfort_thermique", 'String'>
    readonly libelle_geographique: FieldRef<"inconfort_thermique", 'String'>
    readonly epci: FieldRef<"inconfort_thermique", 'String'>
    readonly libelle_epci: FieldRef<"inconfort_thermique", 'String'>
    readonly departement: FieldRef<"inconfort_thermique", 'String'>
    readonly region: FieldRef<"inconfort_thermique", 'Int'>
    readonly age_bati_post06: FieldRef<"inconfort_thermique", 'Float'>
    readonly age_bati_91_05: FieldRef<"inconfort_thermique", 'Float'>
    readonly age_bati_46_90: FieldRef<"inconfort_thermique", 'Float'>
    readonly age_bati_19_45: FieldRef<"inconfort_thermique", 'Float'>
    readonly age_bati_pre_19: FieldRef<"inconfort_thermique", 'Float'>
    readonly under_4_sum_1968: FieldRef<"inconfort_thermique", 'String'>
    readonly to_80_sum_1968: FieldRef<"inconfort_thermique", 'String'>
    readonly over_80_sum_1968: FieldRef<"inconfort_thermique", 'String'>
    readonly under_4_sum_1975: FieldRef<"inconfort_thermique", 'String'>
    readonly to_80_sum_1975: FieldRef<"inconfort_thermique", 'String'>
    readonly over_80_sum_1975: FieldRef<"inconfort_thermique", 'String'>
    readonly under_4_sum_1982: FieldRef<"inconfort_thermique", 'String'>
    readonly to_80_sum_1982: FieldRef<"inconfort_thermique", 'String'>
    readonly over_80_sum_1982: FieldRef<"inconfort_thermique", 'String'>
    readonly under_4_sum_1990: FieldRef<"inconfort_thermique", 'String'>
    readonly to_80_sum_1990: FieldRef<"inconfort_thermique", 'String'>
    readonly over_80_sum_1990: FieldRef<"inconfort_thermique", 'String'>
    readonly under_4_sum_1999: FieldRef<"inconfort_thermique", 'String'>
    readonly to_80_sum_1999: FieldRef<"inconfort_thermique", 'String'>
    readonly over_80_sum_1999: FieldRef<"inconfort_thermique", 'String'>
    readonly under_4_sum_2009: FieldRef<"inconfort_thermique", 'String'>
    readonly to_80_sum_2009: FieldRef<"inconfort_thermique", 'String'>
    readonly over_80_sum_2009: FieldRef<"inconfort_thermique", 'String'>
    readonly under_4_sum_2014: FieldRef<"inconfort_thermique", 'String'>
    readonly to_80_sum_2014: FieldRef<"inconfort_thermique", 'String'>
    readonly over_80_sum_2014: FieldRef<"inconfort_thermique", 'String'>
    readonly under_4_sum_2020: FieldRef<"inconfort_thermique", 'String'>
    readonly to_80_sum_2020: FieldRef<"inconfort_thermique", 'String'>
    readonly over_80_sum_2020: FieldRef<"inconfort_thermique", 'String'>
    readonly P20_POP80P: FieldRef<"inconfort_thermique", 'String'>
    readonly P20_POP80P_PSEUL: FieldRef<"inconfort_thermique", 'String'>
    readonly P20_POP80P_PSEUL_PERCENT: FieldRef<"inconfort_thermique", 'String'>
    readonly tee_log: FieldRef<"inconfort_thermique", 'Float'>
    readonly tee_mob: FieldRef<"inconfort_thermique", 'Float'>
    readonly precarite_logement: FieldRef<"inconfort_thermique", 'Float'>
    readonly NA5AZ_sum: FieldRef<"inconfort_thermique", 'Float'>
    readonly NA5BE_sum: FieldRef<"inconfort_thermique", 'Float'>
    readonly NA5FZ_sum: FieldRef<"inconfort_thermique", 'Float'>
    readonly NA5GU_sum: FieldRef<"inconfort_thermique", 'Float'>
    readonly NA5OQ_sum: FieldRef<"inconfort_thermique", 'Float'>
    readonly s_geom_cstr_bati: FieldRef<"inconfort_thermique", 'Float'>
    readonly hauteur: FieldRef<"inconfort_thermique", 'Float'>
    readonly h_x_s: FieldRef<"inconfort_thermique", 'Float'>
    readonly densite_bati: FieldRef<"inconfort_thermique", 'Float'>
    readonly clc_1_artificialise: FieldRef<"inconfort_thermique", 'Float'>
    readonly clc_2_agricole: FieldRef<"inconfort_thermique", 'Float'>
    readonly clc_3_foret_semiNaturel: FieldRef<"inconfort_thermique", 'Float'>
    readonly clc_4_humide: FieldRef<"inconfort_thermique", 'Float'>
    readonly clc_5_eau: FieldRef<"inconfort_thermique", 'Float'>
    readonly superf_choro: FieldRef<"inconfort_thermique", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * inconfort_thermique findUnique
   */
  export type inconfort_thermiqueFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the inconfort_thermique
     */
    select?: inconfort_thermiqueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the inconfort_thermique
     */
    omit?: inconfort_thermiqueOmit<ExtArgs> | null
    /**
     * Filter, which inconfort_thermique to fetch.
     */
    where: inconfort_thermiqueWhereUniqueInput
  }

  /**
   * inconfort_thermique findUniqueOrThrow
   */
  export type inconfort_thermiqueFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the inconfort_thermique
     */
    select?: inconfort_thermiqueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the inconfort_thermique
     */
    omit?: inconfort_thermiqueOmit<ExtArgs> | null
    /**
     * Filter, which inconfort_thermique to fetch.
     */
    where: inconfort_thermiqueWhereUniqueInput
  }

  /**
   * inconfort_thermique findFirst
   */
  export type inconfort_thermiqueFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the inconfort_thermique
     */
    select?: inconfort_thermiqueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the inconfort_thermique
     */
    omit?: inconfort_thermiqueOmit<ExtArgs> | null
    /**
     * Filter, which inconfort_thermique to fetch.
     */
    where?: inconfort_thermiqueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of inconfort_thermiques to fetch.
     */
    orderBy?: inconfort_thermiqueOrderByWithRelationInput | inconfort_thermiqueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for inconfort_thermiques.
     */
    cursor?: inconfort_thermiqueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` inconfort_thermiques from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` inconfort_thermiques.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of inconfort_thermiques.
     */
    distinct?: Inconfort_thermiqueScalarFieldEnum | Inconfort_thermiqueScalarFieldEnum[]
  }

  /**
   * inconfort_thermique findFirstOrThrow
   */
  export type inconfort_thermiqueFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the inconfort_thermique
     */
    select?: inconfort_thermiqueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the inconfort_thermique
     */
    omit?: inconfort_thermiqueOmit<ExtArgs> | null
    /**
     * Filter, which inconfort_thermique to fetch.
     */
    where?: inconfort_thermiqueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of inconfort_thermiques to fetch.
     */
    orderBy?: inconfort_thermiqueOrderByWithRelationInput | inconfort_thermiqueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for inconfort_thermiques.
     */
    cursor?: inconfort_thermiqueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` inconfort_thermiques from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` inconfort_thermiques.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of inconfort_thermiques.
     */
    distinct?: Inconfort_thermiqueScalarFieldEnum | Inconfort_thermiqueScalarFieldEnum[]
  }

  /**
   * inconfort_thermique findMany
   */
  export type inconfort_thermiqueFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the inconfort_thermique
     */
    select?: inconfort_thermiqueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the inconfort_thermique
     */
    omit?: inconfort_thermiqueOmit<ExtArgs> | null
    /**
     * Filter, which inconfort_thermiques to fetch.
     */
    where?: inconfort_thermiqueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of inconfort_thermiques to fetch.
     */
    orderBy?: inconfort_thermiqueOrderByWithRelationInput | inconfort_thermiqueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing inconfort_thermiques.
     */
    cursor?: inconfort_thermiqueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` inconfort_thermiques from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` inconfort_thermiques.
     */
    skip?: number
    distinct?: Inconfort_thermiqueScalarFieldEnum | Inconfort_thermiqueScalarFieldEnum[]
  }

  /**
   * inconfort_thermique create
   */
  export type inconfort_thermiqueCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the inconfort_thermique
     */
    select?: inconfort_thermiqueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the inconfort_thermique
     */
    omit?: inconfort_thermiqueOmit<ExtArgs> | null
    /**
     * The data needed to create a inconfort_thermique.
     */
    data: XOR<inconfort_thermiqueCreateInput, inconfort_thermiqueUncheckedCreateInput>
  }

  /**
   * inconfort_thermique createMany
   */
  export type inconfort_thermiqueCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many inconfort_thermiques.
     */
    data: inconfort_thermiqueCreateManyInput | inconfort_thermiqueCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * inconfort_thermique createManyAndReturn
   */
  export type inconfort_thermiqueCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the inconfort_thermique
     */
    select?: inconfort_thermiqueSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the inconfort_thermique
     */
    omit?: inconfort_thermiqueOmit<ExtArgs> | null
    /**
     * The data used to create many inconfort_thermiques.
     */
    data: inconfort_thermiqueCreateManyInput | inconfort_thermiqueCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * inconfort_thermique update
   */
  export type inconfort_thermiqueUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the inconfort_thermique
     */
    select?: inconfort_thermiqueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the inconfort_thermique
     */
    omit?: inconfort_thermiqueOmit<ExtArgs> | null
    /**
     * The data needed to update a inconfort_thermique.
     */
    data: XOR<inconfort_thermiqueUpdateInput, inconfort_thermiqueUncheckedUpdateInput>
    /**
     * Choose, which inconfort_thermique to update.
     */
    where: inconfort_thermiqueWhereUniqueInput
  }

  /**
   * inconfort_thermique updateMany
   */
  export type inconfort_thermiqueUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update inconfort_thermiques.
     */
    data: XOR<inconfort_thermiqueUpdateManyMutationInput, inconfort_thermiqueUncheckedUpdateManyInput>
    /**
     * Filter which inconfort_thermiques to update
     */
    where?: inconfort_thermiqueWhereInput
    /**
     * Limit how many inconfort_thermiques to update.
     */
    limit?: number
  }

  /**
   * inconfort_thermique updateManyAndReturn
   */
  export type inconfort_thermiqueUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the inconfort_thermique
     */
    select?: inconfort_thermiqueSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the inconfort_thermique
     */
    omit?: inconfort_thermiqueOmit<ExtArgs> | null
    /**
     * The data used to update inconfort_thermiques.
     */
    data: XOR<inconfort_thermiqueUpdateManyMutationInput, inconfort_thermiqueUncheckedUpdateManyInput>
    /**
     * Filter which inconfort_thermiques to update
     */
    where?: inconfort_thermiqueWhereInput
    /**
     * Limit how many inconfort_thermiques to update.
     */
    limit?: number
  }

  /**
   * inconfort_thermique upsert
   */
  export type inconfort_thermiqueUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the inconfort_thermique
     */
    select?: inconfort_thermiqueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the inconfort_thermique
     */
    omit?: inconfort_thermiqueOmit<ExtArgs> | null
    /**
     * The filter to search for the inconfort_thermique to update in case it exists.
     */
    where: inconfort_thermiqueWhereUniqueInput
    /**
     * In case the inconfort_thermique found by the `where` argument doesn't exist, create a new inconfort_thermique with this data.
     */
    create: XOR<inconfort_thermiqueCreateInput, inconfort_thermiqueUncheckedCreateInput>
    /**
     * In case the inconfort_thermique was found with the provided `where` argument, update it with this data.
     */
    update: XOR<inconfort_thermiqueUpdateInput, inconfort_thermiqueUncheckedUpdateInput>
  }

  /**
   * inconfort_thermique delete
   */
  export type inconfort_thermiqueDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the inconfort_thermique
     */
    select?: inconfort_thermiqueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the inconfort_thermique
     */
    omit?: inconfort_thermiqueOmit<ExtArgs> | null
    /**
     * Filter which inconfort_thermique to delete.
     */
    where: inconfort_thermiqueWhereUniqueInput
  }

  /**
   * inconfort_thermique deleteMany
   */
  export type inconfort_thermiqueDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which inconfort_thermiques to delete
     */
    where?: inconfort_thermiqueWhereInput
    /**
     * Limit how many inconfort_thermiques to delete.
     */
    limit?: number
  }

  /**
   * inconfort_thermique without action
   */
  export type inconfort_thermiqueDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the inconfort_thermique
     */
    select?: inconfort_thermiqueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the inconfort_thermique
     */
    omit?: inconfort_thermiqueOmit<ExtArgs> | null
  }


  /**
   * Model clc_epci
   */

  export type AggregateClc_epci = {
    _count: Clc_epciCountAggregateOutputType | null
    _avg: Clc_epciAvgAggregateOutputType | null
    _sum: Clc_epciSumAggregateOutputType | null
    _min: Clc_epciMinAggregateOutputType | null
    _max: Clc_epciMaxAggregateOutputType | null
  }

  export type Clc_epciAvgAggregateOutputType = {
    pk: number | null
    epci_code: number | null
  }

  export type Clc_epciSumAggregateOutputType = {
    pk: number | null
    epci_code: number | null
  }

  export type Clc_epciMinAggregateOutputType = {
    pk: number | null
    legend: string | null
    epci_code: number | null
  }

  export type Clc_epciMaxAggregateOutputType = {
    pk: number | null
    legend: string | null
    epci_code: number | null
  }

  export type Clc_epciCountAggregateOutputType = {
    pk: number
    legend: number
    epci_code: number
    _all: number
  }


  export type Clc_epciAvgAggregateInputType = {
    pk?: true
    epci_code?: true
  }

  export type Clc_epciSumAggregateInputType = {
    pk?: true
    epci_code?: true
  }

  export type Clc_epciMinAggregateInputType = {
    pk?: true
    legend?: true
    epci_code?: true
  }

  export type Clc_epciMaxAggregateInputType = {
    pk?: true
    legend?: true
    epci_code?: true
  }

  export type Clc_epciCountAggregateInputType = {
    pk?: true
    legend?: true
    epci_code?: true
    _all?: true
  }

  export type Clc_epciAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which clc_epci to aggregate.
     */
    where?: clc_epciWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clc_epcis to fetch.
     */
    orderBy?: clc_epciOrderByWithRelationInput | clc_epciOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: clc_epciWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clc_epcis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clc_epcis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned clc_epcis
    **/
    _count?: true | Clc_epciCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Clc_epciAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Clc_epciSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Clc_epciMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Clc_epciMaxAggregateInputType
  }

  export type GetClc_epciAggregateType<T extends Clc_epciAggregateArgs> = {
        [P in keyof T & keyof AggregateClc_epci]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClc_epci[P]>
      : GetScalarType<T[P], AggregateClc_epci[P]>
  }




  export type clc_epciGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: clc_epciWhereInput
    orderBy?: clc_epciOrderByWithAggregationInput | clc_epciOrderByWithAggregationInput[]
    by: Clc_epciScalarFieldEnum[] | Clc_epciScalarFieldEnum
    having?: clc_epciScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Clc_epciCountAggregateInputType | true
    _avg?: Clc_epciAvgAggregateInputType
    _sum?: Clc_epciSumAggregateInputType
    _min?: Clc_epciMinAggregateInputType
    _max?: Clc_epciMaxAggregateInputType
  }

  export type Clc_epciGroupByOutputType = {
    pk: number
    legend: string | null
    epci_code: number | null
    _count: Clc_epciCountAggregateOutputType | null
    _avg: Clc_epciAvgAggregateOutputType | null
    _sum: Clc_epciSumAggregateOutputType | null
    _min: Clc_epciMinAggregateOutputType | null
    _max: Clc_epciMaxAggregateOutputType | null
  }

  type GetClc_epciGroupByPayload<T extends clc_epciGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Clc_epciGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Clc_epciGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Clc_epciGroupByOutputType[P]>
            : GetScalarType<T[P], Clc_epciGroupByOutputType[P]>
        }
      >
    >


  export type clc_epciSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    pk?: boolean
    legend?: boolean
    epci_code?: boolean
  }, ExtArgs["result"]["clc_epci"]>

  export type clc_epciSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    pk?: boolean
    legend?: boolean
    epci_code?: boolean
  }, ExtArgs["result"]["clc_epci"]>

  export type clc_epciSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    pk?: boolean
    legend?: boolean
    epci_code?: boolean
  }, ExtArgs["result"]["clc_epci"]>

  export type clc_epciSelectScalar = {
    pk?: boolean
    legend?: boolean
    epci_code?: boolean
  }

  export type clc_epciOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"pk" | "legend" | "epci_code", ExtArgs["result"]["clc_epci"]>

  export type $clc_epciPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "clc_epci"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      pk: number
      legend: string | null
      epci_code: number | null
    }, ExtArgs["result"]["clc_epci"]>
    composites: {}
  }

  type clc_epciGetPayload<S extends boolean | null | undefined | clc_epciDefaultArgs> = $Result.GetResult<Prisma.$clc_epciPayload, S>

  type clc_epciCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<clc_epciFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Clc_epciCountAggregateInputType | true
    }

  export interface clc_epciDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['clc_epci'], meta: { name: 'clc_epci' } }
    /**
     * Find zero or one Clc_epci that matches the filter.
     * @param {clc_epciFindUniqueArgs} args - Arguments to find a Clc_epci
     * @example
     * // Get one Clc_epci
     * const clc_epci = await prisma.clc_epci.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends clc_epciFindUniqueArgs>(args: SelectSubset<T, clc_epciFindUniqueArgs<ExtArgs>>): Prisma__clc_epciClient<$Result.GetResult<Prisma.$clc_epciPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Clc_epci that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {clc_epciFindUniqueOrThrowArgs} args - Arguments to find a Clc_epci
     * @example
     * // Get one Clc_epci
     * const clc_epci = await prisma.clc_epci.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends clc_epciFindUniqueOrThrowArgs>(args: SelectSubset<T, clc_epciFindUniqueOrThrowArgs<ExtArgs>>): Prisma__clc_epciClient<$Result.GetResult<Prisma.$clc_epciPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Clc_epci that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clc_epciFindFirstArgs} args - Arguments to find a Clc_epci
     * @example
     * // Get one Clc_epci
     * const clc_epci = await prisma.clc_epci.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends clc_epciFindFirstArgs>(args?: SelectSubset<T, clc_epciFindFirstArgs<ExtArgs>>): Prisma__clc_epciClient<$Result.GetResult<Prisma.$clc_epciPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Clc_epci that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clc_epciFindFirstOrThrowArgs} args - Arguments to find a Clc_epci
     * @example
     * // Get one Clc_epci
     * const clc_epci = await prisma.clc_epci.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends clc_epciFindFirstOrThrowArgs>(args?: SelectSubset<T, clc_epciFindFirstOrThrowArgs<ExtArgs>>): Prisma__clc_epciClient<$Result.GetResult<Prisma.$clc_epciPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Clc_epcis that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clc_epciFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clc_epcis
     * const clc_epcis = await prisma.clc_epci.findMany()
     * 
     * // Get first 10 Clc_epcis
     * const clc_epcis = await prisma.clc_epci.findMany({ take: 10 })
     * 
     * // Only select the `pk`
     * const clc_epciWithPkOnly = await prisma.clc_epci.findMany({ select: { pk: true } })
     * 
     */
    findMany<T extends clc_epciFindManyArgs>(args?: SelectSubset<T, clc_epciFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$clc_epciPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Clc_epci.
     * @param {clc_epciCreateArgs} args - Arguments to create a Clc_epci.
     * @example
     * // Create one Clc_epci
     * const Clc_epci = await prisma.clc_epci.create({
     *   data: {
     *     // ... data to create a Clc_epci
     *   }
     * })
     * 
     */
    create<T extends clc_epciCreateArgs>(args: SelectSubset<T, clc_epciCreateArgs<ExtArgs>>): Prisma__clc_epciClient<$Result.GetResult<Prisma.$clc_epciPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Clc_epcis.
     * @param {clc_epciCreateManyArgs} args - Arguments to create many Clc_epcis.
     * @example
     * // Create many Clc_epcis
     * const clc_epci = await prisma.clc_epci.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends clc_epciCreateManyArgs>(args?: SelectSubset<T, clc_epciCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Clc_epcis and returns the data saved in the database.
     * @param {clc_epciCreateManyAndReturnArgs} args - Arguments to create many Clc_epcis.
     * @example
     * // Create many Clc_epcis
     * const clc_epci = await prisma.clc_epci.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Clc_epcis and only return the `pk`
     * const clc_epciWithPkOnly = await prisma.clc_epci.createManyAndReturn({
     *   select: { pk: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends clc_epciCreateManyAndReturnArgs>(args?: SelectSubset<T, clc_epciCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$clc_epciPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Clc_epci.
     * @param {clc_epciDeleteArgs} args - Arguments to delete one Clc_epci.
     * @example
     * // Delete one Clc_epci
     * const Clc_epci = await prisma.clc_epci.delete({
     *   where: {
     *     // ... filter to delete one Clc_epci
     *   }
     * })
     * 
     */
    delete<T extends clc_epciDeleteArgs>(args: SelectSubset<T, clc_epciDeleteArgs<ExtArgs>>): Prisma__clc_epciClient<$Result.GetResult<Prisma.$clc_epciPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Clc_epci.
     * @param {clc_epciUpdateArgs} args - Arguments to update one Clc_epci.
     * @example
     * // Update one Clc_epci
     * const clc_epci = await prisma.clc_epci.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends clc_epciUpdateArgs>(args: SelectSubset<T, clc_epciUpdateArgs<ExtArgs>>): Prisma__clc_epciClient<$Result.GetResult<Prisma.$clc_epciPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Clc_epcis.
     * @param {clc_epciDeleteManyArgs} args - Arguments to filter Clc_epcis to delete.
     * @example
     * // Delete a few Clc_epcis
     * const { count } = await prisma.clc_epci.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends clc_epciDeleteManyArgs>(args?: SelectSubset<T, clc_epciDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clc_epcis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clc_epciUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clc_epcis
     * const clc_epci = await prisma.clc_epci.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends clc_epciUpdateManyArgs>(args: SelectSubset<T, clc_epciUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clc_epcis and returns the data updated in the database.
     * @param {clc_epciUpdateManyAndReturnArgs} args - Arguments to update many Clc_epcis.
     * @example
     * // Update many Clc_epcis
     * const clc_epci = await prisma.clc_epci.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Clc_epcis and only return the `pk`
     * const clc_epciWithPkOnly = await prisma.clc_epci.updateManyAndReturn({
     *   select: { pk: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends clc_epciUpdateManyAndReturnArgs>(args: SelectSubset<T, clc_epciUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$clc_epciPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Clc_epci.
     * @param {clc_epciUpsertArgs} args - Arguments to update or create a Clc_epci.
     * @example
     * // Update or create a Clc_epci
     * const clc_epci = await prisma.clc_epci.upsert({
     *   create: {
     *     // ... data to create a Clc_epci
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Clc_epci we want to update
     *   }
     * })
     */
    upsert<T extends clc_epciUpsertArgs>(args: SelectSubset<T, clc_epciUpsertArgs<ExtArgs>>): Prisma__clc_epciClient<$Result.GetResult<Prisma.$clc_epciPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Clc_epcis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clc_epciCountArgs} args - Arguments to filter Clc_epcis to count.
     * @example
     * // Count the number of Clc_epcis
     * const count = await prisma.clc_epci.count({
     *   where: {
     *     // ... the filter for the Clc_epcis we want to count
     *   }
     * })
    **/
    count<T extends clc_epciCountArgs>(
      args?: Subset<T, clc_epciCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Clc_epciCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Clc_epci.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Clc_epciAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Clc_epciAggregateArgs>(args: Subset<T, Clc_epciAggregateArgs>): Prisma.PrismaPromise<GetClc_epciAggregateType<T>>

    /**
     * Group by Clc_epci.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clc_epciGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends clc_epciGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: clc_epciGroupByArgs['orderBy'] }
        : { orderBy?: clc_epciGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, clc_epciGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClc_epciGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the clc_epci model
   */
  readonly fields: clc_epciFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for clc_epci.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__clc_epciClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the clc_epci model
   */ 
  interface clc_epciFieldRefs {
    readonly pk: FieldRef<"clc_epci", 'Int'>
    readonly legend: FieldRef<"clc_epci", 'String'>
    readonly epci_code: FieldRef<"clc_epci", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * clc_epci findUnique
   */
  export type clc_epciFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clc_epci
     */
    select?: clc_epciSelect<ExtArgs> | null
    /**
     * Omit specific fields from the clc_epci
     */
    omit?: clc_epciOmit<ExtArgs> | null
    /**
     * Filter, which clc_epci to fetch.
     */
    where: clc_epciWhereUniqueInput
  }

  /**
   * clc_epci findUniqueOrThrow
   */
  export type clc_epciFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clc_epci
     */
    select?: clc_epciSelect<ExtArgs> | null
    /**
     * Omit specific fields from the clc_epci
     */
    omit?: clc_epciOmit<ExtArgs> | null
    /**
     * Filter, which clc_epci to fetch.
     */
    where: clc_epciWhereUniqueInput
  }

  /**
   * clc_epci findFirst
   */
  export type clc_epciFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clc_epci
     */
    select?: clc_epciSelect<ExtArgs> | null
    /**
     * Omit specific fields from the clc_epci
     */
    omit?: clc_epciOmit<ExtArgs> | null
    /**
     * Filter, which clc_epci to fetch.
     */
    where?: clc_epciWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clc_epcis to fetch.
     */
    orderBy?: clc_epciOrderByWithRelationInput | clc_epciOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for clc_epcis.
     */
    cursor?: clc_epciWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clc_epcis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clc_epcis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of clc_epcis.
     */
    distinct?: Clc_epciScalarFieldEnum | Clc_epciScalarFieldEnum[]
  }

  /**
   * clc_epci findFirstOrThrow
   */
  export type clc_epciFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clc_epci
     */
    select?: clc_epciSelect<ExtArgs> | null
    /**
     * Omit specific fields from the clc_epci
     */
    omit?: clc_epciOmit<ExtArgs> | null
    /**
     * Filter, which clc_epci to fetch.
     */
    where?: clc_epciWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clc_epcis to fetch.
     */
    orderBy?: clc_epciOrderByWithRelationInput | clc_epciOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for clc_epcis.
     */
    cursor?: clc_epciWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clc_epcis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clc_epcis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of clc_epcis.
     */
    distinct?: Clc_epciScalarFieldEnum | Clc_epciScalarFieldEnum[]
  }

  /**
   * clc_epci findMany
   */
  export type clc_epciFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clc_epci
     */
    select?: clc_epciSelect<ExtArgs> | null
    /**
     * Omit specific fields from the clc_epci
     */
    omit?: clc_epciOmit<ExtArgs> | null
    /**
     * Filter, which clc_epcis to fetch.
     */
    where?: clc_epciWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clc_epcis to fetch.
     */
    orderBy?: clc_epciOrderByWithRelationInput | clc_epciOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing clc_epcis.
     */
    cursor?: clc_epciWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clc_epcis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clc_epcis.
     */
    skip?: number
    distinct?: Clc_epciScalarFieldEnum | Clc_epciScalarFieldEnum[]
  }

  /**
   * clc_epci create
   */
  export type clc_epciCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clc_epci
     */
    select?: clc_epciSelect<ExtArgs> | null
    /**
     * Omit specific fields from the clc_epci
     */
    omit?: clc_epciOmit<ExtArgs> | null
    /**
     * The data needed to create a clc_epci.
     */
    data?: XOR<clc_epciCreateInput, clc_epciUncheckedCreateInput>
  }

  /**
   * clc_epci createMany
   */
  export type clc_epciCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many clc_epcis.
     */
    data: clc_epciCreateManyInput | clc_epciCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * clc_epci createManyAndReturn
   */
  export type clc_epciCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clc_epci
     */
    select?: clc_epciSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the clc_epci
     */
    omit?: clc_epciOmit<ExtArgs> | null
    /**
     * The data used to create many clc_epcis.
     */
    data: clc_epciCreateManyInput | clc_epciCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * clc_epci update
   */
  export type clc_epciUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clc_epci
     */
    select?: clc_epciSelect<ExtArgs> | null
    /**
     * Omit specific fields from the clc_epci
     */
    omit?: clc_epciOmit<ExtArgs> | null
    /**
     * The data needed to update a clc_epci.
     */
    data: XOR<clc_epciUpdateInput, clc_epciUncheckedUpdateInput>
    /**
     * Choose, which clc_epci to update.
     */
    where: clc_epciWhereUniqueInput
  }

  /**
   * clc_epci updateMany
   */
  export type clc_epciUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update clc_epcis.
     */
    data: XOR<clc_epciUpdateManyMutationInput, clc_epciUncheckedUpdateManyInput>
    /**
     * Filter which clc_epcis to update
     */
    where?: clc_epciWhereInput
    /**
     * Limit how many clc_epcis to update.
     */
    limit?: number
  }

  /**
   * clc_epci updateManyAndReturn
   */
  export type clc_epciUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clc_epci
     */
    select?: clc_epciSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the clc_epci
     */
    omit?: clc_epciOmit<ExtArgs> | null
    /**
     * The data used to update clc_epcis.
     */
    data: XOR<clc_epciUpdateManyMutationInput, clc_epciUncheckedUpdateManyInput>
    /**
     * Filter which clc_epcis to update
     */
    where?: clc_epciWhereInput
    /**
     * Limit how many clc_epcis to update.
     */
    limit?: number
  }

  /**
   * clc_epci upsert
   */
  export type clc_epciUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clc_epci
     */
    select?: clc_epciSelect<ExtArgs> | null
    /**
     * Omit specific fields from the clc_epci
     */
    omit?: clc_epciOmit<ExtArgs> | null
    /**
     * The filter to search for the clc_epci to update in case it exists.
     */
    where: clc_epciWhereUniqueInput
    /**
     * In case the clc_epci found by the `where` argument doesn't exist, create a new clc_epci with this data.
     */
    create: XOR<clc_epciCreateInput, clc_epciUncheckedCreateInput>
    /**
     * In case the clc_epci was found with the provided `where` argument, update it with this data.
     */
    update: XOR<clc_epciUpdateInput, clc_epciUncheckedUpdateInput>
  }

  /**
   * clc_epci delete
   */
  export type clc_epciDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clc_epci
     */
    select?: clc_epciSelect<ExtArgs> | null
    /**
     * Omit specific fields from the clc_epci
     */
    omit?: clc_epciOmit<ExtArgs> | null
    /**
     * Filter which clc_epci to delete.
     */
    where: clc_epciWhereUniqueInput
  }

  /**
   * clc_epci deleteMany
   */
  export type clc_epciDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which clc_epcis to delete
     */
    where?: clc_epciWhereInput
    /**
     * Limit how many clc_epcis to delete.
     */
    limit?: number
  }

  /**
   * clc_epci without action
   */
  export type clc_epciDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clc_epci
     */
    select?: clc_epciSelect<ExtArgs> | null
    /**
     * Omit specific fields from the clc_epci
     */
    omit?: clc_epciOmit<ExtArgs> | null
  }


  /**
   * Model collectivites_searchbar
   */

  export type AggregateCollectivites_searchbar = {
    _count: Collectivites_searchbarCountAggregateOutputType | null
    _avg: Collectivites_searchbarAvgAggregateOutputType | null
    _sum: Collectivites_searchbarSumAggregateOutputType | null
    _min: Collectivites_searchbarMinAggregateOutputType | null
    _max: Collectivites_searchbarMaxAggregateOutputType | null
  }

  export type Collectivites_searchbarAvgAggregateOutputType = {
    index: number | null
  }

  export type Collectivites_searchbarSumAggregateOutputType = {
    index: bigint | null
  }

  export type Collectivites_searchbarMinAggregateOutputType = {
    index: bigint | null
    code_commune: string | null
    coordinates: string | null
    libelle_commune: string | null
    code_epci: string | null
    libelle_epci: string | null
    departement: string | null
    region: string | null
    search_code: string | null
    search_libelle: string | null
  }

  export type Collectivites_searchbarMaxAggregateOutputType = {
    index: bigint | null
    code_commune: string | null
    coordinates: string | null
    libelle_commune: string | null
    code_epci: string | null
    libelle_epci: string | null
    departement: string | null
    region: string | null
    search_code: string | null
    search_libelle: string | null
  }

  export type Collectivites_searchbarCountAggregateOutputType = {
    index: number
    code_commune: number
    coordinates: number
    libelle_commune: number
    code_epci: number
    libelle_epci: number
    departement: number
    region: number
    search_code: number
    search_libelle: number
    _all: number
  }


  export type Collectivites_searchbarAvgAggregateInputType = {
    index?: true
  }

  export type Collectivites_searchbarSumAggregateInputType = {
    index?: true
  }

  export type Collectivites_searchbarMinAggregateInputType = {
    index?: true
    code_commune?: true
    coordinates?: true
    libelle_commune?: true
    code_epci?: true
    libelle_epci?: true
    departement?: true
    region?: true
    search_code?: true
    search_libelle?: true
  }

  export type Collectivites_searchbarMaxAggregateInputType = {
    index?: true
    code_commune?: true
    coordinates?: true
    libelle_commune?: true
    code_epci?: true
    libelle_epci?: true
    departement?: true
    region?: true
    search_code?: true
    search_libelle?: true
  }

  export type Collectivites_searchbarCountAggregateInputType = {
    index?: true
    code_commune?: true
    coordinates?: true
    libelle_commune?: true
    code_epci?: true
    libelle_epci?: true
    departement?: true
    region?: true
    search_code?: true
    search_libelle?: true
    _all?: true
  }

  export type Collectivites_searchbarAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which collectivites_searchbar to aggregate.
     */
    where?: collectivites_searchbarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of collectivites_searchbars to fetch.
     */
    orderBy?: collectivites_searchbarOrderByWithRelationInput | collectivites_searchbarOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: collectivites_searchbarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` collectivites_searchbars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` collectivites_searchbars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned collectivites_searchbars
    **/
    _count?: true | Collectivites_searchbarCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Collectivites_searchbarAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Collectivites_searchbarSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Collectivites_searchbarMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Collectivites_searchbarMaxAggregateInputType
  }

  export type GetCollectivites_searchbarAggregateType<T extends Collectivites_searchbarAggregateArgs> = {
        [P in keyof T & keyof AggregateCollectivites_searchbar]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCollectivites_searchbar[P]>
      : GetScalarType<T[P], AggregateCollectivites_searchbar[P]>
  }




  export type collectivites_searchbarGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: collectivites_searchbarWhereInput
    orderBy?: collectivites_searchbarOrderByWithAggregationInput | collectivites_searchbarOrderByWithAggregationInput[]
    by: Collectivites_searchbarScalarFieldEnum[] | Collectivites_searchbarScalarFieldEnum
    having?: collectivites_searchbarScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Collectivites_searchbarCountAggregateInputType | true
    _avg?: Collectivites_searchbarAvgAggregateInputType
    _sum?: Collectivites_searchbarSumAggregateInputType
    _min?: Collectivites_searchbarMinAggregateInputType
    _max?: Collectivites_searchbarMaxAggregateInputType
  }

  export type Collectivites_searchbarGroupByOutputType = {
    index: bigint
    code_commune: string | null
    coordinates: string | null
    libelle_commune: string | null
    code_epci: string
    libelle_epci: string
    departement: string
    region: string
    search_code: string
    search_libelle: string
    _count: Collectivites_searchbarCountAggregateOutputType | null
    _avg: Collectivites_searchbarAvgAggregateOutputType | null
    _sum: Collectivites_searchbarSumAggregateOutputType | null
    _min: Collectivites_searchbarMinAggregateOutputType | null
    _max: Collectivites_searchbarMaxAggregateOutputType | null
  }

  type GetCollectivites_searchbarGroupByPayload<T extends collectivites_searchbarGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Collectivites_searchbarGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Collectivites_searchbarGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Collectivites_searchbarGroupByOutputType[P]>
            : GetScalarType<T[P], Collectivites_searchbarGroupByOutputType[P]>
        }
      >
    >


  export type collectivites_searchbarSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    index?: boolean
    code_commune?: boolean
    coordinates?: boolean
    libelle_commune?: boolean
    code_epci?: boolean
    libelle_epci?: boolean
    departement?: boolean
    region?: boolean
    search_code?: boolean
    search_libelle?: boolean
  }, ExtArgs["result"]["collectivites_searchbar"]>

  export type collectivites_searchbarSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    index?: boolean
    code_commune?: boolean
    coordinates?: boolean
    libelle_commune?: boolean
    code_epci?: boolean
    libelle_epci?: boolean
    departement?: boolean
    region?: boolean
    search_code?: boolean
    search_libelle?: boolean
  }, ExtArgs["result"]["collectivites_searchbar"]>

  export type collectivites_searchbarSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    index?: boolean
    code_commune?: boolean
    coordinates?: boolean
    libelle_commune?: boolean
    code_epci?: boolean
    libelle_epci?: boolean
    departement?: boolean
    region?: boolean
    search_code?: boolean
    search_libelle?: boolean
  }, ExtArgs["result"]["collectivites_searchbar"]>

  export type collectivites_searchbarSelectScalar = {
    index?: boolean
    code_commune?: boolean
    coordinates?: boolean
    libelle_commune?: boolean
    code_epci?: boolean
    libelle_epci?: boolean
    departement?: boolean
    region?: boolean
    search_code?: boolean
    search_libelle?: boolean
  }

  export type collectivites_searchbarOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"index" | "code_commune" | "coordinates" | "libelle_commune" | "code_epci" | "libelle_epci" | "departement" | "region" | "search_code" | "search_libelle", ExtArgs["result"]["collectivites_searchbar"]>

  export type $collectivites_searchbarPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "collectivites_searchbar"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      index: bigint
      code_commune: string | null
      coordinates: string | null
      libelle_commune: string | null
      code_epci: string
      libelle_epci: string
      departement: string
      region: string
      search_code: string
      search_libelle: string
    }, ExtArgs["result"]["collectivites_searchbar"]>
    composites: {}
  }

  type collectivites_searchbarGetPayload<S extends boolean | null | undefined | collectivites_searchbarDefaultArgs> = $Result.GetResult<Prisma.$collectivites_searchbarPayload, S>

  type collectivites_searchbarCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<collectivites_searchbarFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Collectivites_searchbarCountAggregateInputType | true
    }

  export interface collectivites_searchbarDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['collectivites_searchbar'], meta: { name: 'collectivites_searchbar' } }
    /**
     * Find zero or one Collectivites_searchbar that matches the filter.
     * @param {collectivites_searchbarFindUniqueArgs} args - Arguments to find a Collectivites_searchbar
     * @example
     * // Get one Collectivites_searchbar
     * const collectivites_searchbar = await prisma.collectivites_searchbar.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends collectivites_searchbarFindUniqueArgs>(args: SelectSubset<T, collectivites_searchbarFindUniqueArgs<ExtArgs>>): Prisma__collectivites_searchbarClient<$Result.GetResult<Prisma.$collectivites_searchbarPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Collectivites_searchbar that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {collectivites_searchbarFindUniqueOrThrowArgs} args - Arguments to find a Collectivites_searchbar
     * @example
     * // Get one Collectivites_searchbar
     * const collectivites_searchbar = await prisma.collectivites_searchbar.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends collectivites_searchbarFindUniqueOrThrowArgs>(args: SelectSubset<T, collectivites_searchbarFindUniqueOrThrowArgs<ExtArgs>>): Prisma__collectivites_searchbarClient<$Result.GetResult<Prisma.$collectivites_searchbarPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Collectivites_searchbar that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {collectivites_searchbarFindFirstArgs} args - Arguments to find a Collectivites_searchbar
     * @example
     * // Get one Collectivites_searchbar
     * const collectivites_searchbar = await prisma.collectivites_searchbar.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends collectivites_searchbarFindFirstArgs>(args?: SelectSubset<T, collectivites_searchbarFindFirstArgs<ExtArgs>>): Prisma__collectivites_searchbarClient<$Result.GetResult<Prisma.$collectivites_searchbarPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Collectivites_searchbar that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {collectivites_searchbarFindFirstOrThrowArgs} args - Arguments to find a Collectivites_searchbar
     * @example
     * // Get one Collectivites_searchbar
     * const collectivites_searchbar = await prisma.collectivites_searchbar.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends collectivites_searchbarFindFirstOrThrowArgs>(args?: SelectSubset<T, collectivites_searchbarFindFirstOrThrowArgs<ExtArgs>>): Prisma__collectivites_searchbarClient<$Result.GetResult<Prisma.$collectivites_searchbarPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Collectivites_searchbars that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {collectivites_searchbarFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Collectivites_searchbars
     * const collectivites_searchbars = await prisma.collectivites_searchbar.findMany()
     * 
     * // Get first 10 Collectivites_searchbars
     * const collectivites_searchbars = await prisma.collectivites_searchbar.findMany({ take: 10 })
     * 
     * // Only select the `index`
     * const collectivites_searchbarWithIndexOnly = await prisma.collectivites_searchbar.findMany({ select: { index: true } })
     * 
     */
    findMany<T extends collectivites_searchbarFindManyArgs>(args?: SelectSubset<T, collectivites_searchbarFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$collectivites_searchbarPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Collectivites_searchbar.
     * @param {collectivites_searchbarCreateArgs} args - Arguments to create a Collectivites_searchbar.
     * @example
     * // Create one Collectivites_searchbar
     * const Collectivites_searchbar = await prisma.collectivites_searchbar.create({
     *   data: {
     *     // ... data to create a Collectivites_searchbar
     *   }
     * })
     * 
     */
    create<T extends collectivites_searchbarCreateArgs>(args: SelectSubset<T, collectivites_searchbarCreateArgs<ExtArgs>>): Prisma__collectivites_searchbarClient<$Result.GetResult<Prisma.$collectivites_searchbarPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Collectivites_searchbars.
     * @param {collectivites_searchbarCreateManyArgs} args - Arguments to create many Collectivites_searchbars.
     * @example
     * // Create many Collectivites_searchbars
     * const collectivites_searchbar = await prisma.collectivites_searchbar.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends collectivites_searchbarCreateManyArgs>(args?: SelectSubset<T, collectivites_searchbarCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Collectivites_searchbars and returns the data saved in the database.
     * @param {collectivites_searchbarCreateManyAndReturnArgs} args - Arguments to create many Collectivites_searchbars.
     * @example
     * // Create many Collectivites_searchbars
     * const collectivites_searchbar = await prisma.collectivites_searchbar.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Collectivites_searchbars and only return the `index`
     * const collectivites_searchbarWithIndexOnly = await prisma.collectivites_searchbar.createManyAndReturn({
     *   select: { index: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends collectivites_searchbarCreateManyAndReturnArgs>(args?: SelectSubset<T, collectivites_searchbarCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$collectivites_searchbarPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Collectivites_searchbar.
     * @param {collectivites_searchbarDeleteArgs} args - Arguments to delete one Collectivites_searchbar.
     * @example
     * // Delete one Collectivites_searchbar
     * const Collectivites_searchbar = await prisma.collectivites_searchbar.delete({
     *   where: {
     *     // ... filter to delete one Collectivites_searchbar
     *   }
     * })
     * 
     */
    delete<T extends collectivites_searchbarDeleteArgs>(args: SelectSubset<T, collectivites_searchbarDeleteArgs<ExtArgs>>): Prisma__collectivites_searchbarClient<$Result.GetResult<Prisma.$collectivites_searchbarPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Collectivites_searchbar.
     * @param {collectivites_searchbarUpdateArgs} args - Arguments to update one Collectivites_searchbar.
     * @example
     * // Update one Collectivites_searchbar
     * const collectivites_searchbar = await prisma.collectivites_searchbar.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends collectivites_searchbarUpdateArgs>(args: SelectSubset<T, collectivites_searchbarUpdateArgs<ExtArgs>>): Prisma__collectivites_searchbarClient<$Result.GetResult<Prisma.$collectivites_searchbarPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Collectivites_searchbars.
     * @param {collectivites_searchbarDeleteManyArgs} args - Arguments to filter Collectivites_searchbars to delete.
     * @example
     * // Delete a few Collectivites_searchbars
     * const { count } = await prisma.collectivites_searchbar.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends collectivites_searchbarDeleteManyArgs>(args?: SelectSubset<T, collectivites_searchbarDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Collectivites_searchbars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {collectivites_searchbarUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Collectivites_searchbars
     * const collectivites_searchbar = await prisma.collectivites_searchbar.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends collectivites_searchbarUpdateManyArgs>(args: SelectSubset<T, collectivites_searchbarUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Collectivites_searchbars and returns the data updated in the database.
     * @param {collectivites_searchbarUpdateManyAndReturnArgs} args - Arguments to update many Collectivites_searchbars.
     * @example
     * // Update many Collectivites_searchbars
     * const collectivites_searchbar = await prisma.collectivites_searchbar.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Collectivites_searchbars and only return the `index`
     * const collectivites_searchbarWithIndexOnly = await prisma.collectivites_searchbar.updateManyAndReturn({
     *   select: { index: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends collectivites_searchbarUpdateManyAndReturnArgs>(args: SelectSubset<T, collectivites_searchbarUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$collectivites_searchbarPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Collectivites_searchbar.
     * @param {collectivites_searchbarUpsertArgs} args - Arguments to update or create a Collectivites_searchbar.
     * @example
     * // Update or create a Collectivites_searchbar
     * const collectivites_searchbar = await prisma.collectivites_searchbar.upsert({
     *   create: {
     *     // ... data to create a Collectivites_searchbar
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Collectivites_searchbar we want to update
     *   }
     * })
     */
    upsert<T extends collectivites_searchbarUpsertArgs>(args: SelectSubset<T, collectivites_searchbarUpsertArgs<ExtArgs>>): Prisma__collectivites_searchbarClient<$Result.GetResult<Prisma.$collectivites_searchbarPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Collectivites_searchbars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {collectivites_searchbarCountArgs} args - Arguments to filter Collectivites_searchbars to count.
     * @example
     * // Count the number of Collectivites_searchbars
     * const count = await prisma.collectivites_searchbar.count({
     *   where: {
     *     // ... the filter for the Collectivites_searchbars we want to count
     *   }
     * })
    **/
    count<T extends collectivites_searchbarCountArgs>(
      args?: Subset<T, collectivites_searchbarCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Collectivites_searchbarCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Collectivites_searchbar.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Collectivites_searchbarAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Collectivites_searchbarAggregateArgs>(args: Subset<T, Collectivites_searchbarAggregateArgs>): Prisma.PrismaPromise<GetCollectivites_searchbarAggregateType<T>>

    /**
     * Group by Collectivites_searchbar.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {collectivites_searchbarGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends collectivites_searchbarGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: collectivites_searchbarGroupByArgs['orderBy'] }
        : { orderBy?: collectivites_searchbarGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, collectivites_searchbarGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCollectivites_searchbarGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the collectivites_searchbar model
   */
  readonly fields: collectivites_searchbarFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for collectivites_searchbar.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__collectivites_searchbarClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the collectivites_searchbar model
   */ 
  interface collectivites_searchbarFieldRefs {
    readonly index: FieldRef<"collectivites_searchbar", 'BigInt'>
    readonly code_commune: FieldRef<"collectivites_searchbar", 'String'>
    readonly coordinates: FieldRef<"collectivites_searchbar", 'String'>
    readonly libelle_commune: FieldRef<"collectivites_searchbar", 'String'>
    readonly code_epci: FieldRef<"collectivites_searchbar", 'String'>
    readonly libelle_epci: FieldRef<"collectivites_searchbar", 'String'>
    readonly departement: FieldRef<"collectivites_searchbar", 'String'>
    readonly region: FieldRef<"collectivites_searchbar", 'String'>
    readonly search_code: FieldRef<"collectivites_searchbar", 'String'>
    readonly search_libelle: FieldRef<"collectivites_searchbar", 'String'>
  }
    

  // Custom InputTypes
  /**
   * collectivites_searchbar findUnique
   */
  export type collectivites_searchbarFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the collectivites_searchbar
     */
    select?: collectivites_searchbarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the collectivites_searchbar
     */
    omit?: collectivites_searchbarOmit<ExtArgs> | null
    /**
     * Filter, which collectivites_searchbar to fetch.
     */
    where: collectivites_searchbarWhereUniqueInput
  }

  /**
   * collectivites_searchbar findUniqueOrThrow
   */
  export type collectivites_searchbarFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the collectivites_searchbar
     */
    select?: collectivites_searchbarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the collectivites_searchbar
     */
    omit?: collectivites_searchbarOmit<ExtArgs> | null
    /**
     * Filter, which collectivites_searchbar to fetch.
     */
    where: collectivites_searchbarWhereUniqueInput
  }

  /**
   * collectivites_searchbar findFirst
   */
  export type collectivites_searchbarFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the collectivites_searchbar
     */
    select?: collectivites_searchbarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the collectivites_searchbar
     */
    omit?: collectivites_searchbarOmit<ExtArgs> | null
    /**
     * Filter, which collectivites_searchbar to fetch.
     */
    where?: collectivites_searchbarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of collectivites_searchbars to fetch.
     */
    orderBy?: collectivites_searchbarOrderByWithRelationInput | collectivites_searchbarOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for collectivites_searchbars.
     */
    cursor?: collectivites_searchbarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` collectivites_searchbars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` collectivites_searchbars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of collectivites_searchbars.
     */
    distinct?: Collectivites_searchbarScalarFieldEnum | Collectivites_searchbarScalarFieldEnum[]
  }

  /**
   * collectivites_searchbar findFirstOrThrow
   */
  export type collectivites_searchbarFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the collectivites_searchbar
     */
    select?: collectivites_searchbarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the collectivites_searchbar
     */
    omit?: collectivites_searchbarOmit<ExtArgs> | null
    /**
     * Filter, which collectivites_searchbar to fetch.
     */
    where?: collectivites_searchbarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of collectivites_searchbars to fetch.
     */
    orderBy?: collectivites_searchbarOrderByWithRelationInput | collectivites_searchbarOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for collectivites_searchbars.
     */
    cursor?: collectivites_searchbarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` collectivites_searchbars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` collectivites_searchbars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of collectivites_searchbars.
     */
    distinct?: Collectivites_searchbarScalarFieldEnum | Collectivites_searchbarScalarFieldEnum[]
  }

  /**
   * collectivites_searchbar findMany
   */
  export type collectivites_searchbarFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the collectivites_searchbar
     */
    select?: collectivites_searchbarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the collectivites_searchbar
     */
    omit?: collectivites_searchbarOmit<ExtArgs> | null
    /**
     * Filter, which collectivites_searchbars to fetch.
     */
    where?: collectivites_searchbarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of collectivites_searchbars to fetch.
     */
    orderBy?: collectivites_searchbarOrderByWithRelationInput | collectivites_searchbarOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing collectivites_searchbars.
     */
    cursor?: collectivites_searchbarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` collectivites_searchbars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` collectivites_searchbars.
     */
    skip?: number
    distinct?: Collectivites_searchbarScalarFieldEnum | Collectivites_searchbarScalarFieldEnum[]
  }

  /**
   * collectivites_searchbar create
   */
  export type collectivites_searchbarCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the collectivites_searchbar
     */
    select?: collectivites_searchbarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the collectivites_searchbar
     */
    omit?: collectivites_searchbarOmit<ExtArgs> | null
    /**
     * The data needed to create a collectivites_searchbar.
     */
    data: XOR<collectivites_searchbarCreateInput, collectivites_searchbarUncheckedCreateInput>
  }

  /**
   * collectivites_searchbar createMany
   */
  export type collectivites_searchbarCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many collectivites_searchbars.
     */
    data: collectivites_searchbarCreateManyInput | collectivites_searchbarCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * collectivites_searchbar createManyAndReturn
   */
  export type collectivites_searchbarCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the collectivites_searchbar
     */
    select?: collectivites_searchbarSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the collectivites_searchbar
     */
    omit?: collectivites_searchbarOmit<ExtArgs> | null
    /**
     * The data used to create many collectivites_searchbars.
     */
    data: collectivites_searchbarCreateManyInput | collectivites_searchbarCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * collectivites_searchbar update
   */
  export type collectivites_searchbarUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the collectivites_searchbar
     */
    select?: collectivites_searchbarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the collectivites_searchbar
     */
    omit?: collectivites_searchbarOmit<ExtArgs> | null
    /**
     * The data needed to update a collectivites_searchbar.
     */
    data: XOR<collectivites_searchbarUpdateInput, collectivites_searchbarUncheckedUpdateInput>
    /**
     * Choose, which collectivites_searchbar to update.
     */
    where: collectivites_searchbarWhereUniqueInput
  }

  /**
   * collectivites_searchbar updateMany
   */
  export type collectivites_searchbarUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update collectivites_searchbars.
     */
    data: XOR<collectivites_searchbarUpdateManyMutationInput, collectivites_searchbarUncheckedUpdateManyInput>
    /**
     * Filter which collectivites_searchbars to update
     */
    where?: collectivites_searchbarWhereInput
    /**
     * Limit how many collectivites_searchbars to update.
     */
    limit?: number
  }

  /**
   * collectivites_searchbar updateManyAndReturn
   */
  export type collectivites_searchbarUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the collectivites_searchbar
     */
    select?: collectivites_searchbarSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the collectivites_searchbar
     */
    omit?: collectivites_searchbarOmit<ExtArgs> | null
    /**
     * The data used to update collectivites_searchbars.
     */
    data: XOR<collectivites_searchbarUpdateManyMutationInput, collectivites_searchbarUncheckedUpdateManyInput>
    /**
     * Filter which collectivites_searchbars to update
     */
    where?: collectivites_searchbarWhereInput
    /**
     * Limit how many collectivites_searchbars to update.
     */
    limit?: number
  }

  /**
   * collectivites_searchbar upsert
   */
  export type collectivites_searchbarUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the collectivites_searchbar
     */
    select?: collectivites_searchbarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the collectivites_searchbar
     */
    omit?: collectivites_searchbarOmit<ExtArgs> | null
    /**
     * The filter to search for the collectivites_searchbar to update in case it exists.
     */
    where: collectivites_searchbarWhereUniqueInput
    /**
     * In case the collectivites_searchbar found by the `where` argument doesn't exist, create a new collectivites_searchbar with this data.
     */
    create: XOR<collectivites_searchbarCreateInput, collectivites_searchbarUncheckedCreateInput>
    /**
     * In case the collectivites_searchbar was found with the provided `where` argument, update it with this data.
     */
    update: XOR<collectivites_searchbarUpdateInput, collectivites_searchbarUncheckedUpdateInput>
  }

  /**
   * collectivites_searchbar delete
   */
  export type collectivites_searchbarDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the collectivites_searchbar
     */
    select?: collectivites_searchbarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the collectivites_searchbar
     */
    omit?: collectivites_searchbarOmit<ExtArgs> | null
    /**
     * Filter which collectivites_searchbar to delete.
     */
    where: collectivites_searchbarWhereUniqueInput
  }

  /**
   * collectivites_searchbar deleteMany
   */
  export type collectivites_searchbarDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which collectivites_searchbars to delete
     */
    where?: collectivites_searchbarWhereInput
    /**
     * Limit how many collectivites_searchbars to delete.
     */
    limit?: number
  }

  /**
   * collectivites_searchbar without action
   */
  export type collectivites_searchbarDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the collectivites_searchbar
     */
    select?: collectivites_searchbarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the collectivites_searchbar
     */
    omit?: collectivites_searchbarOmit<ExtArgs> | null
  }


  /**
   * Model biodiversite
   */

  export type AggregateBiodiversite = {
    _count: BiodiversiteCountAggregateOutputType | null
    _avg: BiodiversiteAvgAggregateOutputType | null
    _sum: BiodiversiteSumAggregateOutputType | null
    _min: BiodiversiteMinAggregateOutputType | null
    _max: BiodiversiteMaxAggregateOutputType | null
  }

  export type BiodiversiteAvgAggregateOutputType = {
    index: number | null
    region: number | null
  }

  export type BiodiversiteSumAggregateOutputType = {
    index: bigint | null
    region: number | null
  }

  export type BiodiversiteMinAggregateOutputType = {
    index: bigint | null
    code_geographique: string | null
    type_touristique: string | null
    libelle_geographique: string | null
    epci: string | null
    libelle_epci: string | null
    departement: string | null
    region: number | null
  }

  export type BiodiversiteMaxAggregateOutputType = {
    index: bigint | null
    code_geographique: string | null
    type_touristique: string | null
    libelle_geographique: string | null
    epci: string | null
    libelle_epci: string | null
    departement: string | null
    region: number | null
  }

  export type BiodiversiteCountAggregateOutputType = {
    index: number
    code_geographique: number
    type_touristique: number
    libelle_geographique: number
    epci: number
    libelle_epci: number
    departement: number
    region: number
    _all: number
  }


  export type BiodiversiteAvgAggregateInputType = {
    index?: true
    region?: true
  }

  export type BiodiversiteSumAggregateInputType = {
    index?: true
    region?: true
  }

  export type BiodiversiteMinAggregateInputType = {
    index?: true
    code_geographique?: true
    type_touristique?: true
    libelle_geographique?: true
    epci?: true
    libelle_epci?: true
    departement?: true
    region?: true
  }

  export type BiodiversiteMaxAggregateInputType = {
    index?: true
    code_geographique?: true
    type_touristique?: true
    libelle_geographique?: true
    epci?: true
    libelle_epci?: true
    departement?: true
    region?: true
  }

  export type BiodiversiteCountAggregateInputType = {
    index?: true
    code_geographique?: true
    type_touristique?: true
    libelle_geographique?: true
    epci?: true
    libelle_epci?: true
    departement?: true
    region?: true
    _all?: true
  }

  export type BiodiversiteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which biodiversite to aggregate.
     */
    where?: biodiversiteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of biodiversites to fetch.
     */
    orderBy?: biodiversiteOrderByWithRelationInput | biodiversiteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: biodiversiteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` biodiversites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` biodiversites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned biodiversites
    **/
    _count?: true | BiodiversiteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BiodiversiteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BiodiversiteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BiodiversiteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BiodiversiteMaxAggregateInputType
  }

  export type GetBiodiversiteAggregateType<T extends BiodiversiteAggregateArgs> = {
        [P in keyof T & keyof AggregateBiodiversite]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBiodiversite[P]>
      : GetScalarType<T[P], AggregateBiodiversite[P]>
  }




  export type biodiversiteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: biodiversiteWhereInput
    orderBy?: biodiversiteOrderByWithAggregationInput | biodiversiteOrderByWithAggregationInput[]
    by: BiodiversiteScalarFieldEnum[] | BiodiversiteScalarFieldEnum
    having?: biodiversiteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BiodiversiteCountAggregateInputType | true
    _avg?: BiodiversiteAvgAggregateInputType
    _sum?: BiodiversiteSumAggregateInputType
    _min?: BiodiversiteMinAggregateInputType
    _max?: BiodiversiteMaxAggregateInputType
  }

  export type BiodiversiteGroupByOutputType = {
    index: bigint
    code_geographique: string | null
    type_touristique: string | null
    libelle_geographique: string | null
    epci: string | null
    libelle_epci: string | null
    departement: string | null
    region: number | null
    _count: BiodiversiteCountAggregateOutputType | null
    _avg: BiodiversiteAvgAggregateOutputType | null
    _sum: BiodiversiteSumAggregateOutputType | null
    _min: BiodiversiteMinAggregateOutputType | null
    _max: BiodiversiteMaxAggregateOutputType | null
  }

  type GetBiodiversiteGroupByPayload<T extends biodiversiteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BiodiversiteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BiodiversiteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BiodiversiteGroupByOutputType[P]>
            : GetScalarType<T[P], BiodiversiteGroupByOutputType[P]>
        }
      >
    >


  export type biodiversiteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    index?: boolean
    code_geographique?: boolean
    type_touristique?: boolean
    libelle_geographique?: boolean
    epci?: boolean
    libelle_epci?: boolean
    departement?: boolean
    region?: boolean
  }, ExtArgs["result"]["biodiversite"]>

  export type biodiversiteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    index?: boolean
    code_geographique?: boolean
    type_touristique?: boolean
    libelle_geographique?: boolean
    epci?: boolean
    libelle_epci?: boolean
    departement?: boolean
    region?: boolean
  }, ExtArgs["result"]["biodiversite"]>

  export type biodiversiteSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    index?: boolean
    code_geographique?: boolean
    type_touristique?: boolean
    libelle_geographique?: boolean
    epci?: boolean
    libelle_epci?: boolean
    departement?: boolean
    region?: boolean
  }, ExtArgs["result"]["biodiversite"]>

  export type biodiversiteSelectScalar = {
    index?: boolean
    code_geographique?: boolean
    type_touristique?: boolean
    libelle_geographique?: boolean
    epci?: boolean
    libelle_epci?: boolean
    departement?: boolean
    region?: boolean
  }

  export type biodiversiteOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"index" | "code_geographique" | "type_touristique" | "libelle_geographique" | "epci" | "libelle_epci" | "departement" | "region", ExtArgs["result"]["biodiversite"]>

  export type $biodiversitePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "biodiversite"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      index: bigint
      code_geographique: string | null
      type_touristique: string | null
      libelle_geographique: string | null
      epci: string | null
      libelle_epci: string | null
      departement: string | null
      region: number | null
    }, ExtArgs["result"]["biodiversite"]>
    composites: {}
  }

  type biodiversiteGetPayload<S extends boolean | null | undefined | biodiversiteDefaultArgs> = $Result.GetResult<Prisma.$biodiversitePayload, S>

  type biodiversiteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<biodiversiteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BiodiversiteCountAggregateInputType | true
    }

  export interface biodiversiteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['biodiversite'], meta: { name: 'biodiversite' } }
    /**
     * Find zero or one Biodiversite that matches the filter.
     * @param {biodiversiteFindUniqueArgs} args - Arguments to find a Biodiversite
     * @example
     * // Get one Biodiversite
     * const biodiversite = await prisma.biodiversite.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends biodiversiteFindUniqueArgs>(args: SelectSubset<T, biodiversiteFindUniqueArgs<ExtArgs>>): Prisma__biodiversiteClient<$Result.GetResult<Prisma.$biodiversitePayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Biodiversite that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {biodiversiteFindUniqueOrThrowArgs} args - Arguments to find a Biodiversite
     * @example
     * // Get one Biodiversite
     * const biodiversite = await prisma.biodiversite.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends biodiversiteFindUniqueOrThrowArgs>(args: SelectSubset<T, biodiversiteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__biodiversiteClient<$Result.GetResult<Prisma.$biodiversitePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Biodiversite that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {biodiversiteFindFirstArgs} args - Arguments to find a Biodiversite
     * @example
     * // Get one Biodiversite
     * const biodiversite = await prisma.biodiversite.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends biodiversiteFindFirstArgs>(args?: SelectSubset<T, biodiversiteFindFirstArgs<ExtArgs>>): Prisma__biodiversiteClient<$Result.GetResult<Prisma.$biodiversitePayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Biodiversite that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {biodiversiteFindFirstOrThrowArgs} args - Arguments to find a Biodiversite
     * @example
     * // Get one Biodiversite
     * const biodiversite = await prisma.biodiversite.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends biodiversiteFindFirstOrThrowArgs>(args?: SelectSubset<T, biodiversiteFindFirstOrThrowArgs<ExtArgs>>): Prisma__biodiversiteClient<$Result.GetResult<Prisma.$biodiversitePayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Biodiversites that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {biodiversiteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Biodiversites
     * const biodiversites = await prisma.biodiversite.findMany()
     * 
     * // Get first 10 Biodiversites
     * const biodiversites = await prisma.biodiversite.findMany({ take: 10 })
     * 
     * // Only select the `index`
     * const biodiversiteWithIndexOnly = await prisma.biodiversite.findMany({ select: { index: true } })
     * 
     */
    findMany<T extends biodiversiteFindManyArgs>(args?: SelectSubset<T, biodiversiteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$biodiversitePayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Biodiversite.
     * @param {biodiversiteCreateArgs} args - Arguments to create a Biodiversite.
     * @example
     * // Create one Biodiversite
     * const Biodiversite = await prisma.biodiversite.create({
     *   data: {
     *     // ... data to create a Biodiversite
     *   }
     * })
     * 
     */
    create<T extends biodiversiteCreateArgs>(args: SelectSubset<T, biodiversiteCreateArgs<ExtArgs>>): Prisma__biodiversiteClient<$Result.GetResult<Prisma.$biodiversitePayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Biodiversites.
     * @param {biodiversiteCreateManyArgs} args - Arguments to create many Biodiversites.
     * @example
     * // Create many Biodiversites
     * const biodiversite = await prisma.biodiversite.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends biodiversiteCreateManyArgs>(args?: SelectSubset<T, biodiversiteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Biodiversites and returns the data saved in the database.
     * @param {biodiversiteCreateManyAndReturnArgs} args - Arguments to create many Biodiversites.
     * @example
     * // Create many Biodiversites
     * const biodiversite = await prisma.biodiversite.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Biodiversites and only return the `index`
     * const biodiversiteWithIndexOnly = await prisma.biodiversite.createManyAndReturn({
     *   select: { index: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends biodiversiteCreateManyAndReturnArgs>(args?: SelectSubset<T, biodiversiteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$biodiversitePayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Biodiversite.
     * @param {biodiversiteDeleteArgs} args - Arguments to delete one Biodiversite.
     * @example
     * // Delete one Biodiversite
     * const Biodiversite = await prisma.biodiversite.delete({
     *   where: {
     *     // ... filter to delete one Biodiversite
     *   }
     * })
     * 
     */
    delete<T extends biodiversiteDeleteArgs>(args: SelectSubset<T, biodiversiteDeleteArgs<ExtArgs>>): Prisma__biodiversiteClient<$Result.GetResult<Prisma.$biodiversitePayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Biodiversite.
     * @param {biodiversiteUpdateArgs} args - Arguments to update one Biodiversite.
     * @example
     * // Update one Biodiversite
     * const biodiversite = await prisma.biodiversite.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends biodiversiteUpdateArgs>(args: SelectSubset<T, biodiversiteUpdateArgs<ExtArgs>>): Prisma__biodiversiteClient<$Result.GetResult<Prisma.$biodiversitePayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Biodiversites.
     * @param {biodiversiteDeleteManyArgs} args - Arguments to filter Biodiversites to delete.
     * @example
     * // Delete a few Biodiversites
     * const { count } = await prisma.biodiversite.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends biodiversiteDeleteManyArgs>(args?: SelectSubset<T, biodiversiteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Biodiversites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {biodiversiteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Biodiversites
     * const biodiversite = await prisma.biodiversite.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends biodiversiteUpdateManyArgs>(args: SelectSubset<T, biodiversiteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Biodiversites and returns the data updated in the database.
     * @param {biodiversiteUpdateManyAndReturnArgs} args - Arguments to update many Biodiversites.
     * @example
     * // Update many Biodiversites
     * const biodiversite = await prisma.biodiversite.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Biodiversites and only return the `index`
     * const biodiversiteWithIndexOnly = await prisma.biodiversite.updateManyAndReturn({
     *   select: { index: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends biodiversiteUpdateManyAndReturnArgs>(args: SelectSubset<T, biodiversiteUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$biodiversitePayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Biodiversite.
     * @param {biodiversiteUpsertArgs} args - Arguments to update or create a Biodiversite.
     * @example
     * // Update or create a Biodiversite
     * const biodiversite = await prisma.biodiversite.upsert({
     *   create: {
     *     // ... data to create a Biodiversite
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Biodiversite we want to update
     *   }
     * })
     */
    upsert<T extends biodiversiteUpsertArgs>(args: SelectSubset<T, biodiversiteUpsertArgs<ExtArgs>>): Prisma__biodiversiteClient<$Result.GetResult<Prisma.$biodiversitePayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Biodiversites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {biodiversiteCountArgs} args - Arguments to filter Biodiversites to count.
     * @example
     * // Count the number of Biodiversites
     * const count = await prisma.biodiversite.count({
     *   where: {
     *     // ... the filter for the Biodiversites we want to count
     *   }
     * })
    **/
    count<T extends biodiversiteCountArgs>(
      args?: Subset<T, biodiversiteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BiodiversiteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Biodiversite.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BiodiversiteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BiodiversiteAggregateArgs>(args: Subset<T, BiodiversiteAggregateArgs>): Prisma.PrismaPromise<GetBiodiversiteAggregateType<T>>

    /**
     * Group by Biodiversite.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {biodiversiteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends biodiversiteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: biodiversiteGroupByArgs['orderBy'] }
        : { orderBy?: biodiversiteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, biodiversiteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBiodiversiteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the biodiversite model
   */
  readonly fields: biodiversiteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for biodiversite.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__biodiversiteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the biodiversite model
   */ 
  interface biodiversiteFieldRefs {
    readonly index: FieldRef<"biodiversite", 'BigInt'>
    readonly code_geographique: FieldRef<"biodiversite", 'String'>
    readonly type_touristique: FieldRef<"biodiversite", 'String'>
    readonly libelle_geographique: FieldRef<"biodiversite", 'String'>
    readonly epci: FieldRef<"biodiversite", 'String'>
    readonly libelle_epci: FieldRef<"biodiversite", 'String'>
    readonly departement: FieldRef<"biodiversite", 'String'>
    readonly region: FieldRef<"biodiversite", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * biodiversite findUnique
   */
  export type biodiversiteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the biodiversite
     */
    select?: biodiversiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the biodiversite
     */
    omit?: biodiversiteOmit<ExtArgs> | null
    /**
     * Filter, which biodiversite to fetch.
     */
    where: biodiversiteWhereUniqueInput
  }

  /**
   * biodiversite findUniqueOrThrow
   */
  export type biodiversiteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the biodiversite
     */
    select?: biodiversiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the biodiversite
     */
    omit?: biodiversiteOmit<ExtArgs> | null
    /**
     * Filter, which biodiversite to fetch.
     */
    where: biodiversiteWhereUniqueInput
  }

  /**
   * biodiversite findFirst
   */
  export type biodiversiteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the biodiversite
     */
    select?: biodiversiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the biodiversite
     */
    omit?: biodiversiteOmit<ExtArgs> | null
    /**
     * Filter, which biodiversite to fetch.
     */
    where?: biodiversiteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of biodiversites to fetch.
     */
    orderBy?: biodiversiteOrderByWithRelationInput | biodiversiteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for biodiversites.
     */
    cursor?: biodiversiteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` biodiversites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` biodiversites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of biodiversites.
     */
    distinct?: BiodiversiteScalarFieldEnum | BiodiversiteScalarFieldEnum[]
  }

  /**
   * biodiversite findFirstOrThrow
   */
  export type biodiversiteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the biodiversite
     */
    select?: biodiversiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the biodiversite
     */
    omit?: biodiversiteOmit<ExtArgs> | null
    /**
     * Filter, which biodiversite to fetch.
     */
    where?: biodiversiteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of biodiversites to fetch.
     */
    orderBy?: biodiversiteOrderByWithRelationInput | biodiversiteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for biodiversites.
     */
    cursor?: biodiversiteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` biodiversites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` biodiversites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of biodiversites.
     */
    distinct?: BiodiversiteScalarFieldEnum | BiodiversiteScalarFieldEnum[]
  }

  /**
   * biodiversite findMany
   */
  export type biodiversiteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the biodiversite
     */
    select?: biodiversiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the biodiversite
     */
    omit?: biodiversiteOmit<ExtArgs> | null
    /**
     * Filter, which biodiversites to fetch.
     */
    where?: biodiversiteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of biodiversites to fetch.
     */
    orderBy?: biodiversiteOrderByWithRelationInput | biodiversiteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing biodiversites.
     */
    cursor?: biodiversiteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` biodiversites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` biodiversites.
     */
    skip?: number
    distinct?: BiodiversiteScalarFieldEnum | BiodiversiteScalarFieldEnum[]
  }

  /**
   * biodiversite create
   */
  export type biodiversiteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the biodiversite
     */
    select?: biodiversiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the biodiversite
     */
    omit?: biodiversiteOmit<ExtArgs> | null
    /**
     * The data needed to create a biodiversite.
     */
    data: XOR<biodiversiteCreateInput, biodiversiteUncheckedCreateInput>
  }

  /**
   * biodiversite createMany
   */
  export type biodiversiteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many biodiversites.
     */
    data: biodiversiteCreateManyInput | biodiversiteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * biodiversite createManyAndReturn
   */
  export type biodiversiteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the biodiversite
     */
    select?: biodiversiteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the biodiversite
     */
    omit?: biodiversiteOmit<ExtArgs> | null
    /**
     * The data used to create many biodiversites.
     */
    data: biodiversiteCreateManyInput | biodiversiteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * biodiversite update
   */
  export type biodiversiteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the biodiversite
     */
    select?: biodiversiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the biodiversite
     */
    omit?: biodiversiteOmit<ExtArgs> | null
    /**
     * The data needed to update a biodiversite.
     */
    data: XOR<biodiversiteUpdateInput, biodiversiteUncheckedUpdateInput>
    /**
     * Choose, which biodiversite to update.
     */
    where: biodiversiteWhereUniqueInput
  }

  /**
   * biodiversite updateMany
   */
  export type biodiversiteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update biodiversites.
     */
    data: XOR<biodiversiteUpdateManyMutationInput, biodiversiteUncheckedUpdateManyInput>
    /**
     * Filter which biodiversites to update
     */
    where?: biodiversiteWhereInput
    /**
     * Limit how many biodiversites to update.
     */
    limit?: number
  }

  /**
   * biodiversite updateManyAndReturn
   */
  export type biodiversiteUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the biodiversite
     */
    select?: biodiversiteSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the biodiversite
     */
    omit?: biodiversiteOmit<ExtArgs> | null
    /**
     * The data used to update biodiversites.
     */
    data: XOR<biodiversiteUpdateManyMutationInput, biodiversiteUncheckedUpdateManyInput>
    /**
     * Filter which biodiversites to update
     */
    where?: biodiversiteWhereInput
    /**
     * Limit how many biodiversites to update.
     */
    limit?: number
  }

  /**
   * biodiversite upsert
   */
  export type biodiversiteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the biodiversite
     */
    select?: biodiversiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the biodiversite
     */
    omit?: biodiversiteOmit<ExtArgs> | null
    /**
     * The filter to search for the biodiversite to update in case it exists.
     */
    where: biodiversiteWhereUniqueInput
    /**
     * In case the biodiversite found by the `where` argument doesn't exist, create a new biodiversite with this data.
     */
    create: XOR<biodiversiteCreateInput, biodiversiteUncheckedCreateInput>
    /**
     * In case the biodiversite was found with the provided `where` argument, update it with this data.
     */
    update: XOR<biodiversiteUpdateInput, biodiversiteUncheckedUpdateInput>
  }

  /**
   * biodiversite delete
   */
  export type biodiversiteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the biodiversite
     */
    select?: biodiversiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the biodiversite
     */
    omit?: biodiversiteOmit<ExtArgs> | null
    /**
     * Filter which biodiversite to delete.
     */
    where: biodiversiteWhereUniqueInput
  }

  /**
   * biodiversite deleteMany
   */
  export type biodiversiteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which biodiversites to delete
     */
    where?: biodiversiteWhereInput
    /**
     * Limit how many biodiversites to delete.
     */
    limit?: number
  }

  /**
   * biodiversite without action
   */
  export type biodiversiteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the biodiversite
     */
    select?: biodiversiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the biodiversite
     */
    omit?: biodiversiteOmit<ExtArgs> | null
  }


  /**
   * Model gestion_risques
   */

  export type AggregateGestion_risques = {
    _count: Gestion_risquesCountAggregateOutputType | null
    _avg: Gestion_risquesAvgAggregateOutputType | null
    _sum: Gestion_risquesSumAggregateOutputType | null
    _min: Gestion_risquesMinAggregateOutputType | null
    _max: Gestion_risquesMaxAggregateOutputType | null
  }

  export type Gestion_risquesAvgAggregateOutputType = {
    index: number | null
    region: number | null
  }

  export type Gestion_risquesSumAggregateOutputType = {
    index: bigint | null
    region: number | null
  }

  export type Gestion_risquesMinAggregateOutputType = {
    index: bigint | null
    code_geographique: string | null
    lib_risque_jo: string | null
    dat_pub_arrete: string | null
    libelle_geographique: string | null
    epci: string | null
    libelle_epci: string | null
    departement: string | null
    region: number | null
  }

  export type Gestion_risquesMaxAggregateOutputType = {
    index: bigint | null
    code_geographique: string | null
    lib_risque_jo: string | null
    dat_pub_arrete: string | null
    libelle_geographique: string | null
    epci: string | null
    libelle_epci: string | null
    departement: string | null
    region: number | null
  }

  export type Gestion_risquesCountAggregateOutputType = {
    index: number
    code_geographique: number
    lib_risque_jo: number
    dat_pub_arrete: number
    libelle_geographique: number
    epci: number
    libelle_epci: number
    departement: number
    region: number
    _all: number
  }


  export type Gestion_risquesAvgAggregateInputType = {
    index?: true
    region?: true
  }

  export type Gestion_risquesSumAggregateInputType = {
    index?: true
    region?: true
  }

  export type Gestion_risquesMinAggregateInputType = {
    index?: true
    code_geographique?: true
    lib_risque_jo?: true
    dat_pub_arrete?: true
    libelle_geographique?: true
    epci?: true
    libelle_epci?: true
    departement?: true
    region?: true
  }

  export type Gestion_risquesMaxAggregateInputType = {
    index?: true
    code_geographique?: true
    lib_risque_jo?: true
    dat_pub_arrete?: true
    libelle_geographique?: true
    epci?: true
    libelle_epci?: true
    departement?: true
    region?: true
  }

  export type Gestion_risquesCountAggregateInputType = {
    index?: true
    code_geographique?: true
    lib_risque_jo?: true
    dat_pub_arrete?: true
    libelle_geographique?: true
    epci?: true
    libelle_epci?: true
    departement?: true
    region?: true
    _all?: true
  }

  export type Gestion_risquesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which gestion_risques to aggregate.
     */
    where?: gestion_risquesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of gestion_risques to fetch.
     */
    orderBy?: gestion_risquesOrderByWithRelationInput | gestion_risquesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: gestion_risquesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` gestion_risques from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` gestion_risques.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned gestion_risques
    **/
    _count?: true | Gestion_risquesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Gestion_risquesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Gestion_risquesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Gestion_risquesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Gestion_risquesMaxAggregateInputType
  }

  export type GetGestion_risquesAggregateType<T extends Gestion_risquesAggregateArgs> = {
        [P in keyof T & keyof AggregateGestion_risques]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGestion_risques[P]>
      : GetScalarType<T[P], AggregateGestion_risques[P]>
  }




  export type gestion_risquesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: gestion_risquesWhereInput
    orderBy?: gestion_risquesOrderByWithAggregationInput | gestion_risquesOrderByWithAggregationInput[]
    by: Gestion_risquesScalarFieldEnum[] | Gestion_risquesScalarFieldEnum
    having?: gestion_risquesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Gestion_risquesCountAggregateInputType | true
    _avg?: Gestion_risquesAvgAggregateInputType
    _sum?: Gestion_risquesSumAggregateInputType
    _min?: Gestion_risquesMinAggregateInputType
    _max?: Gestion_risquesMaxAggregateInputType
  }

  export type Gestion_risquesGroupByOutputType = {
    index: bigint
    code_geographique: string | null
    lib_risque_jo: string | null
    dat_pub_arrete: string | null
    libelle_geographique: string | null
    epci: string | null
    libelle_epci: string | null
    departement: string | null
    region: number | null
    _count: Gestion_risquesCountAggregateOutputType | null
    _avg: Gestion_risquesAvgAggregateOutputType | null
    _sum: Gestion_risquesSumAggregateOutputType | null
    _min: Gestion_risquesMinAggregateOutputType | null
    _max: Gestion_risquesMaxAggregateOutputType | null
  }

  type GetGestion_risquesGroupByPayload<T extends gestion_risquesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Gestion_risquesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Gestion_risquesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Gestion_risquesGroupByOutputType[P]>
            : GetScalarType<T[P], Gestion_risquesGroupByOutputType[P]>
        }
      >
    >


  export type gestion_risquesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    index?: boolean
    code_geographique?: boolean
    lib_risque_jo?: boolean
    dat_pub_arrete?: boolean
    libelle_geographique?: boolean
    epci?: boolean
    libelle_epci?: boolean
    departement?: boolean
    region?: boolean
  }, ExtArgs["result"]["gestion_risques"]>

  export type gestion_risquesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    index?: boolean
    code_geographique?: boolean
    lib_risque_jo?: boolean
    dat_pub_arrete?: boolean
    libelle_geographique?: boolean
    epci?: boolean
    libelle_epci?: boolean
    departement?: boolean
    region?: boolean
  }, ExtArgs["result"]["gestion_risques"]>

  export type gestion_risquesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    index?: boolean
    code_geographique?: boolean
    lib_risque_jo?: boolean
    dat_pub_arrete?: boolean
    libelle_geographique?: boolean
    epci?: boolean
    libelle_epci?: boolean
    departement?: boolean
    region?: boolean
  }, ExtArgs["result"]["gestion_risques"]>

  export type gestion_risquesSelectScalar = {
    index?: boolean
    code_geographique?: boolean
    lib_risque_jo?: boolean
    dat_pub_arrete?: boolean
    libelle_geographique?: boolean
    epci?: boolean
    libelle_epci?: boolean
    departement?: boolean
    region?: boolean
  }

  export type gestion_risquesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"index" | "code_geographique" | "lib_risque_jo" | "dat_pub_arrete" | "libelle_geographique" | "epci" | "libelle_epci" | "departement" | "region", ExtArgs["result"]["gestion_risques"]>

  export type $gestion_risquesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "gestion_risques"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      index: bigint
      code_geographique: string | null
      lib_risque_jo: string | null
      dat_pub_arrete: string | null
      libelle_geographique: string | null
      epci: string | null
      libelle_epci: string | null
      departement: string | null
      region: number | null
    }, ExtArgs["result"]["gestion_risques"]>
    composites: {}
  }

  type gestion_risquesGetPayload<S extends boolean | null | undefined | gestion_risquesDefaultArgs> = $Result.GetResult<Prisma.$gestion_risquesPayload, S>

  type gestion_risquesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<gestion_risquesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Gestion_risquesCountAggregateInputType | true
    }

  export interface gestion_risquesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['gestion_risques'], meta: { name: 'gestion_risques' } }
    /**
     * Find zero or one Gestion_risques that matches the filter.
     * @param {gestion_risquesFindUniqueArgs} args - Arguments to find a Gestion_risques
     * @example
     * // Get one Gestion_risques
     * const gestion_risques = await prisma.gestion_risques.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends gestion_risquesFindUniqueArgs>(args: SelectSubset<T, gestion_risquesFindUniqueArgs<ExtArgs>>): Prisma__gestion_risquesClient<$Result.GetResult<Prisma.$gestion_risquesPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Gestion_risques that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {gestion_risquesFindUniqueOrThrowArgs} args - Arguments to find a Gestion_risques
     * @example
     * // Get one Gestion_risques
     * const gestion_risques = await prisma.gestion_risques.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends gestion_risquesFindUniqueOrThrowArgs>(args: SelectSubset<T, gestion_risquesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__gestion_risquesClient<$Result.GetResult<Prisma.$gestion_risquesPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Gestion_risques that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {gestion_risquesFindFirstArgs} args - Arguments to find a Gestion_risques
     * @example
     * // Get one Gestion_risques
     * const gestion_risques = await prisma.gestion_risques.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends gestion_risquesFindFirstArgs>(args?: SelectSubset<T, gestion_risquesFindFirstArgs<ExtArgs>>): Prisma__gestion_risquesClient<$Result.GetResult<Prisma.$gestion_risquesPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Gestion_risques that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {gestion_risquesFindFirstOrThrowArgs} args - Arguments to find a Gestion_risques
     * @example
     * // Get one Gestion_risques
     * const gestion_risques = await prisma.gestion_risques.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends gestion_risquesFindFirstOrThrowArgs>(args?: SelectSubset<T, gestion_risquesFindFirstOrThrowArgs<ExtArgs>>): Prisma__gestion_risquesClient<$Result.GetResult<Prisma.$gestion_risquesPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Gestion_risques that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {gestion_risquesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Gestion_risques
     * const gestion_risques = await prisma.gestion_risques.findMany()
     * 
     * // Get first 10 Gestion_risques
     * const gestion_risques = await prisma.gestion_risques.findMany({ take: 10 })
     * 
     * // Only select the `index`
     * const gestion_risquesWithIndexOnly = await prisma.gestion_risques.findMany({ select: { index: true } })
     * 
     */
    findMany<T extends gestion_risquesFindManyArgs>(args?: SelectSubset<T, gestion_risquesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$gestion_risquesPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Gestion_risques.
     * @param {gestion_risquesCreateArgs} args - Arguments to create a Gestion_risques.
     * @example
     * // Create one Gestion_risques
     * const Gestion_risques = await prisma.gestion_risques.create({
     *   data: {
     *     // ... data to create a Gestion_risques
     *   }
     * })
     * 
     */
    create<T extends gestion_risquesCreateArgs>(args: SelectSubset<T, gestion_risquesCreateArgs<ExtArgs>>): Prisma__gestion_risquesClient<$Result.GetResult<Prisma.$gestion_risquesPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Gestion_risques.
     * @param {gestion_risquesCreateManyArgs} args - Arguments to create many Gestion_risques.
     * @example
     * // Create many Gestion_risques
     * const gestion_risques = await prisma.gestion_risques.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends gestion_risquesCreateManyArgs>(args?: SelectSubset<T, gestion_risquesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Gestion_risques and returns the data saved in the database.
     * @param {gestion_risquesCreateManyAndReturnArgs} args - Arguments to create many Gestion_risques.
     * @example
     * // Create many Gestion_risques
     * const gestion_risques = await prisma.gestion_risques.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Gestion_risques and only return the `index`
     * const gestion_risquesWithIndexOnly = await prisma.gestion_risques.createManyAndReturn({
     *   select: { index: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends gestion_risquesCreateManyAndReturnArgs>(args?: SelectSubset<T, gestion_risquesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$gestion_risquesPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Gestion_risques.
     * @param {gestion_risquesDeleteArgs} args - Arguments to delete one Gestion_risques.
     * @example
     * // Delete one Gestion_risques
     * const Gestion_risques = await prisma.gestion_risques.delete({
     *   where: {
     *     // ... filter to delete one Gestion_risques
     *   }
     * })
     * 
     */
    delete<T extends gestion_risquesDeleteArgs>(args: SelectSubset<T, gestion_risquesDeleteArgs<ExtArgs>>): Prisma__gestion_risquesClient<$Result.GetResult<Prisma.$gestion_risquesPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Gestion_risques.
     * @param {gestion_risquesUpdateArgs} args - Arguments to update one Gestion_risques.
     * @example
     * // Update one Gestion_risques
     * const gestion_risques = await prisma.gestion_risques.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends gestion_risquesUpdateArgs>(args: SelectSubset<T, gestion_risquesUpdateArgs<ExtArgs>>): Prisma__gestion_risquesClient<$Result.GetResult<Prisma.$gestion_risquesPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Gestion_risques.
     * @param {gestion_risquesDeleteManyArgs} args - Arguments to filter Gestion_risques to delete.
     * @example
     * // Delete a few Gestion_risques
     * const { count } = await prisma.gestion_risques.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends gestion_risquesDeleteManyArgs>(args?: SelectSubset<T, gestion_risquesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Gestion_risques.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {gestion_risquesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Gestion_risques
     * const gestion_risques = await prisma.gestion_risques.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends gestion_risquesUpdateManyArgs>(args: SelectSubset<T, gestion_risquesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Gestion_risques and returns the data updated in the database.
     * @param {gestion_risquesUpdateManyAndReturnArgs} args - Arguments to update many Gestion_risques.
     * @example
     * // Update many Gestion_risques
     * const gestion_risques = await prisma.gestion_risques.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Gestion_risques and only return the `index`
     * const gestion_risquesWithIndexOnly = await prisma.gestion_risques.updateManyAndReturn({
     *   select: { index: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends gestion_risquesUpdateManyAndReturnArgs>(args: SelectSubset<T, gestion_risquesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$gestion_risquesPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Gestion_risques.
     * @param {gestion_risquesUpsertArgs} args - Arguments to update or create a Gestion_risques.
     * @example
     * // Update or create a Gestion_risques
     * const gestion_risques = await prisma.gestion_risques.upsert({
     *   create: {
     *     // ... data to create a Gestion_risques
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Gestion_risques we want to update
     *   }
     * })
     */
    upsert<T extends gestion_risquesUpsertArgs>(args: SelectSubset<T, gestion_risquesUpsertArgs<ExtArgs>>): Prisma__gestion_risquesClient<$Result.GetResult<Prisma.$gestion_risquesPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Gestion_risques.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {gestion_risquesCountArgs} args - Arguments to filter Gestion_risques to count.
     * @example
     * // Count the number of Gestion_risques
     * const count = await prisma.gestion_risques.count({
     *   where: {
     *     // ... the filter for the Gestion_risques we want to count
     *   }
     * })
    **/
    count<T extends gestion_risquesCountArgs>(
      args?: Subset<T, gestion_risquesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Gestion_risquesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Gestion_risques.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Gestion_risquesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Gestion_risquesAggregateArgs>(args: Subset<T, Gestion_risquesAggregateArgs>): Prisma.PrismaPromise<GetGestion_risquesAggregateType<T>>

    /**
     * Group by Gestion_risques.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {gestion_risquesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends gestion_risquesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: gestion_risquesGroupByArgs['orderBy'] }
        : { orderBy?: gestion_risquesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, gestion_risquesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGestion_risquesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the gestion_risques model
   */
  readonly fields: gestion_risquesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for gestion_risques.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__gestion_risquesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the gestion_risques model
   */ 
  interface gestion_risquesFieldRefs {
    readonly index: FieldRef<"gestion_risques", 'BigInt'>
    readonly code_geographique: FieldRef<"gestion_risques", 'String'>
    readonly lib_risque_jo: FieldRef<"gestion_risques", 'String'>
    readonly dat_pub_arrete: FieldRef<"gestion_risques", 'String'>
    readonly libelle_geographique: FieldRef<"gestion_risques", 'String'>
    readonly epci: FieldRef<"gestion_risques", 'String'>
    readonly libelle_epci: FieldRef<"gestion_risques", 'String'>
    readonly departement: FieldRef<"gestion_risques", 'String'>
    readonly region: FieldRef<"gestion_risques", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * gestion_risques findUnique
   */
  export type gestion_risquesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gestion_risques
     */
    select?: gestion_risquesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the gestion_risques
     */
    omit?: gestion_risquesOmit<ExtArgs> | null
    /**
     * Filter, which gestion_risques to fetch.
     */
    where: gestion_risquesWhereUniqueInput
  }

  /**
   * gestion_risques findUniqueOrThrow
   */
  export type gestion_risquesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gestion_risques
     */
    select?: gestion_risquesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the gestion_risques
     */
    omit?: gestion_risquesOmit<ExtArgs> | null
    /**
     * Filter, which gestion_risques to fetch.
     */
    where: gestion_risquesWhereUniqueInput
  }

  /**
   * gestion_risques findFirst
   */
  export type gestion_risquesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gestion_risques
     */
    select?: gestion_risquesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the gestion_risques
     */
    omit?: gestion_risquesOmit<ExtArgs> | null
    /**
     * Filter, which gestion_risques to fetch.
     */
    where?: gestion_risquesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of gestion_risques to fetch.
     */
    orderBy?: gestion_risquesOrderByWithRelationInput | gestion_risquesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for gestion_risques.
     */
    cursor?: gestion_risquesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` gestion_risques from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` gestion_risques.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of gestion_risques.
     */
    distinct?: Gestion_risquesScalarFieldEnum | Gestion_risquesScalarFieldEnum[]
  }

  /**
   * gestion_risques findFirstOrThrow
   */
  export type gestion_risquesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gestion_risques
     */
    select?: gestion_risquesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the gestion_risques
     */
    omit?: gestion_risquesOmit<ExtArgs> | null
    /**
     * Filter, which gestion_risques to fetch.
     */
    where?: gestion_risquesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of gestion_risques to fetch.
     */
    orderBy?: gestion_risquesOrderByWithRelationInput | gestion_risquesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for gestion_risques.
     */
    cursor?: gestion_risquesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` gestion_risques from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` gestion_risques.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of gestion_risques.
     */
    distinct?: Gestion_risquesScalarFieldEnum | Gestion_risquesScalarFieldEnum[]
  }

  /**
   * gestion_risques findMany
   */
  export type gestion_risquesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gestion_risques
     */
    select?: gestion_risquesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the gestion_risques
     */
    omit?: gestion_risquesOmit<ExtArgs> | null
    /**
     * Filter, which gestion_risques to fetch.
     */
    where?: gestion_risquesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of gestion_risques to fetch.
     */
    orderBy?: gestion_risquesOrderByWithRelationInput | gestion_risquesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing gestion_risques.
     */
    cursor?: gestion_risquesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` gestion_risques from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` gestion_risques.
     */
    skip?: number
    distinct?: Gestion_risquesScalarFieldEnum | Gestion_risquesScalarFieldEnum[]
  }

  /**
   * gestion_risques create
   */
  export type gestion_risquesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gestion_risques
     */
    select?: gestion_risquesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the gestion_risques
     */
    omit?: gestion_risquesOmit<ExtArgs> | null
    /**
     * The data needed to create a gestion_risques.
     */
    data: XOR<gestion_risquesCreateInput, gestion_risquesUncheckedCreateInput>
  }

  /**
   * gestion_risques createMany
   */
  export type gestion_risquesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many gestion_risques.
     */
    data: gestion_risquesCreateManyInput | gestion_risquesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * gestion_risques createManyAndReturn
   */
  export type gestion_risquesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gestion_risques
     */
    select?: gestion_risquesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the gestion_risques
     */
    omit?: gestion_risquesOmit<ExtArgs> | null
    /**
     * The data used to create many gestion_risques.
     */
    data: gestion_risquesCreateManyInput | gestion_risquesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * gestion_risques update
   */
  export type gestion_risquesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gestion_risques
     */
    select?: gestion_risquesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the gestion_risques
     */
    omit?: gestion_risquesOmit<ExtArgs> | null
    /**
     * The data needed to update a gestion_risques.
     */
    data: XOR<gestion_risquesUpdateInput, gestion_risquesUncheckedUpdateInput>
    /**
     * Choose, which gestion_risques to update.
     */
    where: gestion_risquesWhereUniqueInput
  }

  /**
   * gestion_risques updateMany
   */
  export type gestion_risquesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update gestion_risques.
     */
    data: XOR<gestion_risquesUpdateManyMutationInput, gestion_risquesUncheckedUpdateManyInput>
    /**
     * Filter which gestion_risques to update
     */
    where?: gestion_risquesWhereInput
    /**
     * Limit how many gestion_risques to update.
     */
    limit?: number
  }

  /**
   * gestion_risques updateManyAndReturn
   */
  export type gestion_risquesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gestion_risques
     */
    select?: gestion_risquesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the gestion_risques
     */
    omit?: gestion_risquesOmit<ExtArgs> | null
    /**
     * The data used to update gestion_risques.
     */
    data: XOR<gestion_risquesUpdateManyMutationInput, gestion_risquesUncheckedUpdateManyInput>
    /**
     * Filter which gestion_risques to update
     */
    where?: gestion_risquesWhereInput
    /**
     * Limit how many gestion_risques to update.
     */
    limit?: number
  }

  /**
   * gestion_risques upsert
   */
  export type gestion_risquesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gestion_risques
     */
    select?: gestion_risquesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the gestion_risques
     */
    omit?: gestion_risquesOmit<ExtArgs> | null
    /**
     * The filter to search for the gestion_risques to update in case it exists.
     */
    where: gestion_risquesWhereUniqueInput
    /**
     * In case the gestion_risques found by the `where` argument doesn't exist, create a new gestion_risques with this data.
     */
    create: XOR<gestion_risquesCreateInput, gestion_risquesUncheckedCreateInput>
    /**
     * In case the gestion_risques was found with the provided `where` argument, update it with this data.
     */
    update: XOR<gestion_risquesUpdateInput, gestion_risquesUncheckedUpdateInput>
  }

  /**
   * gestion_risques delete
   */
  export type gestion_risquesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gestion_risques
     */
    select?: gestion_risquesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the gestion_risques
     */
    omit?: gestion_risquesOmit<ExtArgs> | null
    /**
     * Filter which gestion_risques to delete.
     */
    where: gestion_risquesWhereUniqueInput
  }

  /**
   * gestion_risques deleteMany
   */
  export type gestion_risquesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which gestion_risques to delete
     */
    where?: gestion_risquesWhereInput
    /**
     * Limit how many gestion_risques to delete.
     */
    limit?: number
  }

  /**
   * gestion_risques without action
   */
  export type gestion_risquesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gestion_risques
     */
    select?: gestion_risquesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the gestion_risques
     */
    omit?: gestion_risquesOmit<ExtArgs> | null
  }


  /**
   * Model communes_drom
   */

  export type AggregateCommunes_drom = {
    _count: Communes_dromCountAggregateOutputType | null
    _avg: Communes_dromAvgAggregateOutputType | null
    _sum: Communes_dromSumAggregateOutputType | null
    _min: Communes_dromMinAggregateOutputType | null
    _max: Communes_dromMaxAggregateOutputType | null
  }

  export type Communes_dromAvgAggregateOutputType = {
    pk: number | null
    densite_bati: number | null
    precarite_logement: number | null
    surface: number | null
  }

  export type Communes_dromSumAggregateOutputType = {
    pk: number | null
    densite_bati: number | null
    precarite_logement: number | null
    surface: number | null
  }

  export type Communes_dromMinAggregateOutputType = {
    pk: number | null
    code_commune: string | null
    libelle_commune: string | null
    epci: string | null
    libelle_epci: string | null
    coordinates: string | null
    densite_bati: number | null
    precarite_logement: number | null
    surface: number | null
  }

  export type Communes_dromMaxAggregateOutputType = {
    pk: number | null
    code_commune: string | null
    libelle_commune: string | null
    epci: string | null
    libelle_epci: string | null
    coordinates: string | null
    densite_bati: number | null
    precarite_logement: number | null
    surface: number | null
  }

  export type Communes_dromCountAggregateOutputType = {
    pk: number
    code_commune: number
    libelle_commune: number
    epci: number
    libelle_epci: number
    coordinates: number
    densite_bati: number
    precarite_logement: number
    surface: number
    _all: number
  }


  export type Communes_dromAvgAggregateInputType = {
    pk?: true
    densite_bati?: true
    precarite_logement?: true
    surface?: true
  }

  export type Communes_dromSumAggregateInputType = {
    pk?: true
    densite_bati?: true
    precarite_logement?: true
    surface?: true
  }

  export type Communes_dromMinAggregateInputType = {
    pk?: true
    code_commune?: true
    libelle_commune?: true
    epci?: true
    libelle_epci?: true
    coordinates?: true
    densite_bati?: true
    precarite_logement?: true
    surface?: true
  }

  export type Communes_dromMaxAggregateInputType = {
    pk?: true
    code_commune?: true
    libelle_commune?: true
    epci?: true
    libelle_epci?: true
    coordinates?: true
    densite_bati?: true
    precarite_logement?: true
    surface?: true
  }

  export type Communes_dromCountAggregateInputType = {
    pk?: true
    code_commune?: true
    libelle_commune?: true
    epci?: true
    libelle_epci?: true
    coordinates?: true
    densite_bati?: true
    precarite_logement?: true
    surface?: true
    _all?: true
  }

  export type Communes_dromAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which communes_drom to aggregate.
     */
    where?: communes_dromWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of communes_droms to fetch.
     */
    orderBy?: communes_dromOrderByWithRelationInput | communes_dromOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: communes_dromWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` communes_droms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` communes_droms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned communes_droms
    **/
    _count?: true | Communes_dromCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Communes_dromAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Communes_dromSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Communes_dromMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Communes_dromMaxAggregateInputType
  }

  export type GetCommunes_dromAggregateType<T extends Communes_dromAggregateArgs> = {
        [P in keyof T & keyof AggregateCommunes_drom]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCommunes_drom[P]>
      : GetScalarType<T[P], AggregateCommunes_drom[P]>
  }




  export type communes_dromGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: communes_dromWhereInput
    orderBy?: communes_dromOrderByWithAggregationInput | communes_dromOrderByWithAggregationInput[]
    by: Communes_dromScalarFieldEnum[] | Communes_dromScalarFieldEnum
    having?: communes_dromScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Communes_dromCountAggregateInputType | true
    _avg?: Communes_dromAvgAggregateInputType
    _sum?: Communes_dromSumAggregateInputType
    _min?: Communes_dromMinAggregateInputType
    _max?: Communes_dromMaxAggregateInputType
  }

  export type Communes_dromGroupByOutputType = {
    pk: number
    code_commune: string
    libelle_commune: string
    epci: string
    libelle_epci: string
    coordinates: string
    densite_bati: number | null
    precarite_logement: number | null
    surface: number | null
    _count: Communes_dromCountAggregateOutputType | null
    _avg: Communes_dromAvgAggregateOutputType | null
    _sum: Communes_dromSumAggregateOutputType | null
    _min: Communes_dromMinAggregateOutputType | null
    _max: Communes_dromMaxAggregateOutputType | null
  }

  type GetCommunes_dromGroupByPayload<T extends communes_dromGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Communes_dromGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Communes_dromGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Communes_dromGroupByOutputType[P]>
            : GetScalarType<T[P], Communes_dromGroupByOutputType[P]>
        }
      >
    >


  export type communes_dromSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    pk?: boolean
    code_commune?: boolean
    libelle_commune?: boolean
    epci?: boolean
    libelle_epci?: boolean
    coordinates?: boolean
    densite_bati?: boolean
    precarite_logement?: boolean
    surface?: boolean
  }, ExtArgs["result"]["communes_drom"]>


  export type communes_dromSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    pk?: boolean
    code_commune?: boolean
    libelle_commune?: boolean
    epci?: boolean
    libelle_epci?: boolean
    coordinates?: boolean
    densite_bati?: boolean
    precarite_logement?: boolean
    surface?: boolean
  }, ExtArgs["result"]["communes_drom"]>

  export type communes_dromSelectScalar = {
    pk?: boolean
    code_commune?: boolean
    libelle_commune?: boolean
    epci?: boolean
    libelle_epci?: boolean
    coordinates?: boolean
    densite_bati?: boolean
    precarite_logement?: boolean
    surface?: boolean
  }

  export type communes_dromOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"pk" | "code_commune" | "libelle_commune" | "epci" | "libelle_epci" | "coordinates" | "densite_bati" | "precarite_logement" | "surface", ExtArgs["result"]["communes_drom"]>

  export type $communes_dromPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "communes_drom"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      pk: number
      code_commune: string
      libelle_commune: string
      epci: string
      libelle_epci: string
      coordinates: string
      densite_bati: number | null
      precarite_logement: number | null
      surface: number | null
    }, ExtArgs["result"]["communes_drom"]>
    composites: {}
  }

  type communes_dromGetPayload<S extends boolean | null | undefined | communes_dromDefaultArgs> = $Result.GetResult<Prisma.$communes_dromPayload, S>

  type communes_dromCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<communes_dromFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Communes_dromCountAggregateInputType | true
    }

  export interface communes_dromDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['communes_drom'], meta: { name: 'communes_drom' } }
    /**
     * Find zero or one Communes_drom that matches the filter.
     * @param {communes_dromFindUniqueArgs} args - Arguments to find a Communes_drom
     * @example
     * // Get one Communes_drom
     * const communes_drom = await prisma.communes_drom.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends communes_dromFindUniqueArgs>(args: SelectSubset<T, communes_dromFindUniqueArgs<ExtArgs>>): Prisma__communes_dromClient<$Result.GetResult<Prisma.$communes_dromPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Communes_drom that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {communes_dromFindUniqueOrThrowArgs} args - Arguments to find a Communes_drom
     * @example
     * // Get one Communes_drom
     * const communes_drom = await prisma.communes_drom.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends communes_dromFindUniqueOrThrowArgs>(args: SelectSubset<T, communes_dromFindUniqueOrThrowArgs<ExtArgs>>): Prisma__communes_dromClient<$Result.GetResult<Prisma.$communes_dromPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Communes_drom that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {communes_dromFindFirstArgs} args - Arguments to find a Communes_drom
     * @example
     * // Get one Communes_drom
     * const communes_drom = await prisma.communes_drom.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends communes_dromFindFirstArgs>(args?: SelectSubset<T, communes_dromFindFirstArgs<ExtArgs>>): Prisma__communes_dromClient<$Result.GetResult<Prisma.$communes_dromPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Communes_drom that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {communes_dromFindFirstOrThrowArgs} args - Arguments to find a Communes_drom
     * @example
     * // Get one Communes_drom
     * const communes_drom = await prisma.communes_drom.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends communes_dromFindFirstOrThrowArgs>(args?: SelectSubset<T, communes_dromFindFirstOrThrowArgs<ExtArgs>>): Prisma__communes_dromClient<$Result.GetResult<Prisma.$communes_dromPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Communes_droms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {communes_dromFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Communes_droms
     * const communes_droms = await prisma.communes_drom.findMany()
     * 
     * // Get first 10 Communes_droms
     * const communes_droms = await prisma.communes_drom.findMany({ take: 10 })
     * 
     * // Only select the `pk`
     * const communes_dromWithPkOnly = await prisma.communes_drom.findMany({ select: { pk: true } })
     * 
     */
    findMany<T extends communes_dromFindManyArgs>(args?: SelectSubset<T, communes_dromFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$communes_dromPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Delete a Communes_drom.
     * @param {communes_dromDeleteArgs} args - Arguments to delete one Communes_drom.
     * @example
     * // Delete one Communes_drom
     * const Communes_drom = await prisma.communes_drom.delete({
     *   where: {
     *     // ... filter to delete one Communes_drom
     *   }
     * })
     * 
     */
    delete<T extends communes_dromDeleteArgs>(args: SelectSubset<T, communes_dromDeleteArgs<ExtArgs>>): Prisma__communes_dromClient<$Result.GetResult<Prisma.$communes_dromPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Communes_drom.
     * @param {communes_dromUpdateArgs} args - Arguments to update one Communes_drom.
     * @example
     * // Update one Communes_drom
     * const communes_drom = await prisma.communes_drom.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends communes_dromUpdateArgs>(args: SelectSubset<T, communes_dromUpdateArgs<ExtArgs>>): Prisma__communes_dromClient<$Result.GetResult<Prisma.$communes_dromPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Communes_droms.
     * @param {communes_dromDeleteManyArgs} args - Arguments to filter Communes_droms to delete.
     * @example
     * // Delete a few Communes_droms
     * const { count } = await prisma.communes_drom.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends communes_dromDeleteManyArgs>(args?: SelectSubset<T, communes_dromDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Communes_droms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {communes_dromUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Communes_droms
     * const communes_drom = await prisma.communes_drom.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends communes_dromUpdateManyArgs>(args: SelectSubset<T, communes_dromUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Communes_droms and returns the data updated in the database.
     * @param {communes_dromUpdateManyAndReturnArgs} args - Arguments to update many Communes_droms.
     * @example
     * // Update many Communes_droms
     * const communes_drom = await prisma.communes_drom.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Communes_droms and only return the `pk`
     * const communes_dromWithPkOnly = await prisma.communes_drom.updateManyAndReturn({
     *   select: { pk: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends communes_dromUpdateManyAndReturnArgs>(args: SelectSubset<T, communes_dromUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$communes_dromPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>


    /**
     * Count the number of Communes_droms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {communes_dromCountArgs} args - Arguments to filter Communes_droms to count.
     * @example
     * // Count the number of Communes_droms
     * const count = await prisma.communes_drom.count({
     *   where: {
     *     // ... the filter for the Communes_droms we want to count
     *   }
     * })
    **/
    count<T extends communes_dromCountArgs>(
      args?: Subset<T, communes_dromCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Communes_dromCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Communes_drom.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Communes_dromAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Communes_dromAggregateArgs>(args: Subset<T, Communes_dromAggregateArgs>): Prisma.PrismaPromise<GetCommunes_dromAggregateType<T>>

    /**
     * Group by Communes_drom.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {communes_dromGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends communes_dromGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: communes_dromGroupByArgs['orderBy'] }
        : { orderBy?: communes_dromGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, communes_dromGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommunes_dromGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the communes_drom model
   */
  readonly fields: communes_dromFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for communes_drom.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__communes_dromClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the communes_drom model
   */ 
  interface communes_dromFieldRefs {
    readonly pk: FieldRef<"communes_drom", 'Int'>
    readonly code_commune: FieldRef<"communes_drom", 'String'>
    readonly libelle_commune: FieldRef<"communes_drom", 'String'>
    readonly epci: FieldRef<"communes_drom", 'String'>
    readonly libelle_epci: FieldRef<"communes_drom", 'String'>
    readonly coordinates: FieldRef<"communes_drom", 'String'>
    readonly densite_bati: FieldRef<"communes_drom", 'Float'>
    readonly precarite_logement: FieldRef<"communes_drom", 'Float'>
    readonly surface: FieldRef<"communes_drom", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * communes_drom findUnique
   */
  export type communes_dromFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the communes_drom
     */
    select?: communes_dromSelect<ExtArgs> | null
    /**
     * Omit specific fields from the communes_drom
     */
    omit?: communes_dromOmit<ExtArgs> | null
    /**
     * Filter, which communes_drom to fetch.
     */
    where: communes_dromWhereUniqueInput
  }

  /**
   * communes_drom findUniqueOrThrow
   */
  export type communes_dromFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the communes_drom
     */
    select?: communes_dromSelect<ExtArgs> | null
    /**
     * Omit specific fields from the communes_drom
     */
    omit?: communes_dromOmit<ExtArgs> | null
    /**
     * Filter, which communes_drom to fetch.
     */
    where: communes_dromWhereUniqueInput
  }

  /**
   * communes_drom findFirst
   */
  export type communes_dromFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the communes_drom
     */
    select?: communes_dromSelect<ExtArgs> | null
    /**
     * Omit specific fields from the communes_drom
     */
    omit?: communes_dromOmit<ExtArgs> | null
    /**
     * Filter, which communes_drom to fetch.
     */
    where?: communes_dromWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of communes_droms to fetch.
     */
    orderBy?: communes_dromOrderByWithRelationInput | communes_dromOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for communes_droms.
     */
    cursor?: communes_dromWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` communes_droms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` communes_droms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of communes_droms.
     */
    distinct?: Communes_dromScalarFieldEnum | Communes_dromScalarFieldEnum[]
  }

  /**
   * communes_drom findFirstOrThrow
   */
  export type communes_dromFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the communes_drom
     */
    select?: communes_dromSelect<ExtArgs> | null
    /**
     * Omit specific fields from the communes_drom
     */
    omit?: communes_dromOmit<ExtArgs> | null
    /**
     * Filter, which communes_drom to fetch.
     */
    where?: communes_dromWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of communes_droms to fetch.
     */
    orderBy?: communes_dromOrderByWithRelationInput | communes_dromOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for communes_droms.
     */
    cursor?: communes_dromWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` communes_droms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` communes_droms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of communes_droms.
     */
    distinct?: Communes_dromScalarFieldEnum | Communes_dromScalarFieldEnum[]
  }

  /**
   * communes_drom findMany
   */
  export type communes_dromFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the communes_drom
     */
    select?: communes_dromSelect<ExtArgs> | null
    /**
     * Omit specific fields from the communes_drom
     */
    omit?: communes_dromOmit<ExtArgs> | null
    /**
     * Filter, which communes_droms to fetch.
     */
    where?: communes_dromWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of communes_droms to fetch.
     */
    orderBy?: communes_dromOrderByWithRelationInput | communes_dromOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing communes_droms.
     */
    cursor?: communes_dromWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` communes_droms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` communes_droms.
     */
    skip?: number
    distinct?: Communes_dromScalarFieldEnum | Communes_dromScalarFieldEnum[]
  }

  /**
   * communes_drom update
   */
  export type communes_dromUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the communes_drom
     */
    select?: communes_dromSelect<ExtArgs> | null
    /**
     * Omit specific fields from the communes_drom
     */
    omit?: communes_dromOmit<ExtArgs> | null
    /**
     * The data needed to update a communes_drom.
     */
    data: XOR<communes_dromUpdateInput, communes_dromUncheckedUpdateInput>
    /**
     * Choose, which communes_drom to update.
     */
    where: communes_dromWhereUniqueInput
  }

  /**
   * communes_drom updateMany
   */
  export type communes_dromUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update communes_droms.
     */
    data: XOR<communes_dromUpdateManyMutationInput, communes_dromUncheckedUpdateManyInput>
    /**
     * Filter which communes_droms to update
     */
    where?: communes_dromWhereInput
    /**
     * Limit how many communes_droms to update.
     */
    limit?: number
  }

  /**
   * communes_drom updateManyAndReturn
   */
  export type communes_dromUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the communes_drom
     */
    select?: communes_dromSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the communes_drom
     */
    omit?: communes_dromOmit<ExtArgs> | null
    /**
     * The data used to update communes_droms.
     */
    data: XOR<communes_dromUpdateManyMutationInput, communes_dromUncheckedUpdateManyInput>
    /**
     * Filter which communes_droms to update
     */
    where?: communes_dromWhereInput
    /**
     * Limit how many communes_droms to update.
     */
    limit?: number
  }

  /**
   * communes_drom delete
   */
  export type communes_dromDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the communes_drom
     */
    select?: communes_dromSelect<ExtArgs> | null
    /**
     * Omit specific fields from the communes_drom
     */
    omit?: communes_dromOmit<ExtArgs> | null
    /**
     * Filter which communes_drom to delete.
     */
    where: communes_dromWhereUniqueInput
  }

  /**
   * communes_drom deleteMany
   */
  export type communes_dromDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which communes_droms to delete
     */
    where?: communes_dromWhereInput
    /**
     * Limit how many communes_droms to delete.
     */
    limit?: number
  }

  /**
   * communes_drom without action
   */
  export type communes_dromDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the communes_drom
     */
    select?: communes_dromSelect<ExtArgs> | null
    /**
     * Omit specific fields from the communes_drom
     */
    omit?: communes_dromOmit<ExtArgs> | null
  }


  /**
   * Model ressources_eau
   */

  export type AggregateRessources_eau = {
    _count: Ressources_eauCountAggregateOutputType | null
    _avg: Ressources_eauAvgAggregateOutputType | null
    _sum: Ressources_eauSumAggregateOutputType | null
    _min: Ressources_eauMinAggregateOutputType | null
    _max: Ressources_eauMaxAggregateOutputType | null
  }

  export type Ressources_eauAvgAggregateOutputType = {
    index: number | null
    A2020: number | null
    A2019: number | null
    A2018: number | null
    A2017: number | null
    A2016: number | null
    A2015: number | null
    A2014: number | null
    A2013: number | null
    A2012: number | null
    A2011: number | null
    A2010: number | null
    A2009: number | null
    A2008: number | null
    region: number | null
  }

  export type Ressources_eauSumAggregateOutputType = {
    index: bigint | null
    A2020: number | null
    A2019: number | null
    A2018: number | null
    A2017: number | null
    A2016: number | null
    A2015: number | null
    A2014: number | null
    A2013: number | null
    A2012: number | null
    A2011: number | null
    A2010: number | null
    A2009: number | null
    A2008: number | null
    region: number | null
  }

  export type Ressources_eauMinAggregateOutputType = {
    index: bigint | null
    code_geographique: string | null
    LIBELLE_SOUS_CHAMP: string | null
    SOUS_CHAMP: string | null
    A2020: number | null
    A2019: number | null
    A2018: number | null
    A2017: number | null
    A2016: number | null
    A2015: number | null
    A2014: number | null
    A2013: number | null
    A2012: number | null
    A2011: number | null
    A2010: number | null
    A2009: number | null
    A2008: number | null
    libelle_geographique: string | null
    epci: string | null
    libelle_epci: string | null
    departement: string | null
    region: number | null
  }

  export type Ressources_eauMaxAggregateOutputType = {
    index: bigint | null
    code_geographique: string | null
    LIBELLE_SOUS_CHAMP: string | null
    SOUS_CHAMP: string | null
    A2020: number | null
    A2019: number | null
    A2018: number | null
    A2017: number | null
    A2016: number | null
    A2015: number | null
    A2014: number | null
    A2013: number | null
    A2012: number | null
    A2011: number | null
    A2010: number | null
    A2009: number | null
    A2008: number | null
    libelle_geographique: string | null
    epci: string | null
    libelle_epci: string | null
    departement: string | null
    region: number | null
  }

  export type Ressources_eauCountAggregateOutputType = {
    index: number
    code_geographique: number
    LIBELLE_SOUS_CHAMP: number
    SOUS_CHAMP: number
    A2020: number
    A2019: number
    A2018: number
    A2017: number
    A2016: number
    A2015: number
    A2014: number
    A2013: number
    A2012: number
    A2011: number
    A2010: number
    A2009: number
    A2008: number
    libelle_geographique: number
    epci: number
    libelle_epci: number
    departement: number
    region: number
    _all: number
  }


  export type Ressources_eauAvgAggregateInputType = {
    index?: true
    A2020?: true
    A2019?: true
    A2018?: true
    A2017?: true
    A2016?: true
    A2015?: true
    A2014?: true
    A2013?: true
    A2012?: true
    A2011?: true
    A2010?: true
    A2009?: true
    A2008?: true
    region?: true
  }

  export type Ressources_eauSumAggregateInputType = {
    index?: true
    A2020?: true
    A2019?: true
    A2018?: true
    A2017?: true
    A2016?: true
    A2015?: true
    A2014?: true
    A2013?: true
    A2012?: true
    A2011?: true
    A2010?: true
    A2009?: true
    A2008?: true
    region?: true
  }

  export type Ressources_eauMinAggregateInputType = {
    index?: true
    code_geographique?: true
    LIBELLE_SOUS_CHAMP?: true
    SOUS_CHAMP?: true
    A2020?: true
    A2019?: true
    A2018?: true
    A2017?: true
    A2016?: true
    A2015?: true
    A2014?: true
    A2013?: true
    A2012?: true
    A2011?: true
    A2010?: true
    A2009?: true
    A2008?: true
    libelle_geographique?: true
    epci?: true
    libelle_epci?: true
    departement?: true
    region?: true
  }

  export type Ressources_eauMaxAggregateInputType = {
    index?: true
    code_geographique?: true
    LIBELLE_SOUS_CHAMP?: true
    SOUS_CHAMP?: true
    A2020?: true
    A2019?: true
    A2018?: true
    A2017?: true
    A2016?: true
    A2015?: true
    A2014?: true
    A2013?: true
    A2012?: true
    A2011?: true
    A2010?: true
    A2009?: true
    A2008?: true
    libelle_geographique?: true
    epci?: true
    libelle_epci?: true
    departement?: true
    region?: true
  }

  export type Ressources_eauCountAggregateInputType = {
    index?: true
    code_geographique?: true
    LIBELLE_SOUS_CHAMP?: true
    SOUS_CHAMP?: true
    A2020?: true
    A2019?: true
    A2018?: true
    A2017?: true
    A2016?: true
    A2015?: true
    A2014?: true
    A2013?: true
    A2012?: true
    A2011?: true
    A2010?: true
    A2009?: true
    A2008?: true
    libelle_geographique?: true
    epci?: true
    libelle_epci?: true
    departement?: true
    region?: true
    _all?: true
  }

  export type Ressources_eauAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ressources_eau to aggregate.
     */
    where?: ressources_eauWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ressources_eaus to fetch.
     */
    orderBy?: ressources_eauOrderByWithRelationInput | ressources_eauOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ressources_eauWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ressources_eaus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ressources_eaus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ressources_eaus
    **/
    _count?: true | Ressources_eauCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Ressources_eauAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Ressources_eauSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Ressources_eauMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Ressources_eauMaxAggregateInputType
  }

  export type GetRessources_eauAggregateType<T extends Ressources_eauAggregateArgs> = {
        [P in keyof T & keyof AggregateRessources_eau]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRessources_eau[P]>
      : GetScalarType<T[P], AggregateRessources_eau[P]>
  }




  export type ressources_eauGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ressources_eauWhereInput
    orderBy?: ressources_eauOrderByWithAggregationInput | ressources_eauOrderByWithAggregationInput[]
    by: Ressources_eauScalarFieldEnum[] | Ressources_eauScalarFieldEnum
    having?: ressources_eauScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Ressources_eauCountAggregateInputType | true
    _avg?: Ressources_eauAvgAggregateInputType
    _sum?: Ressources_eauSumAggregateInputType
    _min?: Ressources_eauMinAggregateInputType
    _max?: Ressources_eauMaxAggregateInputType
  }

  export type Ressources_eauGroupByOutputType = {
    index: bigint
    code_geographique: string
    LIBELLE_SOUS_CHAMP: string | null
    SOUS_CHAMP: string | null
    A2020: number | null
    A2019: number | null
    A2018: number | null
    A2017: number | null
    A2016: number | null
    A2015: number | null
    A2014: number | null
    A2013: number | null
    A2012: number | null
    A2011: number | null
    A2010: number | null
    A2009: number | null
    A2008: number | null
    libelle_geographique: string | null
    epci: string | null
    libelle_epci: string | null
    departement: string | null
    region: number | null
    _count: Ressources_eauCountAggregateOutputType | null
    _avg: Ressources_eauAvgAggregateOutputType | null
    _sum: Ressources_eauSumAggregateOutputType | null
    _min: Ressources_eauMinAggregateOutputType | null
    _max: Ressources_eauMaxAggregateOutputType | null
  }

  type GetRessources_eauGroupByPayload<T extends ressources_eauGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Ressources_eauGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Ressources_eauGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Ressources_eauGroupByOutputType[P]>
            : GetScalarType<T[P], Ressources_eauGroupByOutputType[P]>
        }
      >
    >


  export type ressources_eauSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    index?: boolean
    code_geographique?: boolean
    LIBELLE_SOUS_CHAMP?: boolean
    SOUS_CHAMP?: boolean
    A2020?: boolean
    A2019?: boolean
    A2018?: boolean
    A2017?: boolean
    A2016?: boolean
    A2015?: boolean
    A2014?: boolean
    A2013?: boolean
    A2012?: boolean
    A2011?: boolean
    A2010?: boolean
    A2009?: boolean
    A2008?: boolean
    libelle_geographique?: boolean
    epci?: boolean
    libelle_epci?: boolean
    departement?: boolean
    region?: boolean
  }, ExtArgs["result"]["ressources_eau"]>

  export type ressources_eauSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    index?: boolean
    code_geographique?: boolean
    LIBELLE_SOUS_CHAMP?: boolean
    SOUS_CHAMP?: boolean
    A2020?: boolean
    A2019?: boolean
    A2018?: boolean
    A2017?: boolean
    A2016?: boolean
    A2015?: boolean
    A2014?: boolean
    A2013?: boolean
    A2012?: boolean
    A2011?: boolean
    A2010?: boolean
    A2009?: boolean
    A2008?: boolean
    libelle_geographique?: boolean
    epci?: boolean
    libelle_epci?: boolean
    departement?: boolean
    region?: boolean
  }, ExtArgs["result"]["ressources_eau"]>

  export type ressources_eauSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    index?: boolean
    code_geographique?: boolean
    LIBELLE_SOUS_CHAMP?: boolean
    SOUS_CHAMP?: boolean
    A2020?: boolean
    A2019?: boolean
    A2018?: boolean
    A2017?: boolean
    A2016?: boolean
    A2015?: boolean
    A2014?: boolean
    A2013?: boolean
    A2012?: boolean
    A2011?: boolean
    A2010?: boolean
    A2009?: boolean
    A2008?: boolean
    libelle_geographique?: boolean
    epci?: boolean
    libelle_epci?: boolean
    departement?: boolean
    region?: boolean
  }, ExtArgs["result"]["ressources_eau"]>

  export type ressources_eauSelectScalar = {
    index?: boolean
    code_geographique?: boolean
    LIBELLE_SOUS_CHAMP?: boolean
    SOUS_CHAMP?: boolean
    A2020?: boolean
    A2019?: boolean
    A2018?: boolean
    A2017?: boolean
    A2016?: boolean
    A2015?: boolean
    A2014?: boolean
    A2013?: boolean
    A2012?: boolean
    A2011?: boolean
    A2010?: boolean
    A2009?: boolean
    A2008?: boolean
    libelle_geographique?: boolean
    epci?: boolean
    libelle_epci?: boolean
    departement?: boolean
    region?: boolean
  }

  export type ressources_eauOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"index" | "code_geographique" | "LIBELLE_SOUS_CHAMP" | "SOUS_CHAMP" | "A2020" | "A2019" | "A2018" | "A2017" | "A2016" | "A2015" | "A2014" | "A2013" | "A2012" | "A2011" | "A2010" | "A2009" | "A2008" | "libelle_geographique" | "epci" | "libelle_epci" | "departement" | "region", ExtArgs["result"]["ressources_eau"]>

  export type $ressources_eauPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ressources_eau"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      index: bigint
      code_geographique: string
      LIBELLE_SOUS_CHAMP: string | null
      SOUS_CHAMP: string | null
      A2020: number | null
      A2019: number | null
      A2018: number | null
      A2017: number | null
      A2016: number | null
      A2015: number | null
      A2014: number | null
      A2013: number | null
      A2012: number | null
      A2011: number | null
      A2010: number | null
      A2009: number | null
      A2008: number | null
      libelle_geographique: string | null
      epci: string | null
      libelle_epci: string | null
      departement: string | null
      region: number | null
    }, ExtArgs["result"]["ressources_eau"]>
    composites: {}
  }

  type ressources_eauGetPayload<S extends boolean | null | undefined | ressources_eauDefaultArgs> = $Result.GetResult<Prisma.$ressources_eauPayload, S>

  type ressources_eauCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ressources_eauFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Ressources_eauCountAggregateInputType | true
    }

  export interface ressources_eauDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ressources_eau'], meta: { name: 'ressources_eau' } }
    /**
     * Find zero or one Ressources_eau that matches the filter.
     * @param {ressources_eauFindUniqueArgs} args - Arguments to find a Ressources_eau
     * @example
     * // Get one Ressources_eau
     * const ressources_eau = await prisma.ressources_eau.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ressources_eauFindUniqueArgs>(args: SelectSubset<T, ressources_eauFindUniqueArgs<ExtArgs>>): Prisma__ressources_eauClient<$Result.GetResult<Prisma.$ressources_eauPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Ressources_eau that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ressources_eauFindUniqueOrThrowArgs} args - Arguments to find a Ressources_eau
     * @example
     * // Get one Ressources_eau
     * const ressources_eau = await prisma.ressources_eau.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ressources_eauFindUniqueOrThrowArgs>(args: SelectSubset<T, ressources_eauFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ressources_eauClient<$Result.GetResult<Prisma.$ressources_eauPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Ressources_eau that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ressources_eauFindFirstArgs} args - Arguments to find a Ressources_eau
     * @example
     * // Get one Ressources_eau
     * const ressources_eau = await prisma.ressources_eau.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ressources_eauFindFirstArgs>(args?: SelectSubset<T, ressources_eauFindFirstArgs<ExtArgs>>): Prisma__ressources_eauClient<$Result.GetResult<Prisma.$ressources_eauPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Ressources_eau that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ressources_eauFindFirstOrThrowArgs} args - Arguments to find a Ressources_eau
     * @example
     * // Get one Ressources_eau
     * const ressources_eau = await prisma.ressources_eau.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ressources_eauFindFirstOrThrowArgs>(args?: SelectSubset<T, ressources_eauFindFirstOrThrowArgs<ExtArgs>>): Prisma__ressources_eauClient<$Result.GetResult<Prisma.$ressources_eauPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Ressources_eaus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ressources_eauFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ressources_eaus
     * const ressources_eaus = await prisma.ressources_eau.findMany()
     * 
     * // Get first 10 Ressources_eaus
     * const ressources_eaus = await prisma.ressources_eau.findMany({ take: 10 })
     * 
     * // Only select the `index`
     * const ressources_eauWithIndexOnly = await prisma.ressources_eau.findMany({ select: { index: true } })
     * 
     */
    findMany<T extends ressources_eauFindManyArgs>(args?: SelectSubset<T, ressources_eauFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ressources_eauPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Ressources_eau.
     * @param {ressources_eauCreateArgs} args - Arguments to create a Ressources_eau.
     * @example
     * // Create one Ressources_eau
     * const Ressources_eau = await prisma.ressources_eau.create({
     *   data: {
     *     // ... data to create a Ressources_eau
     *   }
     * })
     * 
     */
    create<T extends ressources_eauCreateArgs>(args: SelectSubset<T, ressources_eauCreateArgs<ExtArgs>>): Prisma__ressources_eauClient<$Result.GetResult<Prisma.$ressources_eauPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Ressources_eaus.
     * @param {ressources_eauCreateManyArgs} args - Arguments to create many Ressources_eaus.
     * @example
     * // Create many Ressources_eaus
     * const ressources_eau = await prisma.ressources_eau.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ressources_eauCreateManyArgs>(args?: SelectSubset<T, ressources_eauCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Ressources_eaus and returns the data saved in the database.
     * @param {ressources_eauCreateManyAndReturnArgs} args - Arguments to create many Ressources_eaus.
     * @example
     * // Create many Ressources_eaus
     * const ressources_eau = await prisma.ressources_eau.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Ressources_eaus and only return the `index`
     * const ressources_eauWithIndexOnly = await prisma.ressources_eau.createManyAndReturn({
     *   select: { index: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ressources_eauCreateManyAndReturnArgs>(args?: SelectSubset<T, ressources_eauCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ressources_eauPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Ressources_eau.
     * @param {ressources_eauDeleteArgs} args - Arguments to delete one Ressources_eau.
     * @example
     * // Delete one Ressources_eau
     * const Ressources_eau = await prisma.ressources_eau.delete({
     *   where: {
     *     // ... filter to delete one Ressources_eau
     *   }
     * })
     * 
     */
    delete<T extends ressources_eauDeleteArgs>(args: SelectSubset<T, ressources_eauDeleteArgs<ExtArgs>>): Prisma__ressources_eauClient<$Result.GetResult<Prisma.$ressources_eauPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Ressources_eau.
     * @param {ressources_eauUpdateArgs} args - Arguments to update one Ressources_eau.
     * @example
     * // Update one Ressources_eau
     * const ressources_eau = await prisma.ressources_eau.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ressources_eauUpdateArgs>(args: SelectSubset<T, ressources_eauUpdateArgs<ExtArgs>>): Prisma__ressources_eauClient<$Result.GetResult<Prisma.$ressources_eauPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Ressources_eaus.
     * @param {ressources_eauDeleteManyArgs} args - Arguments to filter Ressources_eaus to delete.
     * @example
     * // Delete a few Ressources_eaus
     * const { count } = await prisma.ressources_eau.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ressources_eauDeleteManyArgs>(args?: SelectSubset<T, ressources_eauDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ressources_eaus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ressources_eauUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ressources_eaus
     * const ressources_eau = await prisma.ressources_eau.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ressources_eauUpdateManyArgs>(args: SelectSubset<T, ressources_eauUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ressources_eaus and returns the data updated in the database.
     * @param {ressources_eauUpdateManyAndReturnArgs} args - Arguments to update many Ressources_eaus.
     * @example
     * // Update many Ressources_eaus
     * const ressources_eau = await prisma.ressources_eau.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Ressources_eaus and only return the `index`
     * const ressources_eauWithIndexOnly = await prisma.ressources_eau.updateManyAndReturn({
     *   select: { index: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ressources_eauUpdateManyAndReturnArgs>(args: SelectSubset<T, ressources_eauUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ressources_eauPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Ressources_eau.
     * @param {ressources_eauUpsertArgs} args - Arguments to update or create a Ressources_eau.
     * @example
     * // Update or create a Ressources_eau
     * const ressources_eau = await prisma.ressources_eau.upsert({
     *   create: {
     *     // ... data to create a Ressources_eau
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ressources_eau we want to update
     *   }
     * })
     */
    upsert<T extends ressources_eauUpsertArgs>(args: SelectSubset<T, ressources_eauUpsertArgs<ExtArgs>>): Prisma__ressources_eauClient<$Result.GetResult<Prisma.$ressources_eauPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Ressources_eaus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ressources_eauCountArgs} args - Arguments to filter Ressources_eaus to count.
     * @example
     * // Count the number of Ressources_eaus
     * const count = await prisma.ressources_eau.count({
     *   where: {
     *     // ... the filter for the Ressources_eaus we want to count
     *   }
     * })
    **/
    count<T extends ressources_eauCountArgs>(
      args?: Subset<T, ressources_eauCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Ressources_eauCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ressources_eau.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Ressources_eauAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Ressources_eauAggregateArgs>(args: Subset<T, Ressources_eauAggregateArgs>): Prisma.PrismaPromise<GetRessources_eauAggregateType<T>>

    /**
     * Group by Ressources_eau.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ressources_eauGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ressources_eauGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ressources_eauGroupByArgs['orderBy'] }
        : { orderBy?: ressources_eauGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ressources_eauGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRessources_eauGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ressources_eau model
   */
  readonly fields: ressources_eauFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ressources_eau.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ressources_eauClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ressources_eau model
   */ 
  interface ressources_eauFieldRefs {
    readonly index: FieldRef<"ressources_eau", 'BigInt'>
    readonly code_geographique: FieldRef<"ressources_eau", 'String'>
    readonly LIBELLE_SOUS_CHAMP: FieldRef<"ressources_eau", 'String'>
    readonly SOUS_CHAMP: FieldRef<"ressources_eau", 'String'>
    readonly A2020: FieldRef<"ressources_eau", 'Float'>
    readonly A2019: FieldRef<"ressources_eau", 'Float'>
    readonly A2018: FieldRef<"ressources_eau", 'Float'>
    readonly A2017: FieldRef<"ressources_eau", 'Float'>
    readonly A2016: FieldRef<"ressources_eau", 'Float'>
    readonly A2015: FieldRef<"ressources_eau", 'Float'>
    readonly A2014: FieldRef<"ressources_eau", 'Float'>
    readonly A2013: FieldRef<"ressources_eau", 'Float'>
    readonly A2012: FieldRef<"ressources_eau", 'Float'>
    readonly A2011: FieldRef<"ressources_eau", 'Float'>
    readonly A2010: FieldRef<"ressources_eau", 'Float'>
    readonly A2009: FieldRef<"ressources_eau", 'Float'>
    readonly A2008: FieldRef<"ressources_eau", 'Float'>
    readonly libelle_geographique: FieldRef<"ressources_eau", 'String'>
    readonly epci: FieldRef<"ressources_eau", 'String'>
    readonly libelle_epci: FieldRef<"ressources_eau", 'String'>
    readonly departement: FieldRef<"ressources_eau", 'String'>
    readonly region: FieldRef<"ressources_eau", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * ressources_eau findUnique
   */
  export type ressources_eauFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ressources_eau
     */
    select?: ressources_eauSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ressources_eau
     */
    omit?: ressources_eauOmit<ExtArgs> | null
    /**
     * Filter, which ressources_eau to fetch.
     */
    where: ressources_eauWhereUniqueInput
  }

  /**
   * ressources_eau findUniqueOrThrow
   */
  export type ressources_eauFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ressources_eau
     */
    select?: ressources_eauSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ressources_eau
     */
    omit?: ressources_eauOmit<ExtArgs> | null
    /**
     * Filter, which ressources_eau to fetch.
     */
    where: ressources_eauWhereUniqueInput
  }

  /**
   * ressources_eau findFirst
   */
  export type ressources_eauFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ressources_eau
     */
    select?: ressources_eauSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ressources_eau
     */
    omit?: ressources_eauOmit<ExtArgs> | null
    /**
     * Filter, which ressources_eau to fetch.
     */
    where?: ressources_eauWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ressources_eaus to fetch.
     */
    orderBy?: ressources_eauOrderByWithRelationInput | ressources_eauOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ressources_eaus.
     */
    cursor?: ressources_eauWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ressources_eaus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ressources_eaus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ressources_eaus.
     */
    distinct?: Ressources_eauScalarFieldEnum | Ressources_eauScalarFieldEnum[]
  }

  /**
   * ressources_eau findFirstOrThrow
   */
  export type ressources_eauFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ressources_eau
     */
    select?: ressources_eauSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ressources_eau
     */
    omit?: ressources_eauOmit<ExtArgs> | null
    /**
     * Filter, which ressources_eau to fetch.
     */
    where?: ressources_eauWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ressources_eaus to fetch.
     */
    orderBy?: ressources_eauOrderByWithRelationInput | ressources_eauOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ressources_eaus.
     */
    cursor?: ressources_eauWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ressources_eaus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ressources_eaus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ressources_eaus.
     */
    distinct?: Ressources_eauScalarFieldEnum | Ressources_eauScalarFieldEnum[]
  }

  /**
   * ressources_eau findMany
   */
  export type ressources_eauFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ressources_eau
     */
    select?: ressources_eauSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ressources_eau
     */
    omit?: ressources_eauOmit<ExtArgs> | null
    /**
     * Filter, which ressources_eaus to fetch.
     */
    where?: ressources_eauWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ressources_eaus to fetch.
     */
    orderBy?: ressources_eauOrderByWithRelationInput | ressources_eauOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ressources_eaus.
     */
    cursor?: ressources_eauWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ressources_eaus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ressources_eaus.
     */
    skip?: number
    distinct?: Ressources_eauScalarFieldEnum | Ressources_eauScalarFieldEnum[]
  }

  /**
   * ressources_eau create
   */
  export type ressources_eauCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ressources_eau
     */
    select?: ressources_eauSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ressources_eau
     */
    omit?: ressources_eauOmit<ExtArgs> | null
    /**
     * The data needed to create a ressources_eau.
     */
    data: XOR<ressources_eauCreateInput, ressources_eauUncheckedCreateInput>
  }

  /**
   * ressources_eau createMany
   */
  export type ressources_eauCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ressources_eaus.
     */
    data: ressources_eauCreateManyInput | ressources_eauCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ressources_eau createManyAndReturn
   */
  export type ressources_eauCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ressources_eau
     */
    select?: ressources_eauSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ressources_eau
     */
    omit?: ressources_eauOmit<ExtArgs> | null
    /**
     * The data used to create many ressources_eaus.
     */
    data: ressources_eauCreateManyInput | ressources_eauCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ressources_eau update
   */
  export type ressources_eauUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ressources_eau
     */
    select?: ressources_eauSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ressources_eau
     */
    omit?: ressources_eauOmit<ExtArgs> | null
    /**
     * The data needed to update a ressources_eau.
     */
    data: XOR<ressources_eauUpdateInput, ressources_eauUncheckedUpdateInput>
    /**
     * Choose, which ressources_eau to update.
     */
    where: ressources_eauWhereUniqueInput
  }

  /**
   * ressources_eau updateMany
   */
  export type ressources_eauUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ressources_eaus.
     */
    data: XOR<ressources_eauUpdateManyMutationInput, ressources_eauUncheckedUpdateManyInput>
    /**
     * Filter which ressources_eaus to update
     */
    where?: ressources_eauWhereInput
    /**
     * Limit how many ressources_eaus to update.
     */
    limit?: number
  }

  /**
   * ressources_eau updateManyAndReturn
   */
  export type ressources_eauUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ressources_eau
     */
    select?: ressources_eauSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ressources_eau
     */
    omit?: ressources_eauOmit<ExtArgs> | null
    /**
     * The data used to update ressources_eaus.
     */
    data: XOR<ressources_eauUpdateManyMutationInput, ressources_eauUncheckedUpdateManyInput>
    /**
     * Filter which ressources_eaus to update
     */
    where?: ressources_eauWhereInput
    /**
     * Limit how many ressources_eaus to update.
     */
    limit?: number
  }

  /**
   * ressources_eau upsert
   */
  export type ressources_eauUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ressources_eau
     */
    select?: ressources_eauSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ressources_eau
     */
    omit?: ressources_eauOmit<ExtArgs> | null
    /**
     * The filter to search for the ressources_eau to update in case it exists.
     */
    where: ressources_eauWhereUniqueInput
    /**
     * In case the ressources_eau found by the `where` argument doesn't exist, create a new ressources_eau with this data.
     */
    create: XOR<ressources_eauCreateInput, ressources_eauUncheckedCreateInput>
    /**
     * In case the ressources_eau was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ressources_eauUpdateInput, ressources_eauUncheckedUpdateInput>
  }

  /**
   * ressources_eau delete
   */
  export type ressources_eauDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ressources_eau
     */
    select?: ressources_eauSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ressources_eau
     */
    omit?: ressources_eauOmit<ExtArgs> | null
    /**
     * Filter which ressources_eau to delete.
     */
    where: ressources_eauWhereUniqueInput
  }

  /**
   * ressources_eau deleteMany
   */
  export type ressources_eauDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ressources_eaus to delete
     */
    where?: ressources_eauWhereInput
    /**
     * Limit how many ressources_eaus to delete.
     */
    limit?: number
  }

  /**
   * ressources_eau without action
   */
  export type ressources_eauDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ressources_eau
     */
    select?: ressources_eauSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ressources_eau
     */
    omit?: ressources_eauOmit<ExtArgs> | null
  }


  /**
   * Model agriculture_bio
   */

  export type AggregateAgriculture_bio = {
    _count: Agriculture_bioCountAggregateOutputType | null
    _avg: Agriculture_bioAvgAggregateOutputType | null
    _sum: Agriculture_bioSumAggregateOutputType | null
    _min: Agriculture_bioMinAggregateOutputType | null
    _max: Agriculture_bioMaxAggregateOutputType | null
  }

  export type Agriculture_bioAvgAggregateOutputType = {
    index: number | null
    surface_2022: number | null
    surface_2021: number | null
    surface_2020: number | null
    surface_2019: number | null
    nombre_2022: number | null
    nombre_2021: number | null
    nombre_2020: number | null
    nombre_2019: number | null
  }

  export type Agriculture_bioSumAggregateOutputType = {
    index: bigint | null
    surface_2022: number | null
    surface_2021: number | null
    surface_2020: number | null
    surface_2019: number | null
    nombre_2022: number | null
    nombre_2021: number | null
    nombre_2020: number | null
    nombre_2019: number | null
  }

  export type Agriculture_bioMinAggregateOutputType = {
    index: bigint | null
    epci: string | null
    libelle_epci: string | null
    VARIABLE: string | null
    LIBELLE_SOUS_CHAMP: string | null
    surface_2022: number | null
    surface_2021: number | null
    surface_2020: number | null
    surface_2019: number | null
    nombre_2022: number | null
    nombre_2021: number | null
    nombre_2020: number | null
    nombre_2019: number | null
  }

  export type Agriculture_bioMaxAggregateOutputType = {
    index: bigint | null
    epci: string | null
    libelle_epci: string | null
    VARIABLE: string | null
    LIBELLE_SOUS_CHAMP: string | null
    surface_2022: number | null
    surface_2021: number | null
    surface_2020: number | null
    surface_2019: number | null
    nombre_2022: number | null
    nombre_2021: number | null
    nombre_2020: number | null
    nombre_2019: number | null
  }

  export type Agriculture_bioCountAggregateOutputType = {
    index: number
    epci: number
    libelle_epci: number
    VARIABLE: number
    LIBELLE_SOUS_CHAMP: number
    surface_2022: number
    surface_2021: number
    surface_2020: number
    surface_2019: number
    nombre_2022: number
    nombre_2021: number
    nombre_2020: number
    nombre_2019: number
    _all: number
  }


  export type Agriculture_bioAvgAggregateInputType = {
    index?: true
    surface_2022?: true
    surface_2021?: true
    surface_2020?: true
    surface_2019?: true
    nombre_2022?: true
    nombre_2021?: true
    nombre_2020?: true
    nombre_2019?: true
  }

  export type Agriculture_bioSumAggregateInputType = {
    index?: true
    surface_2022?: true
    surface_2021?: true
    surface_2020?: true
    surface_2019?: true
    nombre_2022?: true
    nombre_2021?: true
    nombre_2020?: true
    nombre_2019?: true
  }

  export type Agriculture_bioMinAggregateInputType = {
    index?: true
    epci?: true
    libelle_epci?: true
    VARIABLE?: true
    LIBELLE_SOUS_CHAMP?: true
    surface_2022?: true
    surface_2021?: true
    surface_2020?: true
    surface_2019?: true
    nombre_2022?: true
    nombre_2021?: true
    nombre_2020?: true
    nombre_2019?: true
  }

  export type Agriculture_bioMaxAggregateInputType = {
    index?: true
    epci?: true
    libelle_epci?: true
    VARIABLE?: true
    LIBELLE_SOUS_CHAMP?: true
    surface_2022?: true
    surface_2021?: true
    surface_2020?: true
    surface_2019?: true
    nombre_2022?: true
    nombre_2021?: true
    nombre_2020?: true
    nombre_2019?: true
  }

  export type Agriculture_bioCountAggregateInputType = {
    index?: true
    epci?: true
    libelle_epci?: true
    VARIABLE?: true
    LIBELLE_SOUS_CHAMP?: true
    surface_2022?: true
    surface_2021?: true
    surface_2020?: true
    surface_2019?: true
    nombre_2022?: true
    nombre_2021?: true
    nombre_2020?: true
    nombre_2019?: true
    _all?: true
  }

  export type Agriculture_bioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which agriculture_bio to aggregate.
     */
    where?: agriculture_bioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of agriculture_bios to fetch.
     */
    orderBy?: agriculture_bioOrderByWithRelationInput | agriculture_bioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: agriculture_bioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` agriculture_bios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` agriculture_bios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned agriculture_bios
    **/
    _count?: true | Agriculture_bioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Agriculture_bioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Agriculture_bioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Agriculture_bioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Agriculture_bioMaxAggregateInputType
  }

  export type GetAgriculture_bioAggregateType<T extends Agriculture_bioAggregateArgs> = {
        [P in keyof T & keyof AggregateAgriculture_bio]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAgriculture_bio[P]>
      : GetScalarType<T[P], AggregateAgriculture_bio[P]>
  }




  export type agriculture_bioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: agriculture_bioWhereInput
    orderBy?: agriculture_bioOrderByWithAggregationInput | agriculture_bioOrderByWithAggregationInput[]
    by: Agriculture_bioScalarFieldEnum[] | Agriculture_bioScalarFieldEnum
    having?: agriculture_bioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Agriculture_bioCountAggregateInputType | true
    _avg?: Agriculture_bioAvgAggregateInputType
    _sum?: Agriculture_bioSumAggregateInputType
    _min?: Agriculture_bioMinAggregateInputType
    _max?: Agriculture_bioMaxAggregateInputType
  }

  export type Agriculture_bioGroupByOutputType = {
    index: bigint
    epci: string
    libelle_epci: string
    VARIABLE: string
    LIBELLE_SOUS_CHAMP: string | null
    surface_2022: number
    surface_2021: number
    surface_2020: number
    surface_2019: number
    nombre_2022: number
    nombre_2021: number
    nombre_2020: number
    nombre_2019: number
    _count: Agriculture_bioCountAggregateOutputType | null
    _avg: Agriculture_bioAvgAggregateOutputType | null
    _sum: Agriculture_bioSumAggregateOutputType | null
    _min: Agriculture_bioMinAggregateOutputType | null
    _max: Agriculture_bioMaxAggregateOutputType | null
  }

  type GetAgriculture_bioGroupByPayload<T extends agriculture_bioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Agriculture_bioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Agriculture_bioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Agriculture_bioGroupByOutputType[P]>
            : GetScalarType<T[P], Agriculture_bioGroupByOutputType[P]>
        }
      >
    >


  export type agriculture_bioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    index?: boolean
    epci?: boolean
    libelle_epci?: boolean
    VARIABLE?: boolean
    LIBELLE_SOUS_CHAMP?: boolean
    surface_2022?: boolean
    surface_2021?: boolean
    surface_2020?: boolean
    surface_2019?: boolean
    nombre_2022?: boolean
    nombre_2021?: boolean
    nombre_2020?: boolean
    nombre_2019?: boolean
  }, ExtArgs["result"]["agriculture_bio"]>

  export type agriculture_bioSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    index?: boolean
    epci?: boolean
    libelle_epci?: boolean
    VARIABLE?: boolean
    LIBELLE_SOUS_CHAMP?: boolean
    surface_2022?: boolean
    surface_2021?: boolean
    surface_2020?: boolean
    surface_2019?: boolean
    nombre_2022?: boolean
    nombre_2021?: boolean
    nombre_2020?: boolean
    nombre_2019?: boolean
  }, ExtArgs["result"]["agriculture_bio"]>

  export type agriculture_bioSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    index?: boolean
    epci?: boolean
    libelle_epci?: boolean
    VARIABLE?: boolean
    LIBELLE_SOUS_CHAMP?: boolean
    surface_2022?: boolean
    surface_2021?: boolean
    surface_2020?: boolean
    surface_2019?: boolean
    nombre_2022?: boolean
    nombre_2021?: boolean
    nombre_2020?: boolean
    nombre_2019?: boolean
  }, ExtArgs["result"]["agriculture_bio"]>

  export type agriculture_bioSelectScalar = {
    index?: boolean
    epci?: boolean
    libelle_epci?: boolean
    VARIABLE?: boolean
    LIBELLE_SOUS_CHAMP?: boolean
    surface_2022?: boolean
    surface_2021?: boolean
    surface_2020?: boolean
    surface_2019?: boolean
    nombre_2022?: boolean
    nombre_2021?: boolean
    nombre_2020?: boolean
    nombre_2019?: boolean
  }

  export type agriculture_bioOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"index" | "epci" | "libelle_epci" | "VARIABLE" | "LIBELLE_SOUS_CHAMP" | "surface_2022" | "surface_2021" | "surface_2020" | "surface_2019" | "nombre_2022" | "nombre_2021" | "nombre_2020" | "nombre_2019", ExtArgs["result"]["agriculture_bio"]>

  export type $agriculture_bioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "agriculture_bio"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      index: bigint
      epci: string
      libelle_epci: string
      VARIABLE: string
      LIBELLE_SOUS_CHAMP: string | null
      surface_2022: number
      surface_2021: number
      surface_2020: number
      surface_2019: number
      nombre_2022: number
      nombre_2021: number
      nombre_2020: number
      nombre_2019: number
    }, ExtArgs["result"]["agriculture_bio"]>
    composites: {}
  }

  type agriculture_bioGetPayload<S extends boolean | null | undefined | agriculture_bioDefaultArgs> = $Result.GetResult<Prisma.$agriculture_bioPayload, S>

  type agriculture_bioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<agriculture_bioFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Agriculture_bioCountAggregateInputType | true
    }

  export interface agriculture_bioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['agriculture_bio'], meta: { name: 'agriculture_bio' } }
    /**
     * Find zero or one Agriculture_bio that matches the filter.
     * @param {agriculture_bioFindUniqueArgs} args - Arguments to find a Agriculture_bio
     * @example
     * // Get one Agriculture_bio
     * const agriculture_bio = await prisma.agriculture_bio.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends agriculture_bioFindUniqueArgs>(args: SelectSubset<T, agriculture_bioFindUniqueArgs<ExtArgs>>): Prisma__agriculture_bioClient<$Result.GetResult<Prisma.$agriculture_bioPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Agriculture_bio that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {agriculture_bioFindUniqueOrThrowArgs} args - Arguments to find a Agriculture_bio
     * @example
     * // Get one Agriculture_bio
     * const agriculture_bio = await prisma.agriculture_bio.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends agriculture_bioFindUniqueOrThrowArgs>(args: SelectSubset<T, agriculture_bioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__agriculture_bioClient<$Result.GetResult<Prisma.$agriculture_bioPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Agriculture_bio that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {agriculture_bioFindFirstArgs} args - Arguments to find a Agriculture_bio
     * @example
     * // Get one Agriculture_bio
     * const agriculture_bio = await prisma.agriculture_bio.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends agriculture_bioFindFirstArgs>(args?: SelectSubset<T, agriculture_bioFindFirstArgs<ExtArgs>>): Prisma__agriculture_bioClient<$Result.GetResult<Prisma.$agriculture_bioPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Agriculture_bio that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {agriculture_bioFindFirstOrThrowArgs} args - Arguments to find a Agriculture_bio
     * @example
     * // Get one Agriculture_bio
     * const agriculture_bio = await prisma.agriculture_bio.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends agriculture_bioFindFirstOrThrowArgs>(args?: SelectSubset<T, agriculture_bioFindFirstOrThrowArgs<ExtArgs>>): Prisma__agriculture_bioClient<$Result.GetResult<Prisma.$agriculture_bioPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Agriculture_bios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {agriculture_bioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Agriculture_bios
     * const agriculture_bios = await prisma.agriculture_bio.findMany()
     * 
     * // Get first 10 Agriculture_bios
     * const agriculture_bios = await prisma.agriculture_bio.findMany({ take: 10 })
     * 
     * // Only select the `index`
     * const agriculture_bioWithIndexOnly = await prisma.agriculture_bio.findMany({ select: { index: true } })
     * 
     */
    findMany<T extends agriculture_bioFindManyArgs>(args?: SelectSubset<T, agriculture_bioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$agriculture_bioPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Agriculture_bio.
     * @param {agriculture_bioCreateArgs} args - Arguments to create a Agriculture_bio.
     * @example
     * // Create one Agriculture_bio
     * const Agriculture_bio = await prisma.agriculture_bio.create({
     *   data: {
     *     // ... data to create a Agriculture_bio
     *   }
     * })
     * 
     */
    create<T extends agriculture_bioCreateArgs>(args: SelectSubset<T, agriculture_bioCreateArgs<ExtArgs>>): Prisma__agriculture_bioClient<$Result.GetResult<Prisma.$agriculture_bioPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Agriculture_bios.
     * @param {agriculture_bioCreateManyArgs} args - Arguments to create many Agriculture_bios.
     * @example
     * // Create many Agriculture_bios
     * const agriculture_bio = await prisma.agriculture_bio.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends agriculture_bioCreateManyArgs>(args?: SelectSubset<T, agriculture_bioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Agriculture_bios and returns the data saved in the database.
     * @param {agriculture_bioCreateManyAndReturnArgs} args - Arguments to create many Agriculture_bios.
     * @example
     * // Create many Agriculture_bios
     * const agriculture_bio = await prisma.agriculture_bio.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Agriculture_bios and only return the `index`
     * const agriculture_bioWithIndexOnly = await prisma.agriculture_bio.createManyAndReturn({
     *   select: { index: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends agriculture_bioCreateManyAndReturnArgs>(args?: SelectSubset<T, agriculture_bioCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$agriculture_bioPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Agriculture_bio.
     * @param {agriculture_bioDeleteArgs} args - Arguments to delete one Agriculture_bio.
     * @example
     * // Delete one Agriculture_bio
     * const Agriculture_bio = await prisma.agriculture_bio.delete({
     *   where: {
     *     // ... filter to delete one Agriculture_bio
     *   }
     * })
     * 
     */
    delete<T extends agriculture_bioDeleteArgs>(args: SelectSubset<T, agriculture_bioDeleteArgs<ExtArgs>>): Prisma__agriculture_bioClient<$Result.GetResult<Prisma.$agriculture_bioPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Agriculture_bio.
     * @param {agriculture_bioUpdateArgs} args - Arguments to update one Agriculture_bio.
     * @example
     * // Update one Agriculture_bio
     * const agriculture_bio = await prisma.agriculture_bio.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends agriculture_bioUpdateArgs>(args: SelectSubset<T, agriculture_bioUpdateArgs<ExtArgs>>): Prisma__agriculture_bioClient<$Result.GetResult<Prisma.$agriculture_bioPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Agriculture_bios.
     * @param {agriculture_bioDeleteManyArgs} args - Arguments to filter Agriculture_bios to delete.
     * @example
     * // Delete a few Agriculture_bios
     * const { count } = await prisma.agriculture_bio.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends agriculture_bioDeleteManyArgs>(args?: SelectSubset<T, agriculture_bioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Agriculture_bios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {agriculture_bioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Agriculture_bios
     * const agriculture_bio = await prisma.agriculture_bio.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends agriculture_bioUpdateManyArgs>(args: SelectSubset<T, agriculture_bioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Agriculture_bios and returns the data updated in the database.
     * @param {agriculture_bioUpdateManyAndReturnArgs} args - Arguments to update many Agriculture_bios.
     * @example
     * // Update many Agriculture_bios
     * const agriculture_bio = await prisma.agriculture_bio.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Agriculture_bios and only return the `index`
     * const agriculture_bioWithIndexOnly = await prisma.agriculture_bio.updateManyAndReturn({
     *   select: { index: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends agriculture_bioUpdateManyAndReturnArgs>(args: SelectSubset<T, agriculture_bioUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$agriculture_bioPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Agriculture_bio.
     * @param {agriculture_bioUpsertArgs} args - Arguments to update or create a Agriculture_bio.
     * @example
     * // Update or create a Agriculture_bio
     * const agriculture_bio = await prisma.agriculture_bio.upsert({
     *   create: {
     *     // ... data to create a Agriculture_bio
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Agriculture_bio we want to update
     *   }
     * })
     */
    upsert<T extends agriculture_bioUpsertArgs>(args: SelectSubset<T, agriculture_bioUpsertArgs<ExtArgs>>): Prisma__agriculture_bioClient<$Result.GetResult<Prisma.$agriculture_bioPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Agriculture_bios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {agriculture_bioCountArgs} args - Arguments to filter Agriculture_bios to count.
     * @example
     * // Count the number of Agriculture_bios
     * const count = await prisma.agriculture_bio.count({
     *   where: {
     *     // ... the filter for the Agriculture_bios we want to count
     *   }
     * })
    **/
    count<T extends agriculture_bioCountArgs>(
      args?: Subset<T, agriculture_bioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Agriculture_bioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Agriculture_bio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Agriculture_bioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Agriculture_bioAggregateArgs>(args: Subset<T, Agriculture_bioAggregateArgs>): Prisma.PrismaPromise<GetAgriculture_bioAggregateType<T>>

    /**
     * Group by Agriculture_bio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {agriculture_bioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends agriculture_bioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: agriculture_bioGroupByArgs['orderBy'] }
        : { orderBy?: agriculture_bioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, agriculture_bioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAgriculture_bioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the agriculture_bio model
   */
  readonly fields: agriculture_bioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for agriculture_bio.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__agriculture_bioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the agriculture_bio model
   */ 
  interface agriculture_bioFieldRefs {
    readonly index: FieldRef<"agriculture_bio", 'BigInt'>
    readonly epci: FieldRef<"agriculture_bio", 'String'>
    readonly libelle_epci: FieldRef<"agriculture_bio", 'String'>
    readonly VARIABLE: FieldRef<"agriculture_bio", 'String'>
    readonly LIBELLE_SOUS_CHAMP: FieldRef<"agriculture_bio", 'String'>
    readonly surface_2022: FieldRef<"agriculture_bio", 'Float'>
    readonly surface_2021: FieldRef<"agriculture_bio", 'Float'>
    readonly surface_2020: FieldRef<"agriculture_bio", 'Float'>
    readonly surface_2019: FieldRef<"agriculture_bio", 'Float'>
    readonly nombre_2022: FieldRef<"agriculture_bio", 'Float'>
    readonly nombre_2021: FieldRef<"agriculture_bio", 'Float'>
    readonly nombre_2020: FieldRef<"agriculture_bio", 'Float'>
    readonly nombre_2019: FieldRef<"agriculture_bio", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * agriculture_bio findUnique
   */
  export type agriculture_bioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the agriculture_bio
     */
    select?: agriculture_bioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the agriculture_bio
     */
    omit?: agriculture_bioOmit<ExtArgs> | null
    /**
     * Filter, which agriculture_bio to fetch.
     */
    where: agriculture_bioWhereUniqueInput
  }

  /**
   * agriculture_bio findUniqueOrThrow
   */
  export type agriculture_bioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the agriculture_bio
     */
    select?: agriculture_bioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the agriculture_bio
     */
    omit?: agriculture_bioOmit<ExtArgs> | null
    /**
     * Filter, which agriculture_bio to fetch.
     */
    where: agriculture_bioWhereUniqueInput
  }

  /**
   * agriculture_bio findFirst
   */
  export type agriculture_bioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the agriculture_bio
     */
    select?: agriculture_bioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the agriculture_bio
     */
    omit?: agriculture_bioOmit<ExtArgs> | null
    /**
     * Filter, which agriculture_bio to fetch.
     */
    where?: agriculture_bioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of agriculture_bios to fetch.
     */
    orderBy?: agriculture_bioOrderByWithRelationInput | agriculture_bioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for agriculture_bios.
     */
    cursor?: agriculture_bioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` agriculture_bios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` agriculture_bios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of agriculture_bios.
     */
    distinct?: Agriculture_bioScalarFieldEnum | Agriculture_bioScalarFieldEnum[]
  }

  /**
   * agriculture_bio findFirstOrThrow
   */
  export type agriculture_bioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the agriculture_bio
     */
    select?: agriculture_bioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the agriculture_bio
     */
    omit?: agriculture_bioOmit<ExtArgs> | null
    /**
     * Filter, which agriculture_bio to fetch.
     */
    where?: agriculture_bioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of agriculture_bios to fetch.
     */
    orderBy?: agriculture_bioOrderByWithRelationInput | agriculture_bioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for agriculture_bios.
     */
    cursor?: agriculture_bioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` agriculture_bios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` agriculture_bios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of agriculture_bios.
     */
    distinct?: Agriculture_bioScalarFieldEnum | Agriculture_bioScalarFieldEnum[]
  }

  /**
   * agriculture_bio findMany
   */
  export type agriculture_bioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the agriculture_bio
     */
    select?: agriculture_bioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the agriculture_bio
     */
    omit?: agriculture_bioOmit<ExtArgs> | null
    /**
     * Filter, which agriculture_bios to fetch.
     */
    where?: agriculture_bioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of agriculture_bios to fetch.
     */
    orderBy?: agriculture_bioOrderByWithRelationInput | agriculture_bioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing agriculture_bios.
     */
    cursor?: agriculture_bioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` agriculture_bios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` agriculture_bios.
     */
    skip?: number
    distinct?: Agriculture_bioScalarFieldEnum | Agriculture_bioScalarFieldEnum[]
  }

  /**
   * agriculture_bio create
   */
  export type agriculture_bioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the agriculture_bio
     */
    select?: agriculture_bioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the agriculture_bio
     */
    omit?: agriculture_bioOmit<ExtArgs> | null
    /**
     * The data needed to create a agriculture_bio.
     */
    data: XOR<agriculture_bioCreateInput, agriculture_bioUncheckedCreateInput>
  }

  /**
   * agriculture_bio createMany
   */
  export type agriculture_bioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many agriculture_bios.
     */
    data: agriculture_bioCreateManyInput | agriculture_bioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * agriculture_bio createManyAndReturn
   */
  export type agriculture_bioCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the agriculture_bio
     */
    select?: agriculture_bioSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the agriculture_bio
     */
    omit?: agriculture_bioOmit<ExtArgs> | null
    /**
     * The data used to create many agriculture_bios.
     */
    data: agriculture_bioCreateManyInput | agriculture_bioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * agriculture_bio update
   */
  export type agriculture_bioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the agriculture_bio
     */
    select?: agriculture_bioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the agriculture_bio
     */
    omit?: agriculture_bioOmit<ExtArgs> | null
    /**
     * The data needed to update a agriculture_bio.
     */
    data: XOR<agriculture_bioUpdateInput, agriculture_bioUncheckedUpdateInput>
    /**
     * Choose, which agriculture_bio to update.
     */
    where: agriculture_bioWhereUniqueInput
  }

  /**
   * agriculture_bio updateMany
   */
  export type agriculture_bioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update agriculture_bios.
     */
    data: XOR<agriculture_bioUpdateManyMutationInput, agriculture_bioUncheckedUpdateManyInput>
    /**
     * Filter which agriculture_bios to update
     */
    where?: agriculture_bioWhereInput
    /**
     * Limit how many agriculture_bios to update.
     */
    limit?: number
  }

  /**
   * agriculture_bio updateManyAndReturn
   */
  export type agriculture_bioUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the agriculture_bio
     */
    select?: agriculture_bioSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the agriculture_bio
     */
    omit?: agriculture_bioOmit<ExtArgs> | null
    /**
     * The data used to update agriculture_bios.
     */
    data: XOR<agriculture_bioUpdateManyMutationInput, agriculture_bioUncheckedUpdateManyInput>
    /**
     * Filter which agriculture_bios to update
     */
    where?: agriculture_bioWhereInput
    /**
     * Limit how many agriculture_bios to update.
     */
    limit?: number
  }

  /**
   * agriculture_bio upsert
   */
  export type agriculture_bioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the agriculture_bio
     */
    select?: agriculture_bioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the agriculture_bio
     */
    omit?: agriculture_bioOmit<ExtArgs> | null
    /**
     * The filter to search for the agriculture_bio to update in case it exists.
     */
    where: agriculture_bioWhereUniqueInput
    /**
     * In case the agriculture_bio found by the `where` argument doesn't exist, create a new agriculture_bio with this data.
     */
    create: XOR<agriculture_bioCreateInput, agriculture_bioUncheckedCreateInput>
    /**
     * In case the agriculture_bio was found with the provided `where` argument, update it with this data.
     */
    update: XOR<agriculture_bioUpdateInput, agriculture_bioUncheckedUpdateInput>
  }

  /**
   * agriculture_bio delete
   */
  export type agriculture_bioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the agriculture_bio
     */
    select?: agriculture_bioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the agriculture_bio
     */
    omit?: agriculture_bioOmit<ExtArgs> | null
    /**
     * Filter which agriculture_bio to delete.
     */
    where: agriculture_bioWhereUniqueInput
  }

  /**
   * agriculture_bio deleteMany
   */
  export type agriculture_bioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which agriculture_bios to delete
     */
    where?: agriculture_bioWhereInput
    /**
     * Limit how many agriculture_bios to delete.
     */
    limit?: number
  }

  /**
   * agriculture_bio without action
   */
  export type agriculture_bioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the agriculture_bio
     */
    select?: agriculture_bioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the agriculture_bio
     */
    omit?: agriculture_bioOmit<ExtArgs> | null
  }


  /**
   * Model erosion_cotiere
   */

  export type AggregateErosion_cotiere = {
    _count: Erosion_cotiereCountAggregateOutputType | null
    _avg: Erosion_cotiereAvgAggregateOutputType | null
    _sum: Erosion_cotiereSumAggregateOutputType | null
    _min: Erosion_cotiereMinAggregateOutputType | null
    _max: Erosion_cotiereMaxAggregateOutputType | null
  }

  export type Erosion_cotiereAvgAggregateOutputType = {
    pk: number | null
    taux: number | null
    duree: number | null
    tdc_ancien: number | null
    tdc_rec: number | null
  }

  export type Erosion_cotiereSumAggregateOutputType = {
    pk: number | null
    taux: number | null
    duree: number | null
    tdc_ancien: bigint | null
    tdc_rec: bigint | null
  }

  export type Erosion_cotiereMinAggregateOutputType = {
    pk: number | null
    taux: number | null
    duree: number | null
    tdc_ancien: bigint | null
    tdc_rec: bigint | null
  }

  export type Erosion_cotiereMaxAggregateOutputType = {
    pk: number | null
    taux: number | null
    duree: number | null
    tdc_ancien: bigint | null
    tdc_rec: bigint | null
  }

  export type Erosion_cotiereCountAggregateOutputType = {
    pk: number
    taux: number
    duree: number
    tdc_ancien: number
    tdc_rec: number
    _all: number
  }


  export type Erosion_cotiereAvgAggregateInputType = {
    pk?: true
    taux?: true
    duree?: true
    tdc_ancien?: true
    tdc_rec?: true
  }

  export type Erosion_cotiereSumAggregateInputType = {
    pk?: true
    taux?: true
    duree?: true
    tdc_ancien?: true
    tdc_rec?: true
  }

  export type Erosion_cotiereMinAggregateInputType = {
    pk?: true
    taux?: true
    duree?: true
    tdc_ancien?: true
    tdc_rec?: true
  }

  export type Erosion_cotiereMaxAggregateInputType = {
    pk?: true
    taux?: true
    duree?: true
    tdc_ancien?: true
    tdc_rec?: true
  }

  export type Erosion_cotiereCountAggregateInputType = {
    pk?: true
    taux?: true
    duree?: true
    tdc_ancien?: true
    tdc_rec?: true
    _all?: true
  }

  export type Erosion_cotiereAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which erosion_cotiere to aggregate.
     */
    where?: erosion_cotiereWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of erosion_cotieres to fetch.
     */
    orderBy?: erosion_cotiereOrderByWithRelationInput | erosion_cotiereOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: erosion_cotiereWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` erosion_cotieres from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` erosion_cotieres.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned erosion_cotieres
    **/
    _count?: true | Erosion_cotiereCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Erosion_cotiereAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Erosion_cotiereSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Erosion_cotiereMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Erosion_cotiereMaxAggregateInputType
  }

  export type GetErosion_cotiereAggregateType<T extends Erosion_cotiereAggregateArgs> = {
        [P in keyof T & keyof AggregateErosion_cotiere]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateErosion_cotiere[P]>
      : GetScalarType<T[P], AggregateErosion_cotiere[P]>
  }




  export type erosion_cotiereGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: erosion_cotiereWhereInput
    orderBy?: erosion_cotiereOrderByWithAggregationInput | erosion_cotiereOrderByWithAggregationInput[]
    by: Erosion_cotiereScalarFieldEnum[] | Erosion_cotiereScalarFieldEnum
    having?: erosion_cotiereScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Erosion_cotiereCountAggregateInputType | true
    _avg?: Erosion_cotiereAvgAggregateInputType
    _sum?: Erosion_cotiereSumAggregateInputType
    _min?: Erosion_cotiereMinAggregateInputType
    _max?: Erosion_cotiereMaxAggregateInputType
  }

  export type Erosion_cotiereGroupByOutputType = {
    pk: number
    taux: number
    duree: number
    tdc_ancien: bigint
    tdc_rec: bigint
    _count: Erosion_cotiereCountAggregateOutputType | null
    _avg: Erosion_cotiereAvgAggregateOutputType | null
    _sum: Erosion_cotiereSumAggregateOutputType | null
    _min: Erosion_cotiereMinAggregateOutputType | null
    _max: Erosion_cotiereMaxAggregateOutputType | null
  }

  type GetErosion_cotiereGroupByPayload<T extends erosion_cotiereGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Erosion_cotiereGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Erosion_cotiereGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Erosion_cotiereGroupByOutputType[P]>
            : GetScalarType<T[P], Erosion_cotiereGroupByOutputType[P]>
        }
      >
    >


  export type erosion_cotiereSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    pk?: boolean
    taux?: boolean
    duree?: boolean
    tdc_ancien?: boolean
    tdc_rec?: boolean
  }, ExtArgs["result"]["erosion_cotiere"]>


  export type erosion_cotiereSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    pk?: boolean
    taux?: boolean
    duree?: boolean
    tdc_ancien?: boolean
    tdc_rec?: boolean
  }, ExtArgs["result"]["erosion_cotiere"]>

  export type erosion_cotiereSelectScalar = {
    pk?: boolean
    taux?: boolean
    duree?: boolean
    tdc_ancien?: boolean
    tdc_rec?: boolean
  }

  export type erosion_cotiereOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"pk" | "taux" | "duree" | "tdc_ancien" | "tdc_rec", ExtArgs["result"]["erosion_cotiere"]>

  export type $erosion_cotierePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "erosion_cotiere"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      pk: number
      taux: number
      duree: number
      tdc_ancien: bigint
      tdc_rec: bigint
    }, ExtArgs["result"]["erosion_cotiere"]>
    composites: {}
  }

  type erosion_cotiereGetPayload<S extends boolean | null | undefined | erosion_cotiereDefaultArgs> = $Result.GetResult<Prisma.$erosion_cotierePayload, S>

  type erosion_cotiereCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<erosion_cotiereFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Erosion_cotiereCountAggregateInputType | true
    }

  export interface erosion_cotiereDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['erosion_cotiere'], meta: { name: 'erosion_cotiere' } }
    /**
     * Find zero or one Erosion_cotiere that matches the filter.
     * @param {erosion_cotiereFindUniqueArgs} args - Arguments to find a Erosion_cotiere
     * @example
     * // Get one Erosion_cotiere
     * const erosion_cotiere = await prisma.erosion_cotiere.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends erosion_cotiereFindUniqueArgs>(args: SelectSubset<T, erosion_cotiereFindUniqueArgs<ExtArgs>>): Prisma__erosion_cotiereClient<$Result.GetResult<Prisma.$erosion_cotierePayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Erosion_cotiere that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {erosion_cotiereFindUniqueOrThrowArgs} args - Arguments to find a Erosion_cotiere
     * @example
     * // Get one Erosion_cotiere
     * const erosion_cotiere = await prisma.erosion_cotiere.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends erosion_cotiereFindUniqueOrThrowArgs>(args: SelectSubset<T, erosion_cotiereFindUniqueOrThrowArgs<ExtArgs>>): Prisma__erosion_cotiereClient<$Result.GetResult<Prisma.$erosion_cotierePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Erosion_cotiere that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {erosion_cotiereFindFirstArgs} args - Arguments to find a Erosion_cotiere
     * @example
     * // Get one Erosion_cotiere
     * const erosion_cotiere = await prisma.erosion_cotiere.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends erosion_cotiereFindFirstArgs>(args?: SelectSubset<T, erosion_cotiereFindFirstArgs<ExtArgs>>): Prisma__erosion_cotiereClient<$Result.GetResult<Prisma.$erosion_cotierePayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Erosion_cotiere that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {erosion_cotiereFindFirstOrThrowArgs} args - Arguments to find a Erosion_cotiere
     * @example
     * // Get one Erosion_cotiere
     * const erosion_cotiere = await prisma.erosion_cotiere.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends erosion_cotiereFindFirstOrThrowArgs>(args?: SelectSubset<T, erosion_cotiereFindFirstOrThrowArgs<ExtArgs>>): Prisma__erosion_cotiereClient<$Result.GetResult<Prisma.$erosion_cotierePayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Erosion_cotieres that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {erosion_cotiereFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Erosion_cotieres
     * const erosion_cotieres = await prisma.erosion_cotiere.findMany()
     * 
     * // Get first 10 Erosion_cotieres
     * const erosion_cotieres = await prisma.erosion_cotiere.findMany({ take: 10 })
     * 
     * // Only select the `pk`
     * const erosion_cotiereWithPkOnly = await prisma.erosion_cotiere.findMany({ select: { pk: true } })
     * 
     */
    findMany<T extends erosion_cotiereFindManyArgs>(args?: SelectSubset<T, erosion_cotiereFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$erosion_cotierePayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Delete a Erosion_cotiere.
     * @param {erosion_cotiereDeleteArgs} args - Arguments to delete one Erosion_cotiere.
     * @example
     * // Delete one Erosion_cotiere
     * const Erosion_cotiere = await prisma.erosion_cotiere.delete({
     *   where: {
     *     // ... filter to delete one Erosion_cotiere
     *   }
     * })
     * 
     */
    delete<T extends erosion_cotiereDeleteArgs>(args: SelectSubset<T, erosion_cotiereDeleteArgs<ExtArgs>>): Prisma__erosion_cotiereClient<$Result.GetResult<Prisma.$erosion_cotierePayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Erosion_cotiere.
     * @param {erosion_cotiereUpdateArgs} args - Arguments to update one Erosion_cotiere.
     * @example
     * // Update one Erosion_cotiere
     * const erosion_cotiere = await prisma.erosion_cotiere.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends erosion_cotiereUpdateArgs>(args: SelectSubset<T, erosion_cotiereUpdateArgs<ExtArgs>>): Prisma__erosion_cotiereClient<$Result.GetResult<Prisma.$erosion_cotierePayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Erosion_cotieres.
     * @param {erosion_cotiereDeleteManyArgs} args - Arguments to filter Erosion_cotieres to delete.
     * @example
     * // Delete a few Erosion_cotieres
     * const { count } = await prisma.erosion_cotiere.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends erosion_cotiereDeleteManyArgs>(args?: SelectSubset<T, erosion_cotiereDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Erosion_cotieres.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {erosion_cotiereUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Erosion_cotieres
     * const erosion_cotiere = await prisma.erosion_cotiere.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends erosion_cotiereUpdateManyArgs>(args: SelectSubset<T, erosion_cotiereUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Erosion_cotieres and returns the data updated in the database.
     * @param {erosion_cotiereUpdateManyAndReturnArgs} args - Arguments to update many Erosion_cotieres.
     * @example
     * // Update many Erosion_cotieres
     * const erosion_cotiere = await prisma.erosion_cotiere.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Erosion_cotieres and only return the `pk`
     * const erosion_cotiereWithPkOnly = await prisma.erosion_cotiere.updateManyAndReturn({
     *   select: { pk: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends erosion_cotiereUpdateManyAndReturnArgs>(args: SelectSubset<T, erosion_cotiereUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$erosion_cotierePayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>


    /**
     * Count the number of Erosion_cotieres.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {erosion_cotiereCountArgs} args - Arguments to filter Erosion_cotieres to count.
     * @example
     * // Count the number of Erosion_cotieres
     * const count = await prisma.erosion_cotiere.count({
     *   where: {
     *     // ... the filter for the Erosion_cotieres we want to count
     *   }
     * })
    **/
    count<T extends erosion_cotiereCountArgs>(
      args?: Subset<T, erosion_cotiereCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Erosion_cotiereCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Erosion_cotiere.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Erosion_cotiereAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Erosion_cotiereAggregateArgs>(args: Subset<T, Erosion_cotiereAggregateArgs>): Prisma.PrismaPromise<GetErosion_cotiereAggregateType<T>>

    /**
     * Group by Erosion_cotiere.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {erosion_cotiereGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends erosion_cotiereGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: erosion_cotiereGroupByArgs['orderBy'] }
        : { orderBy?: erosion_cotiereGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, erosion_cotiereGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetErosion_cotiereGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the erosion_cotiere model
   */
  readonly fields: erosion_cotiereFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for erosion_cotiere.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__erosion_cotiereClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the erosion_cotiere model
   */ 
  interface erosion_cotiereFieldRefs {
    readonly pk: FieldRef<"erosion_cotiere", 'Int'>
    readonly taux: FieldRef<"erosion_cotiere", 'Float'>
    readonly duree: FieldRef<"erosion_cotiere", 'Float'>
    readonly tdc_ancien: FieldRef<"erosion_cotiere", 'BigInt'>
    readonly tdc_rec: FieldRef<"erosion_cotiere", 'BigInt'>
  }
    

  // Custom InputTypes
  /**
   * erosion_cotiere findUnique
   */
  export type erosion_cotiereFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the erosion_cotiere
     */
    select?: erosion_cotiereSelect<ExtArgs> | null
    /**
     * Omit specific fields from the erosion_cotiere
     */
    omit?: erosion_cotiereOmit<ExtArgs> | null
    /**
     * Filter, which erosion_cotiere to fetch.
     */
    where: erosion_cotiereWhereUniqueInput
  }

  /**
   * erosion_cotiere findUniqueOrThrow
   */
  export type erosion_cotiereFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the erosion_cotiere
     */
    select?: erosion_cotiereSelect<ExtArgs> | null
    /**
     * Omit specific fields from the erosion_cotiere
     */
    omit?: erosion_cotiereOmit<ExtArgs> | null
    /**
     * Filter, which erosion_cotiere to fetch.
     */
    where: erosion_cotiereWhereUniqueInput
  }

  /**
   * erosion_cotiere findFirst
   */
  export type erosion_cotiereFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the erosion_cotiere
     */
    select?: erosion_cotiereSelect<ExtArgs> | null
    /**
     * Omit specific fields from the erosion_cotiere
     */
    omit?: erosion_cotiereOmit<ExtArgs> | null
    /**
     * Filter, which erosion_cotiere to fetch.
     */
    where?: erosion_cotiereWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of erosion_cotieres to fetch.
     */
    orderBy?: erosion_cotiereOrderByWithRelationInput | erosion_cotiereOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for erosion_cotieres.
     */
    cursor?: erosion_cotiereWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` erosion_cotieres from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` erosion_cotieres.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of erosion_cotieres.
     */
    distinct?: Erosion_cotiereScalarFieldEnum | Erosion_cotiereScalarFieldEnum[]
  }

  /**
   * erosion_cotiere findFirstOrThrow
   */
  export type erosion_cotiereFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the erosion_cotiere
     */
    select?: erosion_cotiereSelect<ExtArgs> | null
    /**
     * Omit specific fields from the erosion_cotiere
     */
    omit?: erosion_cotiereOmit<ExtArgs> | null
    /**
     * Filter, which erosion_cotiere to fetch.
     */
    where?: erosion_cotiereWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of erosion_cotieres to fetch.
     */
    orderBy?: erosion_cotiereOrderByWithRelationInput | erosion_cotiereOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for erosion_cotieres.
     */
    cursor?: erosion_cotiereWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` erosion_cotieres from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` erosion_cotieres.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of erosion_cotieres.
     */
    distinct?: Erosion_cotiereScalarFieldEnum | Erosion_cotiereScalarFieldEnum[]
  }

  /**
   * erosion_cotiere findMany
   */
  export type erosion_cotiereFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the erosion_cotiere
     */
    select?: erosion_cotiereSelect<ExtArgs> | null
    /**
     * Omit specific fields from the erosion_cotiere
     */
    omit?: erosion_cotiereOmit<ExtArgs> | null
    /**
     * Filter, which erosion_cotieres to fetch.
     */
    where?: erosion_cotiereWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of erosion_cotieres to fetch.
     */
    orderBy?: erosion_cotiereOrderByWithRelationInput | erosion_cotiereOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing erosion_cotieres.
     */
    cursor?: erosion_cotiereWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` erosion_cotieres from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` erosion_cotieres.
     */
    skip?: number
    distinct?: Erosion_cotiereScalarFieldEnum | Erosion_cotiereScalarFieldEnum[]
  }

  /**
   * erosion_cotiere update
   */
  export type erosion_cotiereUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the erosion_cotiere
     */
    select?: erosion_cotiereSelect<ExtArgs> | null
    /**
     * Omit specific fields from the erosion_cotiere
     */
    omit?: erosion_cotiereOmit<ExtArgs> | null
    /**
     * The data needed to update a erosion_cotiere.
     */
    data: XOR<erosion_cotiereUpdateInput, erosion_cotiereUncheckedUpdateInput>
    /**
     * Choose, which erosion_cotiere to update.
     */
    where: erosion_cotiereWhereUniqueInput
  }

  /**
   * erosion_cotiere updateMany
   */
  export type erosion_cotiereUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update erosion_cotieres.
     */
    data: XOR<erosion_cotiereUpdateManyMutationInput, erosion_cotiereUncheckedUpdateManyInput>
    /**
     * Filter which erosion_cotieres to update
     */
    where?: erosion_cotiereWhereInput
    /**
     * Limit how many erosion_cotieres to update.
     */
    limit?: number
  }

  /**
   * erosion_cotiere updateManyAndReturn
   */
  export type erosion_cotiereUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the erosion_cotiere
     */
    select?: erosion_cotiereSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the erosion_cotiere
     */
    omit?: erosion_cotiereOmit<ExtArgs> | null
    /**
     * The data used to update erosion_cotieres.
     */
    data: XOR<erosion_cotiereUpdateManyMutationInput, erosion_cotiereUncheckedUpdateManyInput>
    /**
     * Filter which erosion_cotieres to update
     */
    where?: erosion_cotiereWhereInput
    /**
     * Limit how many erosion_cotieres to update.
     */
    limit?: number
  }

  /**
   * erosion_cotiere delete
   */
  export type erosion_cotiereDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the erosion_cotiere
     */
    select?: erosion_cotiereSelect<ExtArgs> | null
    /**
     * Omit specific fields from the erosion_cotiere
     */
    omit?: erosion_cotiereOmit<ExtArgs> | null
    /**
     * Filter which erosion_cotiere to delete.
     */
    where: erosion_cotiereWhereUniqueInput
  }

  /**
   * erosion_cotiere deleteMany
   */
  export type erosion_cotiereDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which erosion_cotieres to delete
     */
    where?: erosion_cotiereWhereInput
    /**
     * Limit how many erosion_cotieres to delete.
     */
    limit?: number
  }

  /**
   * erosion_cotiere without action
   */
  export type erosion_cotiereDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the erosion_cotiere
     */
    select?: erosion_cotiereSelect<ExtArgs> | null
    /**
     * Omit specific fields from the erosion_cotiere
     */
    omit?: erosion_cotiereOmit<ExtArgs> | null
  }


  /**
   * Model epci
   */

  export type AggregateEpci = {
    _count: EpciCountAggregateOutputType | null
    _avg: EpciAvgAggregateOutputType | null
    _sum: EpciSumAggregateOutputType | null
    _min: EpciMinAggregateOutputType | null
    _max: EpciMaxAggregateOutputType | null
  }

  export type EpciAvgAggregateOutputType = {
    pk: number | null
  }

  export type EpciSumAggregateOutputType = {
    pk: number | null
  }

  export type EpciMinAggregateOutputType = {
    pk: number | null
    epci_code: string | null
  }

  export type EpciMaxAggregateOutputType = {
    pk: number | null
    epci_code: string | null
  }

  export type EpciCountAggregateOutputType = {
    pk: number
    epci_code: number
    _all: number
  }


  export type EpciAvgAggregateInputType = {
    pk?: true
  }

  export type EpciSumAggregateInputType = {
    pk?: true
  }

  export type EpciMinAggregateInputType = {
    pk?: true
    epci_code?: true
  }

  export type EpciMaxAggregateInputType = {
    pk?: true
    epci_code?: true
  }

  export type EpciCountAggregateInputType = {
    pk?: true
    epci_code?: true
    _all?: true
  }

  export type EpciAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which epci to aggregate.
     */
    where?: epciWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of epcis to fetch.
     */
    orderBy?: epciOrderByWithRelationInput | epciOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: epciWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` epcis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` epcis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned epcis
    **/
    _count?: true | EpciCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EpciAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EpciSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EpciMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EpciMaxAggregateInputType
  }

  export type GetEpciAggregateType<T extends EpciAggregateArgs> = {
        [P in keyof T & keyof AggregateEpci]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEpci[P]>
      : GetScalarType<T[P], AggregateEpci[P]>
  }




  export type epciGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: epciWhereInput
    orderBy?: epciOrderByWithAggregationInput | epciOrderByWithAggregationInput[]
    by: EpciScalarFieldEnum[] | EpciScalarFieldEnum
    having?: epciScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EpciCountAggregateInputType | true
    _avg?: EpciAvgAggregateInputType
    _sum?: EpciSumAggregateInputType
    _min?: EpciMinAggregateInputType
    _max?: EpciMaxAggregateInputType
  }

  export type EpciGroupByOutputType = {
    pk: number
    epci_code: string
    _count: EpciCountAggregateOutputType | null
    _avg: EpciAvgAggregateOutputType | null
    _sum: EpciSumAggregateOutputType | null
    _min: EpciMinAggregateOutputType | null
    _max: EpciMaxAggregateOutputType | null
  }

  type GetEpciGroupByPayload<T extends epciGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EpciGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EpciGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EpciGroupByOutputType[P]>
            : GetScalarType<T[P], EpciGroupByOutputType[P]>
        }
      >
    >


  export type epciSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    pk?: boolean
    epci_code?: boolean
  }, ExtArgs["result"]["epci"]>


  export type epciSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    pk?: boolean
    epci_code?: boolean
  }, ExtArgs["result"]["epci"]>

  export type epciSelectScalar = {
    pk?: boolean
    epci_code?: boolean
  }

  export type epciOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"pk" | "epci_code", ExtArgs["result"]["epci"]>

  export type $epciPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "epci"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      pk: number
      epci_code: string
    }, ExtArgs["result"]["epci"]>
    composites: {}
  }

  type epciGetPayload<S extends boolean | null | undefined | epciDefaultArgs> = $Result.GetResult<Prisma.$epciPayload, S>

  type epciCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<epciFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EpciCountAggregateInputType | true
    }

  export interface epciDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['epci'], meta: { name: 'epci' } }
    /**
     * Find zero or one Epci that matches the filter.
     * @param {epciFindUniqueArgs} args - Arguments to find a Epci
     * @example
     * // Get one Epci
     * const epci = await prisma.epci.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends epciFindUniqueArgs>(args: SelectSubset<T, epciFindUniqueArgs<ExtArgs>>): Prisma__epciClient<$Result.GetResult<Prisma.$epciPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Epci that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {epciFindUniqueOrThrowArgs} args - Arguments to find a Epci
     * @example
     * // Get one Epci
     * const epci = await prisma.epci.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends epciFindUniqueOrThrowArgs>(args: SelectSubset<T, epciFindUniqueOrThrowArgs<ExtArgs>>): Prisma__epciClient<$Result.GetResult<Prisma.$epciPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Epci that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {epciFindFirstArgs} args - Arguments to find a Epci
     * @example
     * // Get one Epci
     * const epci = await prisma.epci.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends epciFindFirstArgs>(args?: SelectSubset<T, epciFindFirstArgs<ExtArgs>>): Prisma__epciClient<$Result.GetResult<Prisma.$epciPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Epci that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {epciFindFirstOrThrowArgs} args - Arguments to find a Epci
     * @example
     * // Get one Epci
     * const epci = await prisma.epci.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends epciFindFirstOrThrowArgs>(args?: SelectSubset<T, epciFindFirstOrThrowArgs<ExtArgs>>): Prisma__epciClient<$Result.GetResult<Prisma.$epciPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Epcis that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {epciFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Epcis
     * const epcis = await prisma.epci.findMany()
     * 
     * // Get first 10 Epcis
     * const epcis = await prisma.epci.findMany({ take: 10 })
     * 
     * // Only select the `pk`
     * const epciWithPkOnly = await prisma.epci.findMany({ select: { pk: true } })
     * 
     */
    findMany<T extends epciFindManyArgs>(args?: SelectSubset<T, epciFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$epciPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Delete a Epci.
     * @param {epciDeleteArgs} args - Arguments to delete one Epci.
     * @example
     * // Delete one Epci
     * const Epci = await prisma.epci.delete({
     *   where: {
     *     // ... filter to delete one Epci
     *   }
     * })
     * 
     */
    delete<T extends epciDeleteArgs>(args: SelectSubset<T, epciDeleteArgs<ExtArgs>>): Prisma__epciClient<$Result.GetResult<Prisma.$epciPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Epci.
     * @param {epciUpdateArgs} args - Arguments to update one Epci.
     * @example
     * // Update one Epci
     * const epci = await prisma.epci.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends epciUpdateArgs>(args: SelectSubset<T, epciUpdateArgs<ExtArgs>>): Prisma__epciClient<$Result.GetResult<Prisma.$epciPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Epcis.
     * @param {epciDeleteManyArgs} args - Arguments to filter Epcis to delete.
     * @example
     * // Delete a few Epcis
     * const { count } = await prisma.epci.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends epciDeleteManyArgs>(args?: SelectSubset<T, epciDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Epcis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {epciUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Epcis
     * const epci = await prisma.epci.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends epciUpdateManyArgs>(args: SelectSubset<T, epciUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Epcis and returns the data updated in the database.
     * @param {epciUpdateManyAndReturnArgs} args - Arguments to update many Epcis.
     * @example
     * // Update many Epcis
     * const epci = await prisma.epci.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Epcis and only return the `pk`
     * const epciWithPkOnly = await prisma.epci.updateManyAndReturn({
     *   select: { pk: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends epciUpdateManyAndReturnArgs>(args: SelectSubset<T, epciUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$epciPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>


    /**
     * Count the number of Epcis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {epciCountArgs} args - Arguments to filter Epcis to count.
     * @example
     * // Count the number of Epcis
     * const count = await prisma.epci.count({
     *   where: {
     *     // ... the filter for the Epcis we want to count
     *   }
     * })
    **/
    count<T extends epciCountArgs>(
      args?: Subset<T, epciCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EpciCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Epci.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EpciAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EpciAggregateArgs>(args: Subset<T, EpciAggregateArgs>): Prisma.PrismaPromise<GetEpciAggregateType<T>>

    /**
     * Group by Epci.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {epciGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends epciGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: epciGroupByArgs['orderBy'] }
        : { orderBy?: epciGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, epciGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEpciGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the epci model
   */
  readonly fields: epciFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for epci.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__epciClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the epci model
   */ 
  interface epciFieldRefs {
    readonly pk: FieldRef<"epci", 'Int'>
    readonly epci_code: FieldRef<"epci", 'String'>
  }
    

  // Custom InputTypes
  /**
   * epci findUnique
   */
  export type epciFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the epci
     */
    select?: epciSelect<ExtArgs> | null
    /**
     * Omit specific fields from the epci
     */
    omit?: epciOmit<ExtArgs> | null
    /**
     * Filter, which epci to fetch.
     */
    where: epciWhereUniqueInput
  }

  /**
   * epci findUniqueOrThrow
   */
  export type epciFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the epci
     */
    select?: epciSelect<ExtArgs> | null
    /**
     * Omit specific fields from the epci
     */
    omit?: epciOmit<ExtArgs> | null
    /**
     * Filter, which epci to fetch.
     */
    where: epciWhereUniqueInput
  }

  /**
   * epci findFirst
   */
  export type epciFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the epci
     */
    select?: epciSelect<ExtArgs> | null
    /**
     * Omit specific fields from the epci
     */
    omit?: epciOmit<ExtArgs> | null
    /**
     * Filter, which epci to fetch.
     */
    where?: epciWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of epcis to fetch.
     */
    orderBy?: epciOrderByWithRelationInput | epciOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for epcis.
     */
    cursor?: epciWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` epcis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` epcis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of epcis.
     */
    distinct?: EpciScalarFieldEnum | EpciScalarFieldEnum[]
  }

  /**
   * epci findFirstOrThrow
   */
  export type epciFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the epci
     */
    select?: epciSelect<ExtArgs> | null
    /**
     * Omit specific fields from the epci
     */
    omit?: epciOmit<ExtArgs> | null
    /**
     * Filter, which epci to fetch.
     */
    where?: epciWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of epcis to fetch.
     */
    orderBy?: epciOrderByWithRelationInput | epciOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for epcis.
     */
    cursor?: epciWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` epcis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` epcis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of epcis.
     */
    distinct?: EpciScalarFieldEnum | EpciScalarFieldEnum[]
  }

  /**
   * epci findMany
   */
  export type epciFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the epci
     */
    select?: epciSelect<ExtArgs> | null
    /**
     * Omit specific fields from the epci
     */
    omit?: epciOmit<ExtArgs> | null
    /**
     * Filter, which epcis to fetch.
     */
    where?: epciWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of epcis to fetch.
     */
    orderBy?: epciOrderByWithRelationInput | epciOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing epcis.
     */
    cursor?: epciWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` epcis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` epcis.
     */
    skip?: number
    distinct?: EpciScalarFieldEnum | EpciScalarFieldEnum[]
  }

  /**
   * epci update
   */
  export type epciUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the epci
     */
    select?: epciSelect<ExtArgs> | null
    /**
     * Omit specific fields from the epci
     */
    omit?: epciOmit<ExtArgs> | null
    /**
     * The data needed to update a epci.
     */
    data: XOR<epciUpdateInput, epciUncheckedUpdateInput>
    /**
     * Choose, which epci to update.
     */
    where: epciWhereUniqueInput
  }

  /**
   * epci updateMany
   */
  export type epciUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update epcis.
     */
    data: XOR<epciUpdateManyMutationInput, epciUncheckedUpdateManyInput>
    /**
     * Filter which epcis to update
     */
    where?: epciWhereInput
    /**
     * Limit how many epcis to update.
     */
    limit?: number
  }

  /**
   * epci updateManyAndReturn
   */
  export type epciUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the epci
     */
    select?: epciSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the epci
     */
    omit?: epciOmit<ExtArgs> | null
    /**
     * The data used to update epcis.
     */
    data: XOR<epciUpdateManyMutationInput, epciUncheckedUpdateManyInput>
    /**
     * Filter which epcis to update
     */
    where?: epciWhereInput
    /**
     * Limit how many epcis to update.
     */
    limit?: number
  }

  /**
   * epci delete
   */
  export type epciDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the epci
     */
    select?: epciSelect<ExtArgs> | null
    /**
     * Omit specific fields from the epci
     */
    omit?: epciOmit<ExtArgs> | null
    /**
     * Filter which epci to delete.
     */
    where: epciWhereUniqueInput
  }

  /**
   * epci deleteMany
   */
  export type epciDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which epcis to delete
     */
    where?: epciWhereInput
    /**
     * Limit how many epcis to delete.
     */
    limit?: number
  }

  /**
   * epci without action
   */
  export type epciDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the epci
     */
    select?: epciSelect<ExtArgs> | null
    /**
     * Omit specific fields from the epci
     */
    omit?: epciOmit<ExtArgs> | null
  }


  /**
   * Model surfaces_protegees
   */

  export type AggregateSurfaces_protegees = {
    _count: Surfaces_protegeesCountAggregateOutputType | null
    _avg: Surfaces_protegeesAvgAggregateOutputType | null
    _sum: Surfaces_protegeesSumAggregateOutputType | null
    _min: Surfaces_protegeesMinAggregateOutputType | null
    _max: Surfaces_protegeesMaxAggregateOutputType | null
  }

  export type Surfaces_protegeesAvgAggregateOutputType = {
    index: number | null
    region: number | null
  }

  export type Surfaces_protegeesSumAggregateOutputType = {
    index: bigint | null
    region: number | null
  }

  export type Surfaces_protegeesMinAggregateOutputType = {
    index: bigint | null
    code_geographique: string | null
    PNC: string | null
    RAMSAR: string | null
    PNR: string | null
    PNP: string | null
    FOR_PRO: string | null
    ZZZ: string | null
    ZNIEFF2: string | null
    ZNIEFF1: string | null
    RNR: string | null
    TOU_PRO: string | null
    NATURA: string | null
    ZPS: string | null
    SIC: string | null
    CELRL: string | null
    BIO: string | null
    APB: string | null
    RN: string | null
    RBFD: string | null
    RNCFS: string | null
    libelle_geographique: string | null
    epci: string | null
    libelle_epci: string | null
    departement: string | null
    region: number | null
  }

  export type Surfaces_protegeesMaxAggregateOutputType = {
    index: bigint | null
    code_geographique: string | null
    PNC: string | null
    RAMSAR: string | null
    PNR: string | null
    PNP: string | null
    FOR_PRO: string | null
    ZZZ: string | null
    ZNIEFF2: string | null
    ZNIEFF1: string | null
    RNR: string | null
    TOU_PRO: string | null
    NATURA: string | null
    ZPS: string | null
    SIC: string | null
    CELRL: string | null
    BIO: string | null
    APB: string | null
    RN: string | null
    RBFD: string | null
    RNCFS: string | null
    libelle_geographique: string | null
    epci: string | null
    libelle_epci: string | null
    departement: string | null
    region: number | null
  }

  export type Surfaces_protegeesCountAggregateOutputType = {
    index: number
    code_geographique: number
    PNC: number
    RAMSAR: number
    PNR: number
    PNP: number
    FOR_PRO: number
    ZZZ: number
    ZNIEFF2: number
    ZNIEFF1: number
    RNR: number
    TOU_PRO: number
    NATURA: number
    ZPS: number
    SIC: number
    CELRL: number
    BIO: number
    APB: number
    RN: number
    RBFD: number
    RNCFS: number
    libelle_geographique: number
    epci: number
    libelle_epci: number
    departement: number
    region: number
    _all: number
  }


  export type Surfaces_protegeesAvgAggregateInputType = {
    index?: true
    region?: true
  }

  export type Surfaces_protegeesSumAggregateInputType = {
    index?: true
    region?: true
  }

  export type Surfaces_protegeesMinAggregateInputType = {
    index?: true
    code_geographique?: true
    PNC?: true
    RAMSAR?: true
    PNR?: true
    PNP?: true
    FOR_PRO?: true
    ZZZ?: true
    ZNIEFF2?: true
    ZNIEFF1?: true
    RNR?: true
    TOU_PRO?: true
    NATURA?: true
    ZPS?: true
    SIC?: true
    CELRL?: true
    BIO?: true
    APB?: true
    RN?: true
    RBFD?: true
    RNCFS?: true
    libelle_geographique?: true
    epci?: true
    libelle_epci?: true
    departement?: true
    region?: true
  }

  export type Surfaces_protegeesMaxAggregateInputType = {
    index?: true
    code_geographique?: true
    PNC?: true
    RAMSAR?: true
    PNR?: true
    PNP?: true
    FOR_PRO?: true
    ZZZ?: true
    ZNIEFF2?: true
    ZNIEFF1?: true
    RNR?: true
    TOU_PRO?: true
    NATURA?: true
    ZPS?: true
    SIC?: true
    CELRL?: true
    BIO?: true
    APB?: true
    RN?: true
    RBFD?: true
    RNCFS?: true
    libelle_geographique?: true
    epci?: true
    libelle_epci?: true
    departement?: true
    region?: true
  }

  export type Surfaces_protegeesCountAggregateInputType = {
    index?: true
    code_geographique?: true
    PNC?: true
    RAMSAR?: true
    PNR?: true
    PNP?: true
    FOR_PRO?: true
    ZZZ?: true
    ZNIEFF2?: true
    ZNIEFF1?: true
    RNR?: true
    TOU_PRO?: true
    NATURA?: true
    ZPS?: true
    SIC?: true
    CELRL?: true
    BIO?: true
    APB?: true
    RN?: true
    RBFD?: true
    RNCFS?: true
    libelle_geographique?: true
    epci?: true
    libelle_epci?: true
    departement?: true
    region?: true
    _all?: true
  }

  export type Surfaces_protegeesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which surfaces_protegees to aggregate.
     */
    where?: surfaces_protegeesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of surfaces_protegees to fetch.
     */
    orderBy?: surfaces_protegeesOrderByWithRelationInput | surfaces_protegeesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: surfaces_protegeesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` surfaces_protegees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` surfaces_protegees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned surfaces_protegees
    **/
    _count?: true | Surfaces_protegeesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Surfaces_protegeesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Surfaces_protegeesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Surfaces_protegeesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Surfaces_protegeesMaxAggregateInputType
  }

  export type GetSurfaces_protegeesAggregateType<T extends Surfaces_protegeesAggregateArgs> = {
        [P in keyof T & keyof AggregateSurfaces_protegees]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSurfaces_protegees[P]>
      : GetScalarType<T[P], AggregateSurfaces_protegees[P]>
  }




  export type surfaces_protegeesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: surfaces_protegeesWhereInput
    orderBy?: surfaces_protegeesOrderByWithAggregationInput | surfaces_protegeesOrderByWithAggregationInput[]
    by: Surfaces_protegeesScalarFieldEnum[] | Surfaces_protegeesScalarFieldEnum
    having?: surfaces_protegeesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Surfaces_protegeesCountAggregateInputType | true
    _avg?: Surfaces_protegeesAvgAggregateInputType
    _sum?: Surfaces_protegeesSumAggregateInputType
    _min?: Surfaces_protegeesMinAggregateInputType
    _max?: Surfaces_protegeesMaxAggregateInputType
  }

  export type Surfaces_protegeesGroupByOutputType = {
    index: bigint
    code_geographique: string
    PNC: string | null
    RAMSAR: string | null
    PNR: string | null
    PNP: string | null
    FOR_PRO: string | null
    ZZZ: string | null
    ZNIEFF2: string | null
    ZNIEFF1: string | null
    RNR: string | null
    TOU_PRO: string | null
    NATURA: string | null
    ZPS: string | null
    SIC: string | null
    CELRL: string | null
    BIO: string | null
    APB: string | null
    RN: string | null
    RBFD: string | null
    RNCFS: string | null
    libelle_geographique: string
    epci: string
    libelle_epci: string
    departement: string
    region: number
    _count: Surfaces_protegeesCountAggregateOutputType | null
    _avg: Surfaces_protegeesAvgAggregateOutputType | null
    _sum: Surfaces_protegeesSumAggregateOutputType | null
    _min: Surfaces_protegeesMinAggregateOutputType | null
    _max: Surfaces_protegeesMaxAggregateOutputType | null
  }

  type GetSurfaces_protegeesGroupByPayload<T extends surfaces_protegeesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Surfaces_protegeesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Surfaces_protegeesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Surfaces_protegeesGroupByOutputType[P]>
            : GetScalarType<T[P], Surfaces_protegeesGroupByOutputType[P]>
        }
      >
    >


  export type surfaces_protegeesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    index?: boolean
    code_geographique?: boolean
    PNC?: boolean
    RAMSAR?: boolean
    PNR?: boolean
    PNP?: boolean
    FOR_PRO?: boolean
    ZZZ?: boolean
    ZNIEFF2?: boolean
    ZNIEFF1?: boolean
    RNR?: boolean
    TOU_PRO?: boolean
    NATURA?: boolean
    ZPS?: boolean
    SIC?: boolean
    CELRL?: boolean
    BIO?: boolean
    APB?: boolean
    RN?: boolean
    RBFD?: boolean
    RNCFS?: boolean
    libelle_geographique?: boolean
    epci?: boolean
    libelle_epci?: boolean
    departement?: boolean
    region?: boolean
  }, ExtArgs["result"]["surfaces_protegees"]>

  export type surfaces_protegeesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    index?: boolean
    code_geographique?: boolean
    PNC?: boolean
    RAMSAR?: boolean
    PNR?: boolean
    PNP?: boolean
    FOR_PRO?: boolean
    ZZZ?: boolean
    ZNIEFF2?: boolean
    ZNIEFF1?: boolean
    RNR?: boolean
    TOU_PRO?: boolean
    NATURA?: boolean
    ZPS?: boolean
    SIC?: boolean
    CELRL?: boolean
    BIO?: boolean
    APB?: boolean
    RN?: boolean
    RBFD?: boolean
    RNCFS?: boolean
    libelle_geographique?: boolean
    epci?: boolean
    libelle_epci?: boolean
    departement?: boolean
    region?: boolean
  }, ExtArgs["result"]["surfaces_protegees"]>

  export type surfaces_protegeesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    index?: boolean
    code_geographique?: boolean
    PNC?: boolean
    RAMSAR?: boolean
    PNR?: boolean
    PNP?: boolean
    FOR_PRO?: boolean
    ZZZ?: boolean
    ZNIEFF2?: boolean
    ZNIEFF1?: boolean
    RNR?: boolean
    TOU_PRO?: boolean
    NATURA?: boolean
    ZPS?: boolean
    SIC?: boolean
    CELRL?: boolean
    BIO?: boolean
    APB?: boolean
    RN?: boolean
    RBFD?: boolean
    RNCFS?: boolean
    libelle_geographique?: boolean
    epci?: boolean
    libelle_epci?: boolean
    departement?: boolean
    region?: boolean
  }, ExtArgs["result"]["surfaces_protegees"]>

  export type surfaces_protegeesSelectScalar = {
    index?: boolean
    code_geographique?: boolean
    PNC?: boolean
    RAMSAR?: boolean
    PNR?: boolean
    PNP?: boolean
    FOR_PRO?: boolean
    ZZZ?: boolean
    ZNIEFF2?: boolean
    ZNIEFF1?: boolean
    RNR?: boolean
    TOU_PRO?: boolean
    NATURA?: boolean
    ZPS?: boolean
    SIC?: boolean
    CELRL?: boolean
    BIO?: boolean
    APB?: boolean
    RN?: boolean
    RBFD?: boolean
    RNCFS?: boolean
    libelle_geographique?: boolean
    epci?: boolean
    libelle_epci?: boolean
    departement?: boolean
    region?: boolean
  }

  export type surfaces_protegeesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"index" | "code_geographique" | "PNC" | "RAMSAR" | "PNR" | "PNP" | "FOR_PRO" | "ZZZ" | "ZNIEFF2" | "ZNIEFF1" | "RNR" | "TOU_PRO" | "NATURA" | "ZPS" | "SIC" | "CELRL" | "BIO" | "APB" | "RN" | "RBFD" | "RNCFS" | "libelle_geographique" | "epci" | "libelle_epci" | "departement" | "region", ExtArgs["result"]["surfaces_protegees"]>

  export type $surfaces_protegeesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "surfaces_protegees"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      index: bigint
      code_geographique: string
      PNC: string | null
      RAMSAR: string | null
      PNR: string | null
      PNP: string | null
      FOR_PRO: string | null
      ZZZ: string | null
      ZNIEFF2: string | null
      ZNIEFF1: string | null
      RNR: string | null
      TOU_PRO: string | null
      NATURA: string | null
      ZPS: string | null
      SIC: string | null
      CELRL: string | null
      BIO: string | null
      APB: string | null
      RN: string | null
      RBFD: string | null
      RNCFS: string | null
      libelle_geographique: string
      epci: string
      libelle_epci: string
      departement: string
      region: number
    }, ExtArgs["result"]["surfaces_protegees"]>
    composites: {}
  }

  type surfaces_protegeesGetPayload<S extends boolean | null | undefined | surfaces_protegeesDefaultArgs> = $Result.GetResult<Prisma.$surfaces_protegeesPayload, S>

  type surfaces_protegeesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<surfaces_protegeesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Surfaces_protegeesCountAggregateInputType | true
    }

  export interface surfaces_protegeesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['surfaces_protegees'], meta: { name: 'surfaces_protegees' } }
    /**
     * Find zero or one Surfaces_protegees that matches the filter.
     * @param {surfaces_protegeesFindUniqueArgs} args - Arguments to find a Surfaces_protegees
     * @example
     * // Get one Surfaces_protegees
     * const surfaces_protegees = await prisma.surfaces_protegees.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends surfaces_protegeesFindUniqueArgs>(args: SelectSubset<T, surfaces_protegeesFindUniqueArgs<ExtArgs>>): Prisma__surfaces_protegeesClient<$Result.GetResult<Prisma.$surfaces_protegeesPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Surfaces_protegees that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {surfaces_protegeesFindUniqueOrThrowArgs} args - Arguments to find a Surfaces_protegees
     * @example
     * // Get one Surfaces_protegees
     * const surfaces_protegees = await prisma.surfaces_protegees.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends surfaces_protegeesFindUniqueOrThrowArgs>(args: SelectSubset<T, surfaces_protegeesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__surfaces_protegeesClient<$Result.GetResult<Prisma.$surfaces_protegeesPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Surfaces_protegees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {surfaces_protegeesFindFirstArgs} args - Arguments to find a Surfaces_protegees
     * @example
     * // Get one Surfaces_protegees
     * const surfaces_protegees = await prisma.surfaces_protegees.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends surfaces_protegeesFindFirstArgs>(args?: SelectSubset<T, surfaces_protegeesFindFirstArgs<ExtArgs>>): Prisma__surfaces_protegeesClient<$Result.GetResult<Prisma.$surfaces_protegeesPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Surfaces_protegees that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {surfaces_protegeesFindFirstOrThrowArgs} args - Arguments to find a Surfaces_protegees
     * @example
     * // Get one Surfaces_protegees
     * const surfaces_protegees = await prisma.surfaces_protegees.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends surfaces_protegeesFindFirstOrThrowArgs>(args?: SelectSubset<T, surfaces_protegeesFindFirstOrThrowArgs<ExtArgs>>): Prisma__surfaces_protegeesClient<$Result.GetResult<Prisma.$surfaces_protegeesPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Surfaces_protegees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {surfaces_protegeesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Surfaces_protegees
     * const surfaces_protegees = await prisma.surfaces_protegees.findMany()
     * 
     * // Get first 10 Surfaces_protegees
     * const surfaces_protegees = await prisma.surfaces_protegees.findMany({ take: 10 })
     * 
     * // Only select the `index`
     * const surfaces_protegeesWithIndexOnly = await prisma.surfaces_protegees.findMany({ select: { index: true } })
     * 
     */
    findMany<T extends surfaces_protegeesFindManyArgs>(args?: SelectSubset<T, surfaces_protegeesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$surfaces_protegeesPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Surfaces_protegees.
     * @param {surfaces_protegeesCreateArgs} args - Arguments to create a Surfaces_protegees.
     * @example
     * // Create one Surfaces_protegees
     * const Surfaces_protegees = await prisma.surfaces_protegees.create({
     *   data: {
     *     // ... data to create a Surfaces_protegees
     *   }
     * })
     * 
     */
    create<T extends surfaces_protegeesCreateArgs>(args: SelectSubset<T, surfaces_protegeesCreateArgs<ExtArgs>>): Prisma__surfaces_protegeesClient<$Result.GetResult<Prisma.$surfaces_protegeesPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Surfaces_protegees.
     * @param {surfaces_protegeesCreateManyArgs} args - Arguments to create many Surfaces_protegees.
     * @example
     * // Create many Surfaces_protegees
     * const surfaces_protegees = await prisma.surfaces_protegees.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends surfaces_protegeesCreateManyArgs>(args?: SelectSubset<T, surfaces_protegeesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Surfaces_protegees and returns the data saved in the database.
     * @param {surfaces_protegeesCreateManyAndReturnArgs} args - Arguments to create many Surfaces_protegees.
     * @example
     * // Create many Surfaces_protegees
     * const surfaces_protegees = await prisma.surfaces_protegees.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Surfaces_protegees and only return the `index`
     * const surfaces_protegeesWithIndexOnly = await prisma.surfaces_protegees.createManyAndReturn({
     *   select: { index: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends surfaces_protegeesCreateManyAndReturnArgs>(args?: SelectSubset<T, surfaces_protegeesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$surfaces_protegeesPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Surfaces_protegees.
     * @param {surfaces_protegeesDeleteArgs} args - Arguments to delete one Surfaces_protegees.
     * @example
     * // Delete one Surfaces_protegees
     * const Surfaces_protegees = await prisma.surfaces_protegees.delete({
     *   where: {
     *     // ... filter to delete one Surfaces_protegees
     *   }
     * })
     * 
     */
    delete<T extends surfaces_protegeesDeleteArgs>(args: SelectSubset<T, surfaces_protegeesDeleteArgs<ExtArgs>>): Prisma__surfaces_protegeesClient<$Result.GetResult<Prisma.$surfaces_protegeesPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Surfaces_protegees.
     * @param {surfaces_protegeesUpdateArgs} args - Arguments to update one Surfaces_protegees.
     * @example
     * // Update one Surfaces_protegees
     * const surfaces_protegees = await prisma.surfaces_protegees.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends surfaces_protegeesUpdateArgs>(args: SelectSubset<T, surfaces_protegeesUpdateArgs<ExtArgs>>): Prisma__surfaces_protegeesClient<$Result.GetResult<Prisma.$surfaces_protegeesPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Surfaces_protegees.
     * @param {surfaces_protegeesDeleteManyArgs} args - Arguments to filter Surfaces_protegees to delete.
     * @example
     * // Delete a few Surfaces_protegees
     * const { count } = await prisma.surfaces_protegees.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends surfaces_protegeesDeleteManyArgs>(args?: SelectSubset<T, surfaces_protegeesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Surfaces_protegees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {surfaces_protegeesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Surfaces_protegees
     * const surfaces_protegees = await prisma.surfaces_protegees.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends surfaces_protegeesUpdateManyArgs>(args: SelectSubset<T, surfaces_protegeesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Surfaces_protegees and returns the data updated in the database.
     * @param {surfaces_protegeesUpdateManyAndReturnArgs} args - Arguments to update many Surfaces_protegees.
     * @example
     * // Update many Surfaces_protegees
     * const surfaces_protegees = await prisma.surfaces_protegees.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Surfaces_protegees and only return the `index`
     * const surfaces_protegeesWithIndexOnly = await prisma.surfaces_protegees.updateManyAndReturn({
     *   select: { index: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends surfaces_protegeesUpdateManyAndReturnArgs>(args: SelectSubset<T, surfaces_protegeesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$surfaces_protegeesPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Surfaces_protegees.
     * @param {surfaces_protegeesUpsertArgs} args - Arguments to update or create a Surfaces_protegees.
     * @example
     * // Update or create a Surfaces_protegees
     * const surfaces_protegees = await prisma.surfaces_protegees.upsert({
     *   create: {
     *     // ... data to create a Surfaces_protegees
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Surfaces_protegees we want to update
     *   }
     * })
     */
    upsert<T extends surfaces_protegeesUpsertArgs>(args: SelectSubset<T, surfaces_protegeesUpsertArgs<ExtArgs>>): Prisma__surfaces_protegeesClient<$Result.GetResult<Prisma.$surfaces_protegeesPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Surfaces_protegees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {surfaces_protegeesCountArgs} args - Arguments to filter Surfaces_protegees to count.
     * @example
     * // Count the number of Surfaces_protegees
     * const count = await prisma.surfaces_protegees.count({
     *   where: {
     *     // ... the filter for the Surfaces_protegees we want to count
     *   }
     * })
    **/
    count<T extends surfaces_protegeesCountArgs>(
      args?: Subset<T, surfaces_protegeesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Surfaces_protegeesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Surfaces_protegees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Surfaces_protegeesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Surfaces_protegeesAggregateArgs>(args: Subset<T, Surfaces_protegeesAggregateArgs>): Prisma.PrismaPromise<GetSurfaces_protegeesAggregateType<T>>

    /**
     * Group by Surfaces_protegees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {surfaces_protegeesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends surfaces_protegeesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: surfaces_protegeesGroupByArgs['orderBy'] }
        : { orderBy?: surfaces_protegeesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, surfaces_protegeesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSurfaces_protegeesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the surfaces_protegees model
   */
  readonly fields: surfaces_protegeesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for surfaces_protegees.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__surfaces_protegeesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the surfaces_protegees model
   */ 
  interface surfaces_protegeesFieldRefs {
    readonly index: FieldRef<"surfaces_protegees", 'BigInt'>
    readonly code_geographique: FieldRef<"surfaces_protegees", 'String'>
    readonly PNC: FieldRef<"surfaces_protegees", 'String'>
    readonly RAMSAR: FieldRef<"surfaces_protegees", 'String'>
    readonly PNR: FieldRef<"surfaces_protegees", 'String'>
    readonly PNP: FieldRef<"surfaces_protegees", 'String'>
    readonly FOR_PRO: FieldRef<"surfaces_protegees", 'String'>
    readonly ZZZ: FieldRef<"surfaces_protegees", 'String'>
    readonly ZNIEFF2: FieldRef<"surfaces_protegees", 'String'>
    readonly ZNIEFF1: FieldRef<"surfaces_protegees", 'String'>
    readonly RNR: FieldRef<"surfaces_protegees", 'String'>
    readonly TOU_PRO: FieldRef<"surfaces_protegees", 'String'>
    readonly NATURA: FieldRef<"surfaces_protegees", 'String'>
    readonly ZPS: FieldRef<"surfaces_protegees", 'String'>
    readonly SIC: FieldRef<"surfaces_protegees", 'String'>
    readonly CELRL: FieldRef<"surfaces_protegees", 'String'>
    readonly BIO: FieldRef<"surfaces_protegees", 'String'>
    readonly APB: FieldRef<"surfaces_protegees", 'String'>
    readonly RN: FieldRef<"surfaces_protegees", 'String'>
    readonly RBFD: FieldRef<"surfaces_protegees", 'String'>
    readonly RNCFS: FieldRef<"surfaces_protegees", 'String'>
    readonly libelle_geographique: FieldRef<"surfaces_protegees", 'String'>
    readonly epci: FieldRef<"surfaces_protegees", 'String'>
    readonly libelle_epci: FieldRef<"surfaces_protegees", 'String'>
    readonly departement: FieldRef<"surfaces_protegees", 'String'>
    readonly region: FieldRef<"surfaces_protegees", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * surfaces_protegees findUnique
   */
  export type surfaces_protegeesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the surfaces_protegees
     */
    select?: surfaces_protegeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the surfaces_protegees
     */
    omit?: surfaces_protegeesOmit<ExtArgs> | null
    /**
     * Filter, which surfaces_protegees to fetch.
     */
    where: surfaces_protegeesWhereUniqueInput
  }

  /**
   * surfaces_protegees findUniqueOrThrow
   */
  export type surfaces_protegeesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the surfaces_protegees
     */
    select?: surfaces_protegeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the surfaces_protegees
     */
    omit?: surfaces_protegeesOmit<ExtArgs> | null
    /**
     * Filter, which surfaces_protegees to fetch.
     */
    where: surfaces_protegeesWhereUniqueInput
  }

  /**
   * surfaces_protegees findFirst
   */
  export type surfaces_protegeesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the surfaces_protegees
     */
    select?: surfaces_protegeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the surfaces_protegees
     */
    omit?: surfaces_protegeesOmit<ExtArgs> | null
    /**
     * Filter, which surfaces_protegees to fetch.
     */
    where?: surfaces_protegeesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of surfaces_protegees to fetch.
     */
    orderBy?: surfaces_protegeesOrderByWithRelationInput | surfaces_protegeesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for surfaces_protegees.
     */
    cursor?: surfaces_protegeesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` surfaces_protegees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` surfaces_protegees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of surfaces_protegees.
     */
    distinct?: Surfaces_protegeesScalarFieldEnum | Surfaces_protegeesScalarFieldEnum[]
  }

  /**
   * surfaces_protegees findFirstOrThrow
   */
  export type surfaces_protegeesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the surfaces_protegees
     */
    select?: surfaces_protegeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the surfaces_protegees
     */
    omit?: surfaces_protegeesOmit<ExtArgs> | null
    /**
     * Filter, which surfaces_protegees to fetch.
     */
    where?: surfaces_protegeesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of surfaces_protegees to fetch.
     */
    orderBy?: surfaces_protegeesOrderByWithRelationInput | surfaces_protegeesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for surfaces_protegees.
     */
    cursor?: surfaces_protegeesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` surfaces_protegees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` surfaces_protegees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of surfaces_protegees.
     */
    distinct?: Surfaces_protegeesScalarFieldEnum | Surfaces_protegeesScalarFieldEnum[]
  }

  /**
   * surfaces_protegees findMany
   */
  export type surfaces_protegeesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the surfaces_protegees
     */
    select?: surfaces_protegeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the surfaces_protegees
     */
    omit?: surfaces_protegeesOmit<ExtArgs> | null
    /**
     * Filter, which surfaces_protegees to fetch.
     */
    where?: surfaces_protegeesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of surfaces_protegees to fetch.
     */
    orderBy?: surfaces_protegeesOrderByWithRelationInput | surfaces_protegeesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing surfaces_protegees.
     */
    cursor?: surfaces_protegeesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` surfaces_protegees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` surfaces_protegees.
     */
    skip?: number
    distinct?: Surfaces_protegeesScalarFieldEnum | Surfaces_protegeesScalarFieldEnum[]
  }

  /**
   * surfaces_protegees create
   */
  export type surfaces_protegeesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the surfaces_protegees
     */
    select?: surfaces_protegeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the surfaces_protegees
     */
    omit?: surfaces_protegeesOmit<ExtArgs> | null
    /**
     * The data needed to create a surfaces_protegees.
     */
    data: XOR<surfaces_protegeesCreateInput, surfaces_protegeesUncheckedCreateInput>
  }

  /**
   * surfaces_protegees createMany
   */
  export type surfaces_protegeesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many surfaces_protegees.
     */
    data: surfaces_protegeesCreateManyInput | surfaces_protegeesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * surfaces_protegees createManyAndReturn
   */
  export type surfaces_protegeesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the surfaces_protegees
     */
    select?: surfaces_protegeesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the surfaces_protegees
     */
    omit?: surfaces_protegeesOmit<ExtArgs> | null
    /**
     * The data used to create many surfaces_protegees.
     */
    data: surfaces_protegeesCreateManyInput | surfaces_protegeesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * surfaces_protegees update
   */
  export type surfaces_protegeesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the surfaces_protegees
     */
    select?: surfaces_protegeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the surfaces_protegees
     */
    omit?: surfaces_protegeesOmit<ExtArgs> | null
    /**
     * The data needed to update a surfaces_protegees.
     */
    data: XOR<surfaces_protegeesUpdateInput, surfaces_protegeesUncheckedUpdateInput>
    /**
     * Choose, which surfaces_protegees to update.
     */
    where: surfaces_protegeesWhereUniqueInput
  }

  /**
   * surfaces_protegees updateMany
   */
  export type surfaces_protegeesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update surfaces_protegees.
     */
    data: XOR<surfaces_protegeesUpdateManyMutationInput, surfaces_protegeesUncheckedUpdateManyInput>
    /**
     * Filter which surfaces_protegees to update
     */
    where?: surfaces_protegeesWhereInput
    /**
     * Limit how many surfaces_protegees to update.
     */
    limit?: number
  }

  /**
   * surfaces_protegees updateManyAndReturn
   */
  export type surfaces_protegeesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the surfaces_protegees
     */
    select?: surfaces_protegeesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the surfaces_protegees
     */
    omit?: surfaces_protegeesOmit<ExtArgs> | null
    /**
     * The data used to update surfaces_protegees.
     */
    data: XOR<surfaces_protegeesUpdateManyMutationInput, surfaces_protegeesUncheckedUpdateManyInput>
    /**
     * Filter which surfaces_protegees to update
     */
    where?: surfaces_protegeesWhereInput
    /**
     * Limit how many surfaces_protegees to update.
     */
    limit?: number
  }

  /**
   * surfaces_protegees upsert
   */
  export type surfaces_protegeesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the surfaces_protegees
     */
    select?: surfaces_protegeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the surfaces_protegees
     */
    omit?: surfaces_protegeesOmit<ExtArgs> | null
    /**
     * The filter to search for the surfaces_protegees to update in case it exists.
     */
    where: surfaces_protegeesWhereUniqueInput
    /**
     * In case the surfaces_protegees found by the `where` argument doesn't exist, create a new surfaces_protegees with this data.
     */
    create: XOR<surfaces_protegeesCreateInput, surfaces_protegeesUncheckedCreateInput>
    /**
     * In case the surfaces_protegees was found with the provided `where` argument, update it with this data.
     */
    update: XOR<surfaces_protegeesUpdateInput, surfaces_protegeesUncheckedUpdateInput>
  }

  /**
   * surfaces_protegees delete
   */
  export type surfaces_protegeesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the surfaces_protegees
     */
    select?: surfaces_protegeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the surfaces_protegees
     */
    omit?: surfaces_protegeesOmit<ExtArgs> | null
    /**
     * Filter which surfaces_protegees to delete.
     */
    where: surfaces_protegeesWhereUniqueInput
  }

  /**
   * surfaces_protegees deleteMany
   */
  export type surfaces_protegeesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which surfaces_protegees to delete
     */
    where?: surfaces_protegeesWhereInput
    /**
     * Limit how many surfaces_protegees to delete.
     */
    limit?: number
  }

  /**
   * surfaces_protegees without action
   */
  export type surfaces_protegeesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the surfaces_protegees
     */
    select?: surfaces_protegeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the surfaces_protegees
     */
    omit?: surfaces_protegeesOmit<ExtArgs> | null
  }


  /**
   * Model consommation_espaces_naf
   */

  export type AggregateConsommation_espaces_naf = {
    _count: Consommation_espaces_nafCountAggregateOutputType | null
    _avg: Consommation_espaces_nafAvgAggregateOutputType | null
    _sum: Consommation_espaces_nafSumAggregateOutputType | null
    _min: Consommation_espaces_nafMinAggregateOutputType | null
    _max: Consommation_espaces_nafMaxAggregateOutputType | null
  }

  export type Consommation_espaces_nafAvgAggregateOutputType = {
    index: number | null
    region: number | null
    naf09art10: number | null
    art09act10: number | null
    art09hab10: number | null
    art09mix10: number | null
    art09rou10: number | null
    art09fer10: number | null
    art09inc10: number | null
    naf10art11: number | null
    art10act11: number | null
    art10hab11: number | null
    art10mix11: number | null
    art10rou11: number | null
    art10fer11: number | null
    art10inc11: number | null
    naf11art12: number | null
    art11act12: number | null
    art11hab12: number | null
    art11mix12: number | null
    art11rou12: number | null
    art11fer12: number | null
    art11inc12: number | null
    naf12art13: number | null
    art12act13: number | null
    art12hab13: number | null
    art12mix13: number | null
    art12rou13: number | null
    art12fer13: number | null
    art12inc13: number | null
    naf13art14: number | null
    art13act14: number | null
    art13hab14: number | null
    art13mix14: number | null
    art13rou14: number | null
    art13fer14: number | null
    art13inc14: number | null
    naf14art15: number | null
    art14act15: number | null
    art14hab15: number | null
    art14mix15: number | null
    art14rou15: number | null
    art14fer15: number | null
    art14inc15: number | null
    naf15art16: number | null
    art15act16: number | null
    art15hab16: number | null
    art15mix16: number | null
    art15rou16: number | null
    art15fer16: number | null
    art15inc16: number | null
    naf16art17: number | null
    art16act17: number | null
    art16hab17: number | null
    art16mix17: number | null
    art16rou17: number | null
    art16fer17: number | null
    art16inc17: number | null
    naf17art18: number | null
    art17act18: number | null
    art17hab18: number | null
    art17mix18: number | null
    art17rou18: number | null
    art17fer18: number | null
    art17inc18: number | null
    naf18art19: number | null
    art18act19: number | null
    art18hab19: number | null
    art18mix19: number | null
    art18rou19: number | null
    art18fer19: number | null
    art18inc19: number | null
    naf19art20: number | null
    art19act20: number | null
    art19hab20: number | null
    art19mix20: number | null
    art19rou20: number | null
    art19fer20: number | null
    art19inc20: number | null
    naf20art21: number | null
    art20act21: number | null
    art20hab21: number | null
    art20mix21: number | null
    art20rou21: number | null
    art20fer21: number | null
    art20inc21: number | null
    naf21art22: number | null
    art21act22: number | null
    art21hab22: number | null
    art21mix22: number | null
    art21rou22: number | null
    art21fer22: number | null
    art21inc22: number | null
    naf22art23: number | null
    art22act23: number | null
    art22hab23: number | null
    art22mix23: number | null
    art22rou23: number | null
    art22fer23: number | null
    art22inc23: number | null
    naf09art23: number | null
    art09act23: number | null
    art09hab23: number | null
    art09mix23: number | null
    art09inc23: number | null
    art09rou23: number | null
    art09fer23: number | null
    artcom0923: number | null
    pop14: number | null
    pop20: number | null
    pop1420: number | null
    men14: number | null
    men20: number | null
    men1420: number | null
    emp14: number | null
    emp20: number | null
    emp1420: number | null
    mepart1420: number | null
    menhab1420: number | null
    artpop1420: number | null
    surfcom2023: number | null
    C10_MEN: number | null
    C15_MEN: number | null
    C21_MEN: number | null
  }

  export type Consommation_espaces_nafSumAggregateOutputType = {
    index: bigint | null
    region: number | null
    naf09art10: number | null
    art09act10: number | null
    art09hab10: number | null
    art09mix10: number | null
    art09rou10: number | null
    art09fer10: number | null
    art09inc10: number | null
    naf10art11: number | null
    art10act11: number | null
    art10hab11: number | null
    art10mix11: number | null
    art10rou11: number | null
    art10fer11: number | null
    art10inc11: number | null
    naf11art12: number | null
    art11act12: number | null
    art11hab12: number | null
    art11mix12: number | null
    art11rou12: number | null
    art11fer12: number | null
    art11inc12: number | null
    naf12art13: number | null
    art12act13: number | null
    art12hab13: number | null
    art12mix13: number | null
    art12rou13: number | null
    art12fer13: number | null
    art12inc13: number | null
    naf13art14: number | null
    art13act14: number | null
    art13hab14: number | null
    art13mix14: number | null
    art13rou14: number | null
    art13fer14: number | null
    art13inc14: number | null
    naf14art15: number | null
    art14act15: number | null
    art14hab15: number | null
    art14mix15: number | null
    art14rou15: number | null
    art14fer15: number | null
    art14inc15: number | null
    naf15art16: number | null
    art15act16: number | null
    art15hab16: number | null
    art15mix16: number | null
    art15rou16: number | null
    art15fer16: number | null
    art15inc16: number | null
    naf16art17: number | null
    art16act17: number | null
    art16hab17: number | null
    art16mix17: number | null
    art16rou17: number | null
    art16fer17: number | null
    art16inc17: number | null
    naf17art18: number | null
    art17act18: number | null
    art17hab18: number | null
    art17mix18: number | null
    art17rou18: number | null
    art17fer18: number | null
    art17inc18: number | null
    naf18art19: number | null
    art18act19: number | null
    art18hab19: number | null
    art18mix19: number | null
    art18rou19: number | null
    art18fer19: number | null
    art18inc19: number | null
    naf19art20: number | null
    art19act20: number | null
    art19hab20: number | null
    art19mix20: number | null
    art19rou20: number | null
    art19fer20: number | null
    art19inc20: number | null
    naf20art21: number | null
    art20act21: number | null
    art20hab21: number | null
    art20mix21: number | null
    art20rou21: number | null
    art20fer21: number | null
    art20inc21: number | null
    naf21art22: number | null
    art21act22: number | null
    art21hab22: number | null
    art21mix22: number | null
    art21rou22: number | null
    art21fer22: number | null
    art21inc22: number | null
    naf22art23: number | null
    art22act23: number | null
    art22hab23: number | null
    art22mix23: number | null
    art22rou23: number | null
    art22fer23: number | null
    art22inc23: number | null
    naf09art23: number | null
    art09act23: number | null
    art09hab23: number | null
    art09mix23: number | null
    art09inc23: number | null
    art09rou23: number | null
    art09fer23: number | null
    artcom0923: number | null
    pop14: number | null
    pop20: number | null
    pop1420: number | null
    men14: number | null
    men20: number | null
    men1420: number | null
    emp14: number | null
    emp20: number | null
    emp1420: number | null
    mepart1420: number | null
    menhab1420: number | null
    artpop1420: number | null
    surfcom2023: number | null
    C10_MEN: number | null
    C15_MEN: number | null
    C21_MEN: number | null
  }

  export type Consommation_espaces_nafMinAggregateOutputType = {
    index: bigint | null
    code_geographique: string | null
    libelle_geographique: string | null
    epci: string | null
    libelle_epci: string | null
    departement: string | null
    region: number | null
    naf09art10: number | null
    art09act10: number | null
    art09hab10: number | null
    art09mix10: number | null
    art09rou10: number | null
    art09fer10: number | null
    art09inc10: number | null
    naf10art11: number | null
    art10act11: number | null
    art10hab11: number | null
    art10mix11: number | null
    art10rou11: number | null
    art10fer11: number | null
    art10inc11: number | null
    naf11art12: number | null
    art11act12: number | null
    art11hab12: number | null
    art11mix12: number | null
    art11rou12: number | null
    art11fer12: number | null
    art11inc12: number | null
    naf12art13: number | null
    art12act13: number | null
    art12hab13: number | null
    art12mix13: number | null
    art12rou13: number | null
    art12fer13: number | null
    art12inc13: number | null
    naf13art14: number | null
    art13act14: number | null
    art13hab14: number | null
    art13mix14: number | null
    art13rou14: number | null
    art13fer14: number | null
    art13inc14: number | null
    naf14art15: number | null
    art14act15: number | null
    art14hab15: number | null
    art14mix15: number | null
    art14rou15: number | null
    art14fer15: number | null
    art14inc15: number | null
    naf15art16: number | null
    art15act16: number | null
    art15hab16: number | null
    art15mix16: number | null
    art15rou16: number | null
    art15fer16: number | null
    art15inc16: number | null
    naf16art17: number | null
    art16act17: number | null
    art16hab17: number | null
    art16mix17: number | null
    art16rou17: number | null
    art16fer17: number | null
    art16inc17: number | null
    naf17art18: number | null
    art17act18: number | null
    art17hab18: number | null
    art17mix18: number | null
    art17rou18: number | null
    art17fer18: number | null
    art17inc18: number | null
    naf18art19: number | null
    art18act19: number | null
    art18hab19: number | null
    art18mix19: number | null
    art18rou19: number | null
    art18fer19: number | null
    art18inc19: number | null
    naf19art20: number | null
    art19act20: number | null
    art19hab20: number | null
    art19mix20: number | null
    art19rou20: number | null
    art19fer20: number | null
    art19inc20: number | null
    naf20art21: number | null
    art20act21: number | null
    art20hab21: number | null
    art20mix21: number | null
    art20rou21: number | null
    art20fer21: number | null
    art20inc21: number | null
    naf21art22: number | null
    art21act22: number | null
    art21hab22: number | null
    art21mix22: number | null
    art21rou22: number | null
    art21fer22: number | null
    art21inc22: number | null
    naf22art23: number | null
    art22act23: number | null
    art22hab23: number | null
    art22mix23: number | null
    art22rou23: number | null
    art22fer23: number | null
    art22inc23: number | null
    naf09art23: number | null
    art09act23: number | null
    art09hab23: number | null
    art09mix23: number | null
    art09inc23: number | null
    art09rou23: number | null
    art09fer23: number | null
    artcom0923: number | null
    pop14: number | null
    pop20: number | null
    pop1420: number | null
    men14: number | null
    men20: number | null
    men1420: number | null
    emp14: number | null
    emp20: number | null
    emp1420: number | null
    mepart1420: number | null
    menhab1420: number | null
    artpop1420: number | null
    surfcom2023: number | null
    C10_MEN: number | null
    C15_MEN: number | null
    C21_MEN: number | null
  }

  export type Consommation_espaces_nafMaxAggregateOutputType = {
    index: bigint | null
    code_geographique: string | null
    libelle_geographique: string | null
    epci: string | null
    libelle_epci: string | null
    departement: string | null
    region: number | null
    naf09art10: number | null
    art09act10: number | null
    art09hab10: number | null
    art09mix10: number | null
    art09rou10: number | null
    art09fer10: number | null
    art09inc10: number | null
    naf10art11: number | null
    art10act11: number | null
    art10hab11: number | null
    art10mix11: number | null
    art10rou11: number | null
    art10fer11: number | null
    art10inc11: number | null
    naf11art12: number | null
    art11act12: number | null
    art11hab12: number | null
    art11mix12: number | null
    art11rou12: number | null
    art11fer12: number | null
    art11inc12: number | null
    naf12art13: number | null
    art12act13: number | null
    art12hab13: number | null
    art12mix13: number | null
    art12rou13: number | null
    art12fer13: number | null
    art12inc13: number | null
    naf13art14: number | null
    art13act14: number | null
    art13hab14: number | null
    art13mix14: number | null
    art13rou14: number | null
    art13fer14: number | null
    art13inc14: number | null
    naf14art15: number | null
    art14act15: number | null
    art14hab15: number | null
    art14mix15: number | null
    art14rou15: number | null
    art14fer15: number | null
    art14inc15: number | null
    naf15art16: number | null
    art15act16: number | null
    art15hab16: number | null
    art15mix16: number | null
    art15rou16: number | null
    art15fer16: number | null
    art15inc16: number | null
    naf16art17: number | null
    art16act17: number | null
    art16hab17: number | null
    art16mix17: number | null
    art16rou17: number | null
    art16fer17: number | null
    art16inc17: number | null
    naf17art18: number | null
    art17act18: number | null
    art17hab18: number | null
    art17mix18: number | null
    art17rou18: number | null
    art17fer18: number | null
    art17inc18: number | null
    naf18art19: number | null
    art18act19: number | null
    art18hab19: number | null
    art18mix19: number | null
    art18rou19: number | null
    art18fer19: number | null
    art18inc19: number | null
    naf19art20: number | null
    art19act20: number | null
    art19hab20: number | null
    art19mix20: number | null
    art19rou20: number | null
    art19fer20: number | null
    art19inc20: number | null
    naf20art21: number | null
    art20act21: number | null
    art20hab21: number | null
    art20mix21: number | null
    art20rou21: number | null
    art20fer21: number | null
    art20inc21: number | null
    naf21art22: number | null
    art21act22: number | null
    art21hab22: number | null
    art21mix22: number | null
    art21rou22: number | null
    art21fer22: number | null
    art21inc22: number | null
    naf22art23: number | null
    art22act23: number | null
    art22hab23: number | null
    art22mix23: number | null
    art22rou23: number | null
    art22fer23: number | null
    art22inc23: number | null
    naf09art23: number | null
    art09act23: number | null
    art09hab23: number | null
    art09mix23: number | null
    art09inc23: number | null
    art09rou23: number | null
    art09fer23: number | null
    artcom0923: number | null
    pop14: number | null
    pop20: number | null
    pop1420: number | null
    men14: number | null
    men20: number | null
    men1420: number | null
    emp14: number | null
    emp20: number | null
    emp1420: number | null
    mepart1420: number | null
    menhab1420: number | null
    artpop1420: number | null
    surfcom2023: number | null
    C10_MEN: number | null
    C15_MEN: number | null
    C21_MEN: number | null
  }

  export type Consommation_espaces_nafCountAggregateOutputType = {
    index: number
    code_geographique: number
    libelle_geographique: number
    epci: number
    libelle_epci: number
    departement: number
    region: number
    naf09art10: number
    art09act10: number
    art09hab10: number
    art09mix10: number
    art09rou10: number
    art09fer10: number
    art09inc10: number
    naf10art11: number
    art10act11: number
    art10hab11: number
    art10mix11: number
    art10rou11: number
    art10fer11: number
    art10inc11: number
    naf11art12: number
    art11act12: number
    art11hab12: number
    art11mix12: number
    art11rou12: number
    art11fer12: number
    art11inc12: number
    naf12art13: number
    art12act13: number
    art12hab13: number
    art12mix13: number
    art12rou13: number
    art12fer13: number
    art12inc13: number
    naf13art14: number
    art13act14: number
    art13hab14: number
    art13mix14: number
    art13rou14: number
    art13fer14: number
    art13inc14: number
    naf14art15: number
    art14act15: number
    art14hab15: number
    art14mix15: number
    art14rou15: number
    art14fer15: number
    art14inc15: number
    naf15art16: number
    art15act16: number
    art15hab16: number
    art15mix16: number
    art15rou16: number
    art15fer16: number
    art15inc16: number
    naf16art17: number
    art16act17: number
    art16hab17: number
    art16mix17: number
    art16rou17: number
    art16fer17: number
    art16inc17: number
    naf17art18: number
    art17act18: number
    art17hab18: number
    art17mix18: number
    art17rou18: number
    art17fer18: number
    art17inc18: number
    naf18art19: number
    art18act19: number
    art18hab19: number
    art18mix19: number
    art18rou19: number
    art18fer19: number
    art18inc19: number
    naf19art20: number
    art19act20: number
    art19hab20: number
    art19mix20: number
    art19rou20: number
    art19fer20: number
    art19inc20: number
    naf20art21: number
    art20act21: number
    art20hab21: number
    art20mix21: number
    art20rou21: number
    art20fer21: number
    art20inc21: number
    naf21art22: number
    art21act22: number
    art21hab22: number
    art21mix22: number
    art21rou22: number
    art21fer22: number
    art21inc22: number
    naf22art23: number
    art22act23: number
    art22hab23: number
    art22mix23: number
    art22rou23: number
    art22fer23: number
    art22inc23: number
    naf09art23: number
    art09act23: number
    art09hab23: number
    art09mix23: number
    art09inc23: number
    art09rou23: number
    art09fer23: number
    artcom0923: number
    pop14: number
    pop20: number
    pop1420: number
    men14: number
    men20: number
    men1420: number
    emp14: number
    emp20: number
    emp1420: number
    mepart1420: number
    menhab1420: number
    artpop1420: number
    surfcom2023: number
    C10_MEN: number
    C15_MEN: number
    C21_MEN: number
    _all: number
  }


  export type Consommation_espaces_nafAvgAggregateInputType = {
    index?: true
    region?: true
    naf09art10?: true
    art09act10?: true
    art09hab10?: true
    art09mix10?: true
    art09rou10?: true
    art09fer10?: true
    art09inc10?: true
    naf10art11?: true
    art10act11?: true
    art10hab11?: true
    art10mix11?: true
    art10rou11?: true
    art10fer11?: true
    art10inc11?: true
    naf11art12?: true
    art11act12?: true
    art11hab12?: true
    art11mix12?: true
    art11rou12?: true
    art11fer12?: true
    art11inc12?: true
    naf12art13?: true
    art12act13?: true
    art12hab13?: true
    art12mix13?: true
    art12rou13?: true
    art12fer13?: true
    art12inc13?: true
    naf13art14?: true
    art13act14?: true
    art13hab14?: true
    art13mix14?: true
    art13rou14?: true
    art13fer14?: true
    art13inc14?: true
    naf14art15?: true
    art14act15?: true
    art14hab15?: true
    art14mix15?: true
    art14rou15?: true
    art14fer15?: true
    art14inc15?: true
    naf15art16?: true
    art15act16?: true
    art15hab16?: true
    art15mix16?: true
    art15rou16?: true
    art15fer16?: true
    art15inc16?: true
    naf16art17?: true
    art16act17?: true
    art16hab17?: true
    art16mix17?: true
    art16rou17?: true
    art16fer17?: true
    art16inc17?: true
    naf17art18?: true
    art17act18?: true
    art17hab18?: true
    art17mix18?: true
    art17rou18?: true
    art17fer18?: true
    art17inc18?: true
    naf18art19?: true
    art18act19?: true
    art18hab19?: true
    art18mix19?: true
    art18rou19?: true
    art18fer19?: true
    art18inc19?: true
    naf19art20?: true
    art19act20?: true
    art19hab20?: true
    art19mix20?: true
    art19rou20?: true
    art19fer20?: true
    art19inc20?: true
    naf20art21?: true
    art20act21?: true
    art20hab21?: true
    art20mix21?: true
    art20rou21?: true
    art20fer21?: true
    art20inc21?: true
    naf21art22?: true
    art21act22?: true
    art21hab22?: true
    art21mix22?: true
    art21rou22?: true
    art21fer22?: true
    art21inc22?: true
    naf22art23?: true
    art22act23?: true
    art22hab23?: true
    art22mix23?: true
    art22rou23?: true
    art22fer23?: true
    art22inc23?: true
    naf09art23?: true
    art09act23?: true
    art09hab23?: true
    art09mix23?: true
    art09inc23?: true
    art09rou23?: true
    art09fer23?: true
    artcom0923?: true
    pop14?: true
    pop20?: true
    pop1420?: true
    men14?: true
    men20?: true
    men1420?: true
    emp14?: true
    emp20?: true
    emp1420?: true
    mepart1420?: true
    menhab1420?: true
    artpop1420?: true
    surfcom2023?: true
    C10_MEN?: true
    C15_MEN?: true
    C21_MEN?: true
  }

  export type Consommation_espaces_nafSumAggregateInputType = {
    index?: true
    region?: true
    naf09art10?: true
    art09act10?: true
    art09hab10?: true
    art09mix10?: true
    art09rou10?: true
    art09fer10?: true
    art09inc10?: true
    naf10art11?: true
    art10act11?: true
    art10hab11?: true
    art10mix11?: true
    art10rou11?: true
    art10fer11?: true
    art10inc11?: true
    naf11art12?: true
    art11act12?: true
    art11hab12?: true
    art11mix12?: true
    art11rou12?: true
    art11fer12?: true
    art11inc12?: true
    naf12art13?: true
    art12act13?: true
    art12hab13?: true
    art12mix13?: true
    art12rou13?: true
    art12fer13?: true
    art12inc13?: true
    naf13art14?: true
    art13act14?: true
    art13hab14?: true
    art13mix14?: true
    art13rou14?: true
    art13fer14?: true
    art13inc14?: true
    naf14art15?: true
    art14act15?: true
    art14hab15?: true
    art14mix15?: true
    art14rou15?: true
    art14fer15?: true
    art14inc15?: true
    naf15art16?: true
    art15act16?: true
    art15hab16?: true
    art15mix16?: true
    art15rou16?: true
    art15fer16?: true
    art15inc16?: true
    naf16art17?: true
    art16act17?: true
    art16hab17?: true
    art16mix17?: true
    art16rou17?: true
    art16fer17?: true
    art16inc17?: true
    naf17art18?: true
    art17act18?: true
    art17hab18?: true
    art17mix18?: true
    art17rou18?: true
    art17fer18?: true
    art17inc18?: true
    naf18art19?: true
    art18act19?: true
    art18hab19?: true
    art18mix19?: true
    art18rou19?: true
    art18fer19?: true
    art18inc19?: true
    naf19art20?: true
    art19act20?: true
    art19hab20?: true
    art19mix20?: true
    art19rou20?: true
    art19fer20?: true
    art19inc20?: true
    naf20art21?: true
    art20act21?: true
    art20hab21?: true
    art20mix21?: true
    art20rou21?: true
    art20fer21?: true
    art20inc21?: true
    naf21art22?: true
    art21act22?: true
    art21hab22?: true
    art21mix22?: true
    art21rou22?: true
    art21fer22?: true
    art21inc22?: true
    naf22art23?: true
    art22act23?: true
    art22hab23?: true
    art22mix23?: true
    art22rou23?: true
    art22fer23?: true
    art22inc23?: true
    naf09art23?: true
    art09act23?: true
    art09hab23?: true
    art09mix23?: true
    art09inc23?: true
    art09rou23?: true
    art09fer23?: true
    artcom0923?: true
    pop14?: true
    pop20?: true
    pop1420?: true
    men14?: true
    men20?: true
    men1420?: true
    emp14?: true
    emp20?: true
    emp1420?: true
    mepart1420?: true
    menhab1420?: true
    artpop1420?: true
    surfcom2023?: true
    C10_MEN?: true
    C15_MEN?: true
    C21_MEN?: true
  }

  export type Consommation_espaces_nafMinAggregateInputType = {
    index?: true
    code_geographique?: true
    libelle_geographique?: true
    epci?: true
    libelle_epci?: true
    departement?: true
    region?: true
    naf09art10?: true
    art09act10?: true
    art09hab10?: true
    art09mix10?: true
    art09rou10?: true
    art09fer10?: true
    art09inc10?: true
    naf10art11?: true
    art10act11?: true
    art10hab11?: true
    art10mix11?: true
    art10rou11?: true
    art10fer11?: true
    art10inc11?: true
    naf11art12?: true
    art11act12?: true
    art11hab12?: true
    art11mix12?: true
    art11rou12?: true
    art11fer12?: true
    art11inc12?: true
    naf12art13?: true
    art12act13?: true
    art12hab13?: true
    art12mix13?: true
    art12rou13?: true
    art12fer13?: true
    art12inc13?: true
    naf13art14?: true
    art13act14?: true
    art13hab14?: true
    art13mix14?: true
    art13rou14?: true
    art13fer14?: true
    art13inc14?: true
    naf14art15?: true
    art14act15?: true
    art14hab15?: true
    art14mix15?: true
    art14rou15?: true
    art14fer15?: true
    art14inc15?: true
    naf15art16?: true
    art15act16?: true
    art15hab16?: true
    art15mix16?: true
    art15rou16?: true
    art15fer16?: true
    art15inc16?: true
    naf16art17?: true
    art16act17?: true
    art16hab17?: true
    art16mix17?: true
    art16rou17?: true
    art16fer17?: true
    art16inc17?: true
    naf17art18?: true
    art17act18?: true
    art17hab18?: true
    art17mix18?: true
    art17rou18?: true
    art17fer18?: true
    art17inc18?: true
    naf18art19?: true
    art18act19?: true
    art18hab19?: true
    art18mix19?: true
    art18rou19?: true
    art18fer19?: true
    art18inc19?: true
    naf19art20?: true
    art19act20?: true
    art19hab20?: true
    art19mix20?: true
    art19rou20?: true
    art19fer20?: true
    art19inc20?: true
    naf20art21?: true
    art20act21?: true
    art20hab21?: true
    art20mix21?: true
    art20rou21?: true
    art20fer21?: true
    art20inc21?: true
    naf21art22?: true
    art21act22?: true
    art21hab22?: true
    art21mix22?: true
    art21rou22?: true
    art21fer22?: true
    art21inc22?: true
    naf22art23?: true
    art22act23?: true
    art22hab23?: true
    art22mix23?: true
    art22rou23?: true
    art22fer23?: true
    art22inc23?: true
    naf09art23?: true
    art09act23?: true
    art09hab23?: true
    art09mix23?: true
    art09inc23?: true
    art09rou23?: true
    art09fer23?: true
    artcom0923?: true
    pop14?: true
    pop20?: true
    pop1420?: true
    men14?: true
    men20?: true
    men1420?: true
    emp14?: true
    emp20?: true
    emp1420?: true
    mepart1420?: true
    menhab1420?: true
    artpop1420?: true
    surfcom2023?: true
    C10_MEN?: true
    C15_MEN?: true
    C21_MEN?: true
  }

  export type Consommation_espaces_nafMaxAggregateInputType = {
    index?: true
    code_geographique?: true
    libelle_geographique?: true
    epci?: true
    libelle_epci?: true
    departement?: true
    region?: true
    naf09art10?: true
    art09act10?: true
    art09hab10?: true
    art09mix10?: true
    art09rou10?: true
    art09fer10?: true
    art09inc10?: true
    naf10art11?: true
    art10act11?: true
    art10hab11?: true
    art10mix11?: true
    art10rou11?: true
    art10fer11?: true
    art10inc11?: true
    naf11art12?: true
    art11act12?: true
    art11hab12?: true
    art11mix12?: true
    art11rou12?: true
    art11fer12?: true
    art11inc12?: true
    naf12art13?: true
    art12act13?: true
    art12hab13?: true
    art12mix13?: true
    art12rou13?: true
    art12fer13?: true
    art12inc13?: true
    naf13art14?: true
    art13act14?: true
    art13hab14?: true
    art13mix14?: true
    art13rou14?: true
    art13fer14?: true
    art13inc14?: true
    naf14art15?: true
    art14act15?: true
    art14hab15?: true
    art14mix15?: true
    art14rou15?: true
    art14fer15?: true
    art14inc15?: true
    naf15art16?: true
    art15act16?: true
    art15hab16?: true
    art15mix16?: true
    art15rou16?: true
    art15fer16?: true
    art15inc16?: true
    naf16art17?: true
    art16act17?: true
    art16hab17?: true
    art16mix17?: true
    art16rou17?: true
    art16fer17?: true
    art16inc17?: true
    naf17art18?: true
    art17act18?: true
    art17hab18?: true
    art17mix18?: true
    art17rou18?: true
    art17fer18?: true
    art17inc18?: true
    naf18art19?: true
    art18act19?: true
    art18hab19?: true
    art18mix19?: true
    art18rou19?: true
    art18fer19?: true
    art18inc19?: true
    naf19art20?: true
    art19act20?: true
    art19hab20?: true
    art19mix20?: true
    art19rou20?: true
    art19fer20?: true
    art19inc20?: true
    naf20art21?: true
    art20act21?: true
    art20hab21?: true
    art20mix21?: true
    art20rou21?: true
    art20fer21?: true
    art20inc21?: true
    naf21art22?: true
    art21act22?: true
    art21hab22?: true
    art21mix22?: true
    art21rou22?: true
    art21fer22?: true
    art21inc22?: true
    naf22art23?: true
    art22act23?: true
    art22hab23?: true
    art22mix23?: true
    art22rou23?: true
    art22fer23?: true
    art22inc23?: true
    naf09art23?: true
    art09act23?: true
    art09hab23?: true
    art09mix23?: true
    art09inc23?: true
    art09rou23?: true
    art09fer23?: true
    artcom0923?: true
    pop14?: true
    pop20?: true
    pop1420?: true
    men14?: true
    men20?: true
    men1420?: true
    emp14?: true
    emp20?: true
    emp1420?: true
    mepart1420?: true
    menhab1420?: true
    artpop1420?: true
    surfcom2023?: true
    C10_MEN?: true
    C15_MEN?: true
    C21_MEN?: true
  }

  export type Consommation_espaces_nafCountAggregateInputType = {
    index?: true
    code_geographique?: true
    libelle_geographique?: true
    epci?: true
    libelle_epci?: true
    departement?: true
    region?: true
    naf09art10?: true
    art09act10?: true
    art09hab10?: true
    art09mix10?: true
    art09rou10?: true
    art09fer10?: true
    art09inc10?: true
    naf10art11?: true
    art10act11?: true
    art10hab11?: true
    art10mix11?: true
    art10rou11?: true
    art10fer11?: true
    art10inc11?: true
    naf11art12?: true
    art11act12?: true
    art11hab12?: true
    art11mix12?: true
    art11rou12?: true
    art11fer12?: true
    art11inc12?: true
    naf12art13?: true
    art12act13?: true
    art12hab13?: true
    art12mix13?: true
    art12rou13?: true
    art12fer13?: true
    art12inc13?: true
    naf13art14?: true
    art13act14?: true
    art13hab14?: true
    art13mix14?: true
    art13rou14?: true
    art13fer14?: true
    art13inc14?: true
    naf14art15?: true
    art14act15?: true
    art14hab15?: true
    art14mix15?: true
    art14rou15?: true
    art14fer15?: true
    art14inc15?: true
    naf15art16?: true
    art15act16?: true
    art15hab16?: true
    art15mix16?: true
    art15rou16?: true
    art15fer16?: true
    art15inc16?: true
    naf16art17?: true
    art16act17?: true
    art16hab17?: true
    art16mix17?: true
    art16rou17?: true
    art16fer17?: true
    art16inc17?: true
    naf17art18?: true
    art17act18?: true
    art17hab18?: true
    art17mix18?: true
    art17rou18?: true
    art17fer18?: true
    art17inc18?: true
    naf18art19?: true
    art18act19?: true
    art18hab19?: true
    art18mix19?: true
    art18rou19?: true
    art18fer19?: true
    art18inc19?: true
    naf19art20?: true
    art19act20?: true
    art19hab20?: true
    art19mix20?: true
    art19rou20?: true
    art19fer20?: true
    art19inc20?: true
    naf20art21?: true
    art20act21?: true
    art20hab21?: true
    art20mix21?: true
    art20rou21?: true
    art20fer21?: true
    art20inc21?: true
    naf21art22?: true
    art21act22?: true
    art21hab22?: true
    art21mix22?: true
    art21rou22?: true
    art21fer22?: true
    art21inc22?: true
    naf22art23?: true
    art22act23?: true
    art22hab23?: true
    art22mix23?: true
    art22rou23?: true
    art22fer23?: true
    art22inc23?: true
    naf09art23?: true
    art09act23?: true
    art09hab23?: true
    art09mix23?: true
    art09inc23?: true
    art09rou23?: true
    art09fer23?: true
    artcom0923?: true
    pop14?: true
    pop20?: true
    pop1420?: true
    men14?: true
    men20?: true
    men1420?: true
    emp14?: true
    emp20?: true
    emp1420?: true
    mepart1420?: true
    menhab1420?: true
    artpop1420?: true
    surfcom2023?: true
    C10_MEN?: true
    C15_MEN?: true
    C21_MEN?: true
    _all?: true
  }

  export type Consommation_espaces_nafAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which consommation_espaces_naf to aggregate.
     */
    where?: consommation_espaces_nafWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of consommation_espaces_nafs to fetch.
     */
    orderBy?: consommation_espaces_nafOrderByWithRelationInput | consommation_espaces_nafOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: consommation_espaces_nafWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` consommation_espaces_nafs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` consommation_espaces_nafs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned consommation_espaces_nafs
    **/
    _count?: true | Consommation_espaces_nafCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Consommation_espaces_nafAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Consommation_espaces_nafSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Consommation_espaces_nafMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Consommation_espaces_nafMaxAggregateInputType
  }

  export type GetConsommation_espaces_nafAggregateType<T extends Consommation_espaces_nafAggregateArgs> = {
        [P in keyof T & keyof AggregateConsommation_espaces_naf]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConsommation_espaces_naf[P]>
      : GetScalarType<T[P], AggregateConsommation_espaces_naf[P]>
  }




  export type consommation_espaces_nafGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: consommation_espaces_nafWhereInput
    orderBy?: consommation_espaces_nafOrderByWithAggregationInput | consommation_espaces_nafOrderByWithAggregationInput[]
    by: Consommation_espaces_nafScalarFieldEnum[] | Consommation_espaces_nafScalarFieldEnum
    having?: consommation_espaces_nafScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Consommation_espaces_nafCountAggregateInputType | true
    _avg?: Consommation_espaces_nafAvgAggregateInputType
    _sum?: Consommation_espaces_nafSumAggregateInputType
    _min?: Consommation_espaces_nafMinAggregateInputType
    _max?: Consommation_espaces_nafMaxAggregateInputType
  }

  export type Consommation_espaces_nafGroupByOutputType = {
    index: bigint
    code_geographique: string
    libelle_geographique: string
    epci: string
    libelle_epci: string
    departement: string
    region: number
    naf09art10: number
    art09act10: number
    art09hab10: number
    art09mix10: number
    art09rou10: number
    art09fer10: number
    art09inc10: number
    naf10art11: number
    art10act11: number
    art10hab11: number
    art10mix11: number
    art10rou11: number
    art10fer11: number
    art10inc11: number
    naf11art12: number
    art11act12: number
    art11hab12: number
    art11mix12: number
    art11rou12: number
    art11fer12: number
    art11inc12: number
    naf12art13: number
    art12act13: number
    art12hab13: number
    art12mix13: number
    art12rou13: number
    art12fer13: number
    art12inc13: number
    naf13art14: number
    art13act14: number
    art13hab14: number
    art13mix14: number
    art13rou14: number
    art13fer14: number
    art13inc14: number
    naf14art15: number
    art14act15: number
    art14hab15: number
    art14mix15: number
    art14rou15: number
    art14fer15: number
    art14inc15: number
    naf15art16: number
    art15act16: number
    art15hab16: number
    art15mix16: number
    art15rou16: number
    art15fer16: number
    art15inc16: number
    naf16art17: number
    art16act17: number
    art16hab17: number
    art16mix17: number
    art16rou17: number
    art16fer17: number
    art16inc17: number
    naf17art18: number
    art17act18: number
    art17hab18: number
    art17mix18: number
    art17rou18: number
    art17fer18: number
    art17inc18: number
    naf18art19: number
    art18act19: number
    art18hab19: number
    art18mix19: number
    art18rou19: number
    art18fer19: number
    art18inc19: number
    naf19art20: number
    art19act20: number
    art19hab20: number
    art19mix20: number
    art19rou20: number
    art19fer20: number
    art19inc20: number
    naf20art21: number
    art20act21: number
    art20hab21: number
    art20mix21: number
    art20rou21: number
    art20fer21: number
    art20inc21: number
    naf21art22: number
    art21act22: number
    art21hab22: number
    art21mix22: number
    art21rou22: number
    art21fer22: number
    art21inc22: number
    naf22art23: number
    art22act23: number
    art22hab23: number
    art22mix23: number
    art22rou23: number
    art22fer23: number
    art22inc23: number
    naf09art23: number
    art09act23: number
    art09hab23: number
    art09mix23: number
    art09inc23: number
    art09rou23: number
    art09fer23: number
    artcom0923: number
    pop14: number
    pop20: number
    pop1420: number
    men14: number
    men20: number
    men1420: number
    emp14: number
    emp20: number
    emp1420: number
    mepart1420: number
    menhab1420: number
    artpop1420: number | null
    surfcom2023: number
    C10_MEN: number | null
    C15_MEN: number | null
    C21_MEN: number | null
    _count: Consommation_espaces_nafCountAggregateOutputType | null
    _avg: Consommation_espaces_nafAvgAggregateOutputType | null
    _sum: Consommation_espaces_nafSumAggregateOutputType | null
    _min: Consommation_espaces_nafMinAggregateOutputType | null
    _max: Consommation_espaces_nafMaxAggregateOutputType | null
  }

  type GetConsommation_espaces_nafGroupByPayload<T extends consommation_espaces_nafGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Consommation_espaces_nafGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Consommation_espaces_nafGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Consommation_espaces_nafGroupByOutputType[P]>
            : GetScalarType<T[P], Consommation_espaces_nafGroupByOutputType[P]>
        }
      >
    >


  export type consommation_espaces_nafSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    index?: boolean
    code_geographique?: boolean
    libelle_geographique?: boolean
    epci?: boolean
    libelle_epci?: boolean
    departement?: boolean
    region?: boolean
    naf09art10?: boolean
    art09act10?: boolean
    art09hab10?: boolean
    art09mix10?: boolean
    art09rou10?: boolean
    art09fer10?: boolean
    art09inc10?: boolean
    naf10art11?: boolean
    art10act11?: boolean
    art10hab11?: boolean
    art10mix11?: boolean
    art10rou11?: boolean
    art10fer11?: boolean
    art10inc11?: boolean
    naf11art12?: boolean
    art11act12?: boolean
    art11hab12?: boolean
    art11mix12?: boolean
    art11rou12?: boolean
    art11fer12?: boolean
    art11inc12?: boolean
    naf12art13?: boolean
    art12act13?: boolean
    art12hab13?: boolean
    art12mix13?: boolean
    art12rou13?: boolean
    art12fer13?: boolean
    art12inc13?: boolean
    naf13art14?: boolean
    art13act14?: boolean
    art13hab14?: boolean
    art13mix14?: boolean
    art13rou14?: boolean
    art13fer14?: boolean
    art13inc14?: boolean
    naf14art15?: boolean
    art14act15?: boolean
    art14hab15?: boolean
    art14mix15?: boolean
    art14rou15?: boolean
    art14fer15?: boolean
    art14inc15?: boolean
    naf15art16?: boolean
    art15act16?: boolean
    art15hab16?: boolean
    art15mix16?: boolean
    art15rou16?: boolean
    art15fer16?: boolean
    art15inc16?: boolean
    naf16art17?: boolean
    art16act17?: boolean
    art16hab17?: boolean
    art16mix17?: boolean
    art16rou17?: boolean
    art16fer17?: boolean
    art16inc17?: boolean
    naf17art18?: boolean
    art17act18?: boolean
    art17hab18?: boolean
    art17mix18?: boolean
    art17rou18?: boolean
    art17fer18?: boolean
    art17inc18?: boolean
    naf18art19?: boolean
    art18act19?: boolean
    art18hab19?: boolean
    art18mix19?: boolean
    art18rou19?: boolean
    art18fer19?: boolean
    art18inc19?: boolean
    naf19art20?: boolean
    art19act20?: boolean
    art19hab20?: boolean
    art19mix20?: boolean
    art19rou20?: boolean
    art19fer20?: boolean
    art19inc20?: boolean
    naf20art21?: boolean
    art20act21?: boolean
    art20hab21?: boolean
    art20mix21?: boolean
    art20rou21?: boolean
    art20fer21?: boolean
    art20inc21?: boolean
    naf21art22?: boolean
    art21act22?: boolean
    art21hab22?: boolean
    art21mix22?: boolean
    art21rou22?: boolean
    art21fer22?: boolean
    art21inc22?: boolean
    naf22art23?: boolean
    art22act23?: boolean
    art22hab23?: boolean
    art22mix23?: boolean
    art22rou23?: boolean
    art22fer23?: boolean
    art22inc23?: boolean
    naf09art23?: boolean
    art09act23?: boolean
    art09hab23?: boolean
    art09mix23?: boolean
    art09inc23?: boolean
    art09rou23?: boolean
    art09fer23?: boolean
    artcom0923?: boolean
    pop14?: boolean
    pop20?: boolean
    pop1420?: boolean
    men14?: boolean
    men20?: boolean
    men1420?: boolean
    emp14?: boolean
    emp20?: boolean
    emp1420?: boolean
    mepart1420?: boolean
    menhab1420?: boolean
    artpop1420?: boolean
    surfcom2023?: boolean
    C10_MEN?: boolean
    C15_MEN?: boolean
    C21_MEN?: boolean
  }, ExtArgs["result"]["consommation_espaces_naf"]>

  export type consommation_espaces_nafSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    index?: boolean
    code_geographique?: boolean
    libelle_geographique?: boolean
    epci?: boolean
    libelle_epci?: boolean
    departement?: boolean
    region?: boolean
    naf09art10?: boolean
    art09act10?: boolean
    art09hab10?: boolean
    art09mix10?: boolean
    art09rou10?: boolean
    art09fer10?: boolean
    art09inc10?: boolean
    naf10art11?: boolean
    art10act11?: boolean
    art10hab11?: boolean
    art10mix11?: boolean
    art10rou11?: boolean
    art10fer11?: boolean
    art10inc11?: boolean
    naf11art12?: boolean
    art11act12?: boolean
    art11hab12?: boolean
    art11mix12?: boolean
    art11rou12?: boolean
    art11fer12?: boolean
    art11inc12?: boolean
    naf12art13?: boolean
    art12act13?: boolean
    art12hab13?: boolean
    art12mix13?: boolean
    art12rou13?: boolean
    art12fer13?: boolean
    art12inc13?: boolean
    naf13art14?: boolean
    art13act14?: boolean
    art13hab14?: boolean
    art13mix14?: boolean
    art13rou14?: boolean
    art13fer14?: boolean
    art13inc14?: boolean
    naf14art15?: boolean
    art14act15?: boolean
    art14hab15?: boolean
    art14mix15?: boolean
    art14rou15?: boolean
    art14fer15?: boolean
    art14inc15?: boolean
    naf15art16?: boolean
    art15act16?: boolean
    art15hab16?: boolean
    art15mix16?: boolean
    art15rou16?: boolean
    art15fer16?: boolean
    art15inc16?: boolean
    naf16art17?: boolean
    art16act17?: boolean
    art16hab17?: boolean
    art16mix17?: boolean
    art16rou17?: boolean
    art16fer17?: boolean
    art16inc17?: boolean
    naf17art18?: boolean
    art17act18?: boolean
    art17hab18?: boolean
    art17mix18?: boolean
    art17rou18?: boolean
    art17fer18?: boolean
    art17inc18?: boolean
    naf18art19?: boolean
    art18act19?: boolean
    art18hab19?: boolean
    art18mix19?: boolean
    art18rou19?: boolean
    art18fer19?: boolean
    art18inc19?: boolean
    naf19art20?: boolean
    art19act20?: boolean
    art19hab20?: boolean
    art19mix20?: boolean
    art19rou20?: boolean
    art19fer20?: boolean
    art19inc20?: boolean
    naf20art21?: boolean
    art20act21?: boolean
    art20hab21?: boolean
    art20mix21?: boolean
    art20rou21?: boolean
    art20fer21?: boolean
    art20inc21?: boolean
    naf21art22?: boolean
    art21act22?: boolean
    art21hab22?: boolean
    art21mix22?: boolean
    art21rou22?: boolean
    art21fer22?: boolean
    art21inc22?: boolean
    naf22art23?: boolean
    art22act23?: boolean
    art22hab23?: boolean
    art22mix23?: boolean
    art22rou23?: boolean
    art22fer23?: boolean
    art22inc23?: boolean
    naf09art23?: boolean
    art09act23?: boolean
    art09hab23?: boolean
    art09mix23?: boolean
    art09inc23?: boolean
    art09rou23?: boolean
    art09fer23?: boolean
    artcom0923?: boolean
    pop14?: boolean
    pop20?: boolean
    pop1420?: boolean
    men14?: boolean
    men20?: boolean
    men1420?: boolean
    emp14?: boolean
    emp20?: boolean
    emp1420?: boolean
    mepart1420?: boolean
    menhab1420?: boolean
    artpop1420?: boolean
    surfcom2023?: boolean
    C10_MEN?: boolean
    C15_MEN?: boolean
    C21_MEN?: boolean
  }, ExtArgs["result"]["consommation_espaces_naf"]>

  export type consommation_espaces_nafSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    index?: boolean
    code_geographique?: boolean
    libelle_geographique?: boolean
    epci?: boolean
    libelle_epci?: boolean
    departement?: boolean
    region?: boolean
    naf09art10?: boolean
    art09act10?: boolean
    art09hab10?: boolean
    art09mix10?: boolean
    art09rou10?: boolean
    art09fer10?: boolean
    art09inc10?: boolean
    naf10art11?: boolean
    art10act11?: boolean
    art10hab11?: boolean
    art10mix11?: boolean
    art10rou11?: boolean
    art10fer11?: boolean
    art10inc11?: boolean
    naf11art12?: boolean
    art11act12?: boolean
    art11hab12?: boolean
    art11mix12?: boolean
    art11rou12?: boolean
    art11fer12?: boolean
    art11inc12?: boolean
    naf12art13?: boolean
    art12act13?: boolean
    art12hab13?: boolean
    art12mix13?: boolean
    art12rou13?: boolean
    art12fer13?: boolean
    art12inc13?: boolean
    naf13art14?: boolean
    art13act14?: boolean
    art13hab14?: boolean
    art13mix14?: boolean
    art13rou14?: boolean
    art13fer14?: boolean
    art13inc14?: boolean
    naf14art15?: boolean
    art14act15?: boolean
    art14hab15?: boolean
    art14mix15?: boolean
    art14rou15?: boolean
    art14fer15?: boolean
    art14inc15?: boolean
    naf15art16?: boolean
    art15act16?: boolean
    art15hab16?: boolean
    art15mix16?: boolean
    art15rou16?: boolean
    art15fer16?: boolean
    art15inc16?: boolean
    naf16art17?: boolean
    art16act17?: boolean
    art16hab17?: boolean
    art16mix17?: boolean
    art16rou17?: boolean
    art16fer17?: boolean
    art16inc17?: boolean
    naf17art18?: boolean
    art17act18?: boolean
    art17hab18?: boolean
    art17mix18?: boolean
    art17rou18?: boolean
    art17fer18?: boolean
    art17inc18?: boolean
    naf18art19?: boolean
    art18act19?: boolean
    art18hab19?: boolean
    art18mix19?: boolean
    art18rou19?: boolean
    art18fer19?: boolean
    art18inc19?: boolean
    naf19art20?: boolean
    art19act20?: boolean
    art19hab20?: boolean
    art19mix20?: boolean
    art19rou20?: boolean
    art19fer20?: boolean
    art19inc20?: boolean
    naf20art21?: boolean
    art20act21?: boolean
    art20hab21?: boolean
    art20mix21?: boolean
    art20rou21?: boolean
    art20fer21?: boolean
    art20inc21?: boolean
    naf21art22?: boolean
    art21act22?: boolean
    art21hab22?: boolean
    art21mix22?: boolean
    art21rou22?: boolean
    art21fer22?: boolean
    art21inc22?: boolean
    naf22art23?: boolean
    art22act23?: boolean
    art22hab23?: boolean
    art22mix23?: boolean
    art22rou23?: boolean
    art22fer23?: boolean
    art22inc23?: boolean
    naf09art23?: boolean
    art09act23?: boolean
    art09hab23?: boolean
    art09mix23?: boolean
    art09inc23?: boolean
    art09rou23?: boolean
    art09fer23?: boolean
    artcom0923?: boolean
    pop14?: boolean
    pop20?: boolean
    pop1420?: boolean
    men14?: boolean
    men20?: boolean
    men1420?: boolean
    emp14?: boolean
    emp20?: boolean
    emp1420?: boolean
    mepart1420?: boolean
    menhab1420?: boolean
    artpop1420?: boolean
    surfcom2023?: boolean
    C10_MEN?: boolean
    C15_MEN?: boolean
    C21_MEN?: boolean
  }, ExtArgs["result"]["consommation_espaces_naf"]>

  export type consommation_espaces_nafSelectScalar = {
    index?: boolean
    code_geographique?: boolean
    libelle_geographique?: boolean
    epci?: boolean
    libelle_epci?: boolean
    departement?: boolean
    region?: boolean
    naf09art10?: boolean
    art09act10?: boolean
    art09hab10?: boolean
    art09mix10?: boolean
    art09rou10?: boolean
    art09fer10?: boolean
    art09inc10?: boolean
    naf10art11?: boolean
    art10act11?: boolean
    art10hab11?: boolean
    art10mix11?: boolean
    art10rou11?: boolean
    art10fer11?: boolean
    art10inc11?: boolean
    naf11art12?: boolean
    art11act12?: boolean
    art11hab12?: boolean
    art11mix12?: boolean
    art11rou12?: boolean
    art11fer12?: boolean
    art11inc12?: boolean
    naf12art13?: boolean
    art12act13?: boolean
    art12hab13?: boolean
    art12mix13?: boolean
    art12rou13?: boolean
    art12fer13?: boolean
    art12inc13?: boolean
    naf13art14?: boolean
    art13act14?: boolean
    art13hab14?: boolean
    art13mix14?: boolean
    art13rou14?: boolean
    art13fer14?: boolean
    art13inc14?: boolean
    naf14art15?: boolean
    art14act15?: boolean
    art14hab15?: boolean
    art14mix15?: boolean
    art14rou15?: boolean
    art14fer15?: boolean
    art14inc15?: boolean
    naf15art16?: boolean
    art15act16?: boolean
    art15hab16?: boolean
    art15mix16?: boolean
    art15rou16?: boolean
    art15fer16?: boolean
    art15inc16?: boolean
    naf16art17?: boolean
    art16act17?: boolean
    art16hab17?: boolean
    art16mix17?: boolean
    art16rou17?: boolean
    art16fer17?: boolean
    art16inc17?: boolean
    naf17art18?: boolean
    art17act18?: boolean
    art17hab18?: boolean
    art17mix18?: boolean
    art17rou18?: boolean
    art17fer18?: boolean
    art17inc18?: boolean
    naf18art19?: boolean
    art18act19?: boolean
    art18hab19?: boolean
    art18mix19?: boolean
    art18rou19?: boolean
    art18fer19?: boolean
    art18inc19?: boolean
    naf19art20?: boolean
    art19act20?: boolean
    art19hab20?: boolean
    art19mix20?: boolean
    art19rou20?: boolean
    art19fer20?: boolean
    art19inc20?: boolean
    naf20art21?: boolean
    art20act21?: boolean
    art20hab21?: boolean
    art20mix21?: boolean
    art20rou21?: boolean
    art20fer21?: boolean
    art20inc21?: boolean
    naf21art22?: boolean
    art21act22?: boolean
    art21hab22?: boolean
    art21mix22?: boolean
    art21rou22?: boolean
    art21fer22?: boolean
    art21inc22?: boolean
    naf22art23?: boolean
    art22act23?: boolean
    art22hab23?: boolean
    art22mix23?: boolean
    art22rou23?: boolean
    art22fer23?: boolean
    art22inc23?: boolean
    naf09art23?: boolean
    art09act23?: boolean
    art09hab23?: boolean
    art09mix23?: boolean
    art09inc23?: boolean
    art09rou23?: boolean
    art09fer23?: boolean
    artcom0923?: boolean
    pop14?: boolean
    pop20?: boolean
    pop1420?: boolean
    men14?: boolean
    men20?: boolean
    men1420?: boolean
    emp14?: boolean
    emp20?: boolean
    emp1420?: boolean
    mepart1420?: boolean
    menhab1420?: boolean
    artpop1420?: boolean
    surfcom2023?: boolean
    C10_MEN?: boolean
    C15_MEN?: boolean
    C21_MEN?: boolean
  }

  export type consommation_espaces_nafOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"index" | "code_geographique" | "libelle_geographique" | "epci" | "libelle_epci" | "departement" | "region" | "naf09art10" | "art09act10" | "art09hab10" | "art09mix10" | "art09rou10" | "art09fer10" | "art09inc10" | "naf10art11" | "art10act11" | "art10hab11" | "art10mix11" | "art10rou11" | "art10fer11" | "art10inc11" | "naf11art12" | "art11act12" | "art11hab12" | "art11mix12" | "art11rou12" | "art11fer12" | "art11inc12" | "naf12art13" | "art12act13" | "art12hab13" | "art12mix13" | "art12rou13" | "art12fer13" | "art12inc13" | "naf13art14" | "art13act14" | "art13hab14" | "art13mix14" | "art13rou14" | "art13fer14" | "art13inc14" | "naf14art15" | "art14act15" | "art14hab15" | "art14mix15" | "art14rou15" | "art14fer15" | "art14inc15" | "naf15art16" | "art15act16" | "art15hab16" | "art15mix16" | "art15rou16" | "art15fer16" | "art15inc16" | "naf16art17" | "art16act17" | "art16hab17" | "art16mix17" | "art16rou17" | "art16fer17" | "art16inc17" | "naf17art18" | "art17act18" | "art17hab18" | "art17mix18" | "art17rou18" | "art17fer18" | "art17inc18" | "naf18art19" | "art18act19" | "art18hab19" | "art18mix19" | "art18rou19" | "art18fer19" | "art18inc19" | "naf19art20" | "art19act20" | "art19hab20" | "art19mix20" | "art19rou20" | "art19fer20" | "art19inc20" | "naf20art21" | "art20act21" | "art20hab21" | "art20mix21" | "art20rou21" | "art20fer21" | "art20inc21" | "naf21art22" | "art21act22" | "art21hab22" | "art21mix22" | "art21rou22" | "art21fer22" | "art21inc22" | "naf22art23" | "art22act23" | "art22hab23" | "art22mix23" | "art22rou23" | "art22fer23" | "art22inc23" | "naf09art23" | "art09act23" | "art09hab23" | "art09mix23" | "art09inc23" | "art09rou23" | "art09fer23" | "artcom0923" | "pop14" | "pop20" | "pop1420" | "men14" | "men20" | "men1420" | "emp14" | "emp20" | "emp1420" | "mepart1420" | "menhab1420" | "artpop1420" | "surfcom2023" | "C10_MEN" | "C15_MEN" | "C21_MEN", ExtArgs["result"]["consommation_espaces_naf"]>

  export type $consommation_espaces_nafPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "consommation_espaces_naf"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      index: bigint
      code_geographique: string
      libelle_geographique: string
      epci: string
      libelle_epci: string
      departement: string
      region: number
      naf09art10: number
      art09act10: number
      art09hab10: number
      art09mix10: number
      art09rou10: number
      art09fer10: number
      art09inc10: number
      naf10art11: number
      art10act11: number
      art10hab11: number
      art10mix11: number
      art10rou11: number
      art10fer11: number
      art10inc11: number
      naf11art12: number
      art11act12: number
      art11hab12: number
      art11mix12: number
      art11rou12: number
      art11fer12: number
      art11inc12: number
      naf12art13: number
      art12act13: number
      art12hab13: number
      art12mix13: number
      art12rou13: number
      art12fer13: number
      art12inc13: number
      naf13art14: number
      art13act14: number
      art13hab14: number
      art13mix14: number
      art13rou14: number
      art13fer14: number
      art13inc14: number
      naf14art15: number
      art14act15: number
      art14hab15: number
      art14mix15: number
      art14rou15: number
      art14fer15: number
      art14inc15: number
      naf15art16: number
      art15act16: number
      art15hab16: number
      art15mix16: number
      art15rou16: number
      art15fer16: number
      art15inc16: number
      naf16art17: number
      art16act17: number
      art16hab17: number
      art16mix17: number
      art16rou17: number
      art16fer17: number
      art16inc17: number
      naf17art18: number
      art17act18: number
      art17hab18: number
      art17mix18: number
      art17rou18: number
      art17fer18: number
      art17inc18: number
      naf18art19: number
      art18act19: number
      art18hab19: number
      art18mix19: number
      art18rou19: number
      art18fer19: number
      art18inc19: number
      naf19art20: number
      art19act20: number
      art19hab20: number
      art19mix20: number
      art19rou20: number
      art19fer20: number
      art19inc20: number
      naf20art21: number
      art20act21: number
      art20hab21: number
      art20mix21: number
      art20rou21: number
      art20fer21: number
      art20inc21: number
      naf21art22: number
      art21act22: number
      art21hab22: number
      art21mix22: number
      art21rou22: number
      art21fer22: number
      art21inc22: number
      naf22art23: number
      art22act23: number
      art22hab23: number
      art22mix23: number
      art22rou23: number
      art22fer23: number
      art22inc23: number
      naf09art23: number
      art09act23: number
      art09hab23: number
      art09mix23: number
      art09inc23: number
      art09rou23: number
      art09fer23: number
      artcom0923: number
      pop14: number
      pop20: number
      pop1420: number
      men14: number
      men20: number
      men1420: number
      emp14: number
      emp20: number
      emp1420: number
      mepart1420: number
      menhab1420: number
      artpop1420: number | null
      surfcom2023: number
      C10_MEN: number | null
      C15_MEN: number | null
      C21_MEN: number | null
    }, ExtArgs["result"]["consommation_espaces_naf"]>
    composites: {}
  }

  type consommation_espaces_nafGetPayload<S extends boolean | null | undefined | consommation_espaces_nafDefaultArgs> = $Result.GetResult<Prisma.$consommation_espaces_nafPayload, S>

  type consommation_espaces_nafCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<consommation_espaces_nafFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Consommation_espaces_nafCountAggregateInputType | true
    }

  export interface consommation_espaces_nafDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['consommation_espaces_naf'], meta: { name: 'consommation_espaces_naf' } }
    /**
     * Find zero or one Consommation_espaces_naf that matches the filter.
     * @param {consommation_espaces_nafFindUniqueArgs} args - Arguments to find a Consommation_espaces_naf
     * @example
     * // Get one Consommation_espaces_naf
     * const consommation_espaces_naf = await prisma.consommation_espaces_naf.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends consommation_espaces_nafFindUniqueArgs>(args: SelectSubset<T, consommation_espaces_nafFindUniqueArgs<ExtArgs>>): Prisma__consommation_espaces_nafClient<$Result.GetResult<Prisma.$consommation_espaces_nafPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Consommation_espaces_naf that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {consommation_espaces_nafFindUniqueOrThrowArgs} args - Arguments to find a Consommation_espaces_naf
     * @example
     * // Get one Consommation_espaces_naf
     * const consommation_espaces_naf = await prisma.consommation_espaces_naf.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends consommation_espaces_nafFindUniqueOrThrowArgs>(args: SelectSubset<T, consommation_espaces_nafFindUniqueOrThrowArgs<ExtArgs>>): Prisma__consommation_espaces_nafClient<$Result.GetResult<Prisma.$consommation_espaces_nafPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Consommation_espaces_naf that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {consommation_espaces_nafFindFirstArgs} args - Arguments to find a Consommation_espaces_naf
     * @example
     * // Get one Consommation_espaces_naf
     * const consommation_espaces_naf = await prisma.consommation_espaces_naf.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends consommation_espaces_nafFindFirstArgs>(args?: SelectSubset<T, consommation_espaces_nafFindFirstArgs<ExtArgs>>): Prisma__consommation_espaces_nafClient<$Result.GetResult<Prisma.$consommation_espaces_nafPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Consommation_espaces_naf that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {consommation_espaces_nafFindFirstOrThrowArgs} args - Arguments to find a Consommation_espaces_naf
     * @example
     * // Get one Consommation_espaces_naf
     * const consommation_espaces_naf = await prisma.consommation_espaces_naf.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends consommation_espaces_nafFindFirstOrThrowArgs>(args?: SelectSubset<T, consommation_espaces_nafFindFirstOrThrowArgs<ExtArgs>>): Prisma__consommation_espaces_nafClient<$Result.GetResult<Prisma.$consommation_espaces_nafPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Consommation_espaces_nafs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {consommation_espaces_nafFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Consommation_espaces_nafs
     * const consommation_espaces_nafs = await prisma.consommation_espaces_naf.findMany()
     * 
     * // Get first 10 Consommation_espaces_nafs
     * const consommation_espaces_nafs = await prisma.consommation_espaces_naf.findMany({ take: 10 })
     * 
     * // Only select the `index`
     * const consommation_espaces_nafWithIndexOnly = await prisma.consommation_espaces_naf.findMany({ select: { index: true } })
     * 
     */
    findMany<T extends consommation_espaces_nafFindManyArgs>(args?: SelectSubset<T, consommation_espaces_nafFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$consommation_espaces_nafPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Consommation_espaces_naf.
     * @param {consommation_espaces_nafCreateArgs} args - Arguments to create a Consommation_espaces_naf.
     * @example
     * // Create one Consommation_espaces_naf
     * const Consommation_espaces_naf = await prisma.consommation_espaces_naf.create({
     *   data: {
     *     // ... data to create a Consommation_espaces_naf
     *   }
     * })
     * 
     */
    create<T extends consommation_espaces_nafCreateArgs>(args: SelectSubset<T, consommation_espaces_nafCreateArgs<ExtArgs>>): Prisma__consommation_espaces_nafClient<$Result.GetResult<Prisma.$consommation_espaces_nafPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Consommation_espaces_nafs.
     * @param {consommation_espaces_nafCreateManyArgs} args - Arguments to create many Consommation_espaces_nafs.
     * @example
     * // Create many Consommation_espaces_nafs
     * const consommation_espaces_naf = await prisma.consommation_espaces_naf.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends consommation_espaces_nafCreateManyArgs>(args?: SelectSubset<T, consommation_espaces_nafCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Consommation_espaces_nafs and returns the data saved in the database.
     * @param {consommation_espaces_nafCreateManyAndReturnArgs} args - Arguments to create many Consommation_espaces_nafs.
     * @example
     * // Create many Consommation_espaces_nafs
     * const consommation_espaces_naf = await prisma.consommation_espaces_naf.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Consommation_espaces_nafs and only return the `index`
     * const consommation_espaces_nafWithIndexOnly = await prisma.consommation_espaces_naf.createManyAndReturn({
     *   select: { index: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends consommation_espaces_nafCreateManyAndReturnArgs>(args?: SelectSubset<T, consommation_espaces_nafCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$consommation_espaces_nafPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Consommation_espaces_naf.
     * @param {consommation_espaces_nafDeleteArgs} args - Arguments to delete one Consommation_espaces_naf.
     * @example
     * // Delete one Consommation_espaces_naf
     * const Consommation_espaces_naf = await prisma.consommation_espaces_naf.delete({
     *   where: {
     *     // ... filter to delete one Consommation_espaces_naf
     *   }
     * })
     * 
     */
    delete<T extends consommation_espaces_nafDeleteArgs>(args: SelectSubset<T, consommation_espaces_nafDeleteArgs<ExtArgs>>): Prisma__consommation_espaces_nafClient<$Result.GetResult<Prisma.$consommation_espaces_nafPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Consommation_espaces_naf.
     * @param {consommation_espaces_nafUpdateArgs} args - Arguments to update one Consommation_espaces_naf.
     * @example
     * // Update one Consommation_espaces_naf
     * const consommation_espaces_naf = await prisma.consommation_espaces_naf.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends consommation_espaces_nafUpdateArgs>(args: SelectSubset<T, consommation_espaces_nafUpdateArgs<ExtArgs>>): Prisma__consommation_espaces_nafClient<$Result.GetResult<Prisma.$consommation_espaces_nafPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Consommation_espaces_nafs.
     * @param {consommation_espaces_nafDeleteManyArgs} args - Arguments to filter Consommation_espaces_nafs to delete.
     * @example
     * // Delete a few Consommation_espaces_nafs
     * const { count } = await prisma.consommation_espaces_naf.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends consommation_espaces_nafDeleteManyArgs>(args?: SelectSubset<T, consommation_espaces_nafDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Consommation_espaces_nafs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {consommation_espaces_nafUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Consommation_espaces_nafs
     * const consommation_espaces_naf = await prisma.consommation_espaces_naf.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends consommation_espaces_nafUpdateManyArgs>(args: SelectSubset<T, consommation_espaces_nafUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Consommation_espaces_nafs and returns the data updated in the database.
     * @param {consommation_espaces_nafUpdateManyAndReturnArgs} args - Arguments to update many Consommation_espaces_nafs.
     * @example
     * // Update many Consommation_espaces_nafs
     * const consommation_espaces_naf = await prisma.consommation_espaces_naf.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Consommation_espaces_nafs and only return the `index`
     * const consommation_espaces_nafWithIndexOnly = await prisma.consommation_espaces_naf.updateManyAndReturn({
     *   select: { index: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends consommation_espaces_nafUpdateManyAndReturnArgs>(args: SelectSubset<T, consommation_espaces_nafUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$consommation_espaces_nafPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Consommation_espaces_naf.
     * @param {consommation_espaces_nafUpsertArgs} args - Arguments to update or create a Consommation_espaces_naf.
     * @example
     * // Update or create a Consommation_espaces_naf
     * const consommation_espaces_naf = await prisma.consommation_espaces_naf.upsert({
     *   create: {
     *     // ... data to create a Consommation_espaces_naf
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Consommation_espaces_naf we want to update
     *   }
     * })
     */
    upsert<T extends consommation_espaces_nafUpsertArgs>(args: SelectSubset<T, consommation_espaces_nafUpsertArgs<ExtArgs>>): Prisma__consommation_espaces_nafClient<$Result.GetResult<Prisma.$consommation_espaces_nafPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Consommation_espaces_nafs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {consommation_espaces_nafCountArgs} args - Arguments to filter Consommation_espaces_nafs to count.
     * @example
     * // Count the number of Consommation_espaces_nafs
     * const count = await prisma.consommation_espaces_naf.count({
     *   where: {
     *     // ... the filter for the Consommation_espaces_nafs we want to count
     *   }
     * })
    **/
    count<T extends consommation_espaces_nafCountArgs>(
      args?: Subset<T, consommation_espaces_nafCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Consommation_espaces_nafCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Consommation_espaces_naf.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Consommation_espaces_nafAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Consommation_espaces_nafAggregateArgs>(args: Subset<T, Consommation_espaces_nafAggregateArgs>): Prisma.PrismaPromise<GetConsommation_espaces_nafAggregateType<T>>

    /**
     * Group by Consommation_espaces_naf.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {consommation_espaces_nafGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends consommation_espaces_nafGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: consommation_espaces_nafGroupByArgs['orderBy'] }
        : { orderBy?: consommation_espaces_nafGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, consommation_espaces_nafGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConsommation_espaces_nafGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the consommation_espaces_naf model
   */
  readonly fields: consommation_espaces_nafFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for consommation_espaces_naf.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__consommation_espaces_nafClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the consommation_espaces_naf model
   */ 
  interface consommation_espaces_nafFieldRefs {
    readonly index: FieldRef<"consommation_espaces_naf", 'BigInt'>
    readonly code_geographique: FieldRef<"consommation_espaces_naf", 'String'>
    readonly libelle_geographique: FieldRef<"consommation_espaces_naf", 'String'>
    readonly epci: FieldRef<"consommation_espaces_naf", 'String'>
    readonly libelle_epci: FieldRef<"consommation_espaces_naf", 'String'>
    readonly departement: FieldRef<"consommation_espaces_naf", 'String'>
    readonly region: FieldRef<"consommation_espaces_naf", 'Int'>
    readonly naf09art10: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art09act10: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art09hab10: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art09mix10: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art09rou10: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art09fer10: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art09inc10: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly naf10art11: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art10act11: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art10hab11: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art10mix11: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art10rou11: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art10fer11: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art10inc11: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly naf11art12: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art11act12: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art11hab12: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art11mix12: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art11rou12: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art11fer12: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art11inc12: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly naf12art13: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art12act13: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art12hab13: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art12mix13: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art12rou13: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art12fer13: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art12inc13: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly naf13art14: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art13act14: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art13hab14: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art13mix14: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art13rou14: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art13fer14: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art13inc14: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly naf14art15: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art14act15: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art14hab15: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art14mix15: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art14rou15: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art14fer15: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art14inc15: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly naf15art16: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art15act16: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art15hab16: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art15mix16: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art15rou16: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art15fer16: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art15inc16: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly naf16art17: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art16act17: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art16hab17: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art16mix17: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art16rou17: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art16fer17: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art16inc17: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly naf17art18: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art17act18: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art17hab18: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art17mix18: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art17rou18: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art17fer18: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art17inc18: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly naf18art19: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art18act19: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art18hab19: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art18mix19: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art18rou19: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art18fer19: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art18inc19: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly naf19art20: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art19act20: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art19hab20: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art19mix20: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art19rou20: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art19fer20: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art19inc20: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly naf20art21: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art20act21: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art20hab21: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art20mix21: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art20rou21: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art20fer21: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art20inc21: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly naf21art22: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art21act22: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art21hab22: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art21mix22: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art21rou22: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art21fer22: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art21inc22: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly naf22art23: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art22act23: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art22hab23: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art22mix23: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art22rou23: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art22fer23: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art22inc23: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly naf09art23: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art09act23: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art09hab23: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art09mix23: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art09inc23: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art09rou23: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly art09fer23: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly artcom0923: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly pop14: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly pop20: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly pop1420: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly men14: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly men20: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly men1420: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly emp14: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly emp20: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly emp1420: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly mepart1420: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly menhab1420: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly artpop1420: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly surfcom2023: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly C10_MEN: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly C15_MEN: FieldRef<"consommation_espaces_naf", 'Float'>
    readonly C21_MEN: FieldRef<"consommation_espaces_naf", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * consommation_espaces_naf findUnique
   */
  export type consommation_espaces_nafFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the consommation_espaces_naf
     */
    select?: consommation_espaces_nafSelect<ExtArgs> | null
    /**
     * Omit specific fields from the consommation_espaces_naf
     */
    omit?: consommation_espaces_nafOmit<ExtArgs> | null
    /**
     * Filter, which consommation_espaces_naf to fetch.
     */
    where: consommation_espaces_nafWhereUniqueInput
  }

  /**
   * consommation_espaces_naf findUniqueOrThrow
   */
  export type consommation_espaces_nafFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the consommation_espaces_naf
     */
    select?: consommation_espaces_nafSelect<ExtArgs> | null
    /**
     * Omit specific fields from the consommation_espaces_naf
     */
    omit?: consommation_espaces_nafOmit<ExtArgs> | null
    /**
     * Filter, which consommation_espaces_naf to fetch.
     */
    where: consommation_espaces_nafWhereUniqueInput
  }

  /**
   * consommation_espaces_naf findFirst
   */
  export type consommation_espaces_nafFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the consommation_espaces_naf
     */
    select?: consommation_espaces_nafSelect<ExtArgs> | null
    /**
     * Omit specific fields from the consommation_espaces_naf
     */
    omit?: consommation_espaces_nafOmit<ExtArgs> | null
    /**
     * Filter, which consommation_espaces_naf to fetch.
     */
    where?: consommation_espaces_nafWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of consommation_espaces_nafs to fetch.
     */
    orderBy?: consommation_espaces_nafOrderByWithRelationInput | consommation_espaces_nafOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for consommation_espaces_nafs.
     */
    cursor?: consommation_espaces_nafWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` consommation_espaces_nafs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` consommation_espaces_nafs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of consommation_espaces_nafs.
     */
    distinct?: Consommation_espaces_nafScalarFieldEnum | Consommation_espaces_nafScalarFieldEnum[]
  }

  /**
   * consommation_espaces_naf findFirstOrThrow
   */
  export type consommation_espaces_nafFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the consommation_espaces_naf
     */
    select?: consommation_espaces_nafSelect<ExtArgs> | null
    /**
     * Omit specific fields from the consommation_espaces_naf
     */
    omit?: consommation_espaces_nafOmit<ExtArgs> | null
    /**
     * Filter, which consommation_espaces_naf to fetch.
     */
    where?: consommation_espaces_nafWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of consommation_espaces_nafs to fetch.
     */
    orderBy?: consommation_espaces_nafOrderByWithRelationInput | consommation_espaces_nafOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for consommation_espaces_nafs.
     */
    cursor?: consommation_espaces_nafWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` consommation_espaces_nafs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` consommation_espaces_nafs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of consommation_espaces_nafs.
     */
    distinct?: Consommation_espaces_nafScalarFieldEnum | Consommation_espaces_nafScalarFieldEnum[]
  }

  /**
   * consommation_espaces_naf findMany
   */
  export type consommation_espaces_nafFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the consommation_espaces_naf
     */
    select?: consommation_espaces_nafSelect<ExtArgs> | null
    /**
     * Omit specific fields from the consommation_espaces_naf
     */
    omit?: consommation_espaces_nafOmit<ExtArgs> | null
    /**
     * Filter, which consommation_espaces_nafs to fetch.
     */
    where?: consommation_espaces_nafWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of consommation_espaces_nafs to fetch.
     */
    orderBy?: consommation_espaces_nafOrderByWithRelationInput | consommation_espaces_nafOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing consommation_espaces_nafs.
     */
    cursor?: consommation_espaces_nafWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` consommation_espaces_nafs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` consommation_espaces_nafs.
     */
    skip?: number
    distinct?: Consommation_espaces_nafScalarFieldEnum | Consommation_espaces_nafScalarFieldEnum[]
  }

  /**
   * consommation_espaces_naf create
   */
  export type consommation_espaces_nafCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the consommation_espaces_naf
     */
    select?: consommation_espaces_nafSelect<ExtArgs> | null
    /**
     * Omit specific fields from the consommation_espaces_naf
     */
    omit?: consommation_espaces_nafOmit<ExtArgs> | null
    /**
     * The data needed to create a consommation_espaces_naf.
     */
    data: XOR<consommation_espaces_nafCreateInput, consommation_espaces_nafUncheckedCreateInput>
  }

  /**
   * consommation_espaces_naf createMany
   */
  export type consommation_espaces_nafCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many consommation_espaces_nafs.
     */
    data: consommation_espaces_nafCreateManyInput | consommation_espaces_nafCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * consommation_espaces_naf createManyAndReturn
   */
  export type consommation_espaces_nafCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the consommation_espaces_naf
     */
    select?: consommation_espaces_nafSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the consommation_espaces_naf
     */
    omit?: consommation_espaces_nafOmit<ExtArgs> | null
    /**
     * The data used to create many consommation_espaces_nafs.
     */
    data: consommation_espaces_nafCreateManyInput | consommation_espaces_nafCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * consommation_espaces_naf update
   */
  export type consommation_espaces_nafUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the consommation_espaces_naf
     */
    select?: consommation_espaces_nafSelect<ExtArgs> | null
    /**
     * Omit specific fields from the consommation_espaces_naf
     */
    omit?: consommation_espaces_nafOmit<ExtArgs> | null
    /**
     * The data needed to update a consommation_espaces_naf.
     */
    data: XOR<consommation_espaces_nafUpdateInput, consommation_espaces_nafUncheckedUpdateInput>
    /**
     * Choose, which consommation_espaces_naf to update.
     */
    where: consommation_espaces_nafWhereUniqueInput
  }

  /**
   * consommation_espaces_naf updateMany
   */
  export type consommation_espaces_nafUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update consommation_espaces_nafs.
     */
    data: XOR<consommation_espaces_nafUpdateManyMutationInput, consommation_espaces_nafUncheckedUpdateManyInput>
    /**
     * Filter which consommation_espaces_nafs to update
     */
    where?: consommation_espaces_nafWhereInput
    /**
     * Limit how many consommation_espaces_nafs to update.
     */
    limit?: number
  }

  /**
   * consommation_espaces_naf updateManyAndReturn
   */
  export type consommation_espaces_nafUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the consommation_espaces_naf
     */
    select?: consommation_espaces_nafSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the consommation_espaces_naf
     */
    omit?: consommation_espaces_nafOmit<ExtArgs> | null
    /**
     * The data used to update consommation_espaces_nafs.
     */
    data: XOR<consommation_espaces_nafUpdateManyMutationInput, consommation_espaces_nafUncheckedUpdateManyInput>
    /**
     * Filter which consommation_espaces_nafs to update
     */
    where?: consommation_espaces_nafWhereInput
    /**
     * Limit how many consommation_espaces_nafs to update.
     */
    limit?: number
  }

  /**
   * consommation_espaces_naf upsert
   */
  export type consommation_espaces_nafUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the consommation_espaces_naf
     */
    select?: consommation_espaces_nafSelect<ExtArgs> | null
    /**
     * Omit specific fields from the consommation_espaces_naf
     */
    omit?: consommation_espaces_nafOmit<ExtArgs> | null
    /**
     * The filter to search for the consommation_espaces_naf to update in case it exists.
     */
    where: consommation_espaces_nafWhereUniqueInput
    /**
     * In case the consommation_espaces_naf found by the `where` argument doesn't exist, create a new consommation_espaces_naf with this data.
     */
    create: XOR<consommation_espaces_nafCreateInput, consommation_espaces_nafUncheckedCreateInput>
    /**
     * In case the consommation_espaces_naf was found with the provided `where` argument, update it with this data.
     */
    update: XOR<consommation_espaces_nafUpdateInput, consommation_espaces_nafUncheckedUpdateInput>
  }

  /**
   * consommation_espaces_naf delete
   */
  export type consommation_espaces_nafDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the consommation_espaces_naf
     */
    select?: consommation_espaces_nafSelect<ExtArgs> | null
    /**
     * Omit specific fields from the consommation_espaces_naf
     */
    omit?: consommation_espaces_nafOmit<ExtArgs> | null
    /**
     * Filter which consommation_espaces_naf to delete.
     */
    where: consommation_espaces_nafWhereUniqueInput
  }

  /**
   * consommation_espaces_naf deleteMany
   */
  export type consommation_espaces_nafDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which consommation_espaces_nafs to delete
     */
    where?: consommation_espaces_nafWhereInput
    /**
     * Limit how many consommation_espaces_nafs to delete.
     */
    limit?: number
  }

  /**
   * consommation_espaces_naf without action
   */
  export type consommation_espaces_nafDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the consommation_espaces_naf
     */
    select?: consommation_espaces_nafSelect<ExtArgs> | null
    /**
     * Omit specific fields from the consommation_espaces_naf
     */
    omit?: consommation_espaces_nafOmit<ExtArgs> | null
  }


  /**
   * Model north_star_metric
   */

  export type AggregateNorth_star_metric = {
    _count: North_star_metricCountAggregateOutputType | null
    _avg: North_star_metricAvgAggregateOutputType | null
    _sum: North_star_metricSumAggregateOutputType | null
    _min: North_star_metricMinAggregateOutputType | null
    _max: North_star_metricMaxAggregateOutputType | null
  }

  export type North_star_metricAvgAggregateOutputType = {
    pk: number | null
  }

  export type North_star_metricSumAggregateOutputType = {
    pk: number | null
  }

  export type North_star_metricMinAggregateOutputType = {
    pk: number | null
    value: string | null
    date: Date | null
  }

  export type North_star_metricMaxAggregateOutputType = {
    pk: number | null
    value: string | null
    date: Date | null
  }

  export type North_star_metricCountAggregateOutputType = {
    pk: number
    value: number
    date: number
    _all: number
  }


  export type North_star_metricAvgAggregateInputType = {
    pk?: true
  }

  export type North_star_metricSumAggregateInputType = {
    pk?: true
  }

  export type North_star_metricMinAggregateInputType = {
    pk?: true
    value?: true
    date?: true
  }

  export type North_star_metricMaxAggregateInputType = {
    pk?: true
    value?: true
    date?: true
  }

  export type North_star_metricCountAggregateInputType = {
    pk?: true
    value?: true
    date?: true
    _all?: true
  }

  export type North_star_metricAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which north_star_metric to aggregate.
     */
    where?: north_star_metricWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of north_star_metrics to fetch.
     */
    orderBy?: north_star_metricOrderByWithRelationInput | north_star_metricOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: north_star_metricWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` north_star_metrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` north_star_metrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned north_star_metrics
    **/
    _count?: true | North_star_metricCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: North_star_metricAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: North_star_metricSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: North_star_metricMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: North_star_metricMaxAggregateInputType
  }

  export type GetNorth_star_metricAggregateType<T extends North_star_metricAggregateArgs> = {
        [P in keyof T & keyof AggregateNorth_star_metric]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNorth_star_metric[P]>
      : GetScalarType<T[P], AggregateNorth_star_metric[P]>
  }




  export type north_star_metricGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: north_star_metricWhereInput
    orderBy?: north_star_metricOrderByWithAggregationInput | north_star_metricOrderByWithAggregationInput[]
    by: North_star_metricScalarFieldEnum[] | North_star_metricScalarFieldEnum
    having?: north_star_metricScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: North_star_metricCountAggregateInputType | true
    _avg?: North_star_metricAvgAggregateInputType
    _sum?: North_star_metricSumAggregateInputType
    _min?: North_star_metricMinAggregateInputType
    _max?: North_star_metricMaxAggregateInputType
  }

  export type North_star_metricGroupByOutputType = {
    pk: number
    value: string
    date: Date
    _count: North_star_metricCountAggregateOutputType | null
    _avg: North_star_metricAvgAggregateOutputType | null
    _sum: North_star_metricSumAggregateOutputType | null
    _min: North_star_metricMinAggregateOutputType | null
    _max: North_star_metricMaxAggregateOutputType | null
  }

  type GetNorth_star_metricGroupByPayload<T extends north_star_metricGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<North_star_metricGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof North_star_metricGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], North_star_metricGroupByOutputType[P]>
            : GetScalarType<T[P], North_star_metricGroupByOutputType[P]>
        }
      >
    >


  export type north_star_metricSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    pk?: boolean
    value?: boolean
    date?: boolean
  }, ExtArgs["result"]["north_star_metric"]>

  export type north_star_metricSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    pk?: boolean
    value?: boolean
    date?: boolean
  }, ExtArgs["result"]["north_star_metric"]>

  export type north_star_metricSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    pk?: boolean
    value?: boolean
    date?: boolean
  }, ExtArgs["result"]["north_star_metric"]>

  export type north_star_metricSelectScalar = {
    pk?: boolean
    value?: boolean
    date?: boolean
  }

  export type north_star_metricOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"pk" | "value" | "date", ExtArgs["result"]["north_star_metric"]>

  export type $north_star_metricPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "north_star_metric"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      pk: number
      value: string
      date: Date
    }, ExtArgs["result"]["north_star_metric"]>
    composites: {}
  }

  type north_star_metricGetPayload<S extends boolean | null | undefined | north_star_metricDefaultArgs> = $Result.GetResult<Prisma.$north_star_metricPayload, S>

  type north_star_metricCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<north_star_metricFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: North_star_metricCountAggregateInputType | true
    }

  export interface north_star_metricDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['north_star_metric'], meta: { name: 'north_star_metric' } }
    /**
     * Find zero or one North_star_metric that matches the filter.
     * @param {north_star_metricFindUniqueArgs} args - Arguments to find a North_star_metric
     * @example
     * // Get one North_star_metric
     * const north_star_metric = await prisma.north_star_metric.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends north_star_metricFindUniqueArgs>(args: SelectSubset<T, north_star_metricFindUniqueArgs<ExtArgs>>): Prisma__north_star_metricClient<$Result.GetResult<Prisma.$north_star_metricPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one North_star_metric that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {north_star_metricFindUniqueOrThrowArgs} args - Arguments to find a North_star_metric
     * @example
     * // Get one North_star_metric
     * const north_star_metric = await prisma.north_star_metric.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends north_star_metricFindUniqueOrThrowArgs>(args: SelectSubset<T, north_star_metricFindUniqueOrThrowArgs<ExtArgs>>): Prisma__north_star_metricClient<$Result.GetResult<Prisma.$north_star_metricPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first North_star_metric that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {north_star_metricFindFirstArgs} args - Arguments to find a North_star_metric
     * @example
     * // Get one North_star_metric
     * const north_star_metric = await prisma.north_star_metric.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends north_star_metricFindFirstArgs>(args?: SelectSubset<T, north_star_metricFindFirstArgs<ExtArgs>>): Prisma__north_star_metricClient<$Result.GetResult<Prisma.$north_star_metricPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first North_star_metric that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {north_star_metricFindFirstOrThrowArgs} args - Arguments to find a North_star_metric
     * @example
     * // Get one North_star_metric
     * const north_star_metric = await prisma.north_star_metric.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends north_star_metricFindFirstOrThrowArgs>(args?: SelectSubset<T, north_star_metricFindFirstOrThrowArgs<ExtArgs>>): Prisma__north_star_metricClient<$Result.GetResult<Prisma.$north_star_metricPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more North_star_metrics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {north_star_metricFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all North_star_metrics
     * const north_star_metrics = await prisma.north_star_metric.findMany()
     * 
     * // Get first 10 North_star_metrics
     * const north_star_metrics = await prisma.north_star_metric.findMany({ take: 10 })
     * 
     * // Only select the `pk`
     * const north_star_metricWithPkOnly = await prisma.north_star_metric.findMany({ select: { pk: true } })
     * 
     */
    findMany<T extends north_star_metricFindManyArgs>(args?: SelectSubset<T, north_star_metricFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$north_star_metricPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a North_star_metric.
     * @param {north_star_metricCreateArgs} args - Arguments to create a North_star_metric.
     * @example
     * // Create one North_star_metric
     * const North_star_metric = await prisma.north_star_metric.create({
     *   data: {
     *     // ... data to create a North_star_metric
     *   }
     * })
     * 
     */
    create<T extends north_star_metricCreateArgs>(args: SelectSubset<T, north_star_metricCreateArgs<ExtArgs>>): Prisma__north_star_metricClient<$Result.GetResult<Prisma.$north_star_metricPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many North_star_metrics.
     * @param {north_star_metricCreateManyArgs} args - Arguments to create many North_star_metrics.
     * @example
     * // Create many North_star_metrics
     * const north_star_metric = await prisma.north_star_metric.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends north_star_metricCreateManyArgs>(args?: SelectSubset<T, north_star_metricCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many North_star_metrics and returns the data saved in the database.
     * @param {north_star_metricCreateManyAndReturnArgs} args - Arguments to create many North_star_metrics.
     * @example
     * // Create many North_star_metrics
     * const north_star_metric = await prisma.north_star_metric.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many North_star_metrics and only return the `pk`
     * const north_star_metricWithPkOnly = await prisma.north_star_metric.createManyAndReturn({
     *   select: { pk: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends north_star_metricCreateManyAndReturnArgs>(args?: SelectSubset<T, north_star_metricCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$north_star_metricPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a North_star_metric.
     * @param {north_star_metricDeleteArgs} args - Arguments to delete one North_star_metric.
     * @example
     * // Delete one North_star_metric
     * const North_star_metric = await prisma.north_star_metric.delete({
     *   where: {
     *     // ... filter to delete one North_star_metric
     *   }
     * })
     * 
     */
    delete<T extends north_star_metricDeleteArgs>(args: SelectSubset<T, north_star_metricDeleteArgs<ExtArgs>>): Prisma__north_star_metricClient<$Result.GetResult<Prisma.$north_star_metricPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one North_star_metric.
     * @param {north_star_metricUpdateArgs} args - Arguments to update one North_star_metric.
     * @example
     * // Update one North_star_metric
     * const north_star_metric = await prisma.north_star_metric.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends north_star_metricUpdateArgs>(args: SelectSubset<T, north_star_metricUpdateArgs<ExtArgs>>): Prisma__north_star_metricClient<$Result.GetResult<Prisma.$north_star_metricPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more North_star_metrics.
     * @param {north_star_metricDeleteManyArgs} args - Arguments to filter North_star_metrics to delete.
     * @example
     * // Delete a few North_star_metrics
     * const { count } = await prisma.north_star_metric.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends north_star_metricDeleteManyArgs>(args?: SelectSubset<T, north_star_metricDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more North_star_metrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {north_star_metricUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many North_star_metrics
     * const north_star_metric = await prisma.north_star_metric.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends north_star_metricUpdateManyArgs>(args: SelectSubset<T, north_star_metricUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more North_star_metrics and returns the data updated in the database.
     * @param {north_star_metricUpdateManyAndReturnArgs} args - Arguments to update many North_star_metrics.
     * @example
     * // Update many North_star_metrics
     * const north_star_metric = await prisma.north_star_metric.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more North_star_metrics and only return the `pk`
     * const north_star_metricWithPkOnly = await prisma.north_star_metric.updateManyAndReturn({
     *   select: { pk: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends north_star_metricUpdateManyAndReturnArgs>(args: SelectSubset<T, north_star_metricUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$north_star_metricPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one North_star_metric.
     * @param {north_star_metricUpsertArgs} args - Arguments to update or create a North_star_metric.
     * @example
     * // Update or create a North_star_metric
     * const north_star_metric = await prisma.north_star_metric.upsert({
     *   create: {
     *     // ... data to create a North_star_metric
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the North_star_metric we want to update
     *   }
     * })
     */
    upsert<T extends north_star_metricUpsertArgs>(args: SelectSubset<T, north_star_metricUpsertArgs<ExtArgs>>): Prisma__north_star_metricClient<$Result.GetResult<Prisma.$north_star_metricPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of North_star_metrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {north_star_metricCountArgs} args - Arguments to filter North_star_metrics to count.
     * @example
     * // Count the number of North_star_metrics
     * const count = await prisma.north_star_metric.count({
     *   where: {
     *     // ... the filter for the North_star_metrics we want to count
     *   }
     * })
    **/
    count<T extends north_star_metricCountArgs>(
      args?: Subset<T, north_star_metricCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], North_star_metricCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a North_star_metric.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {North_star_metricAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends North_star_metricAggregateArgs>(args: Subset<T, North_star_metricAggregateArgs>): Prisma.PrismaPromise<GetNorth_star_metricAggregateType<T>>

    /**
     * Group by North_star_metric.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {north_star_metricGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends north_star_metricGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: north_star_metricGroupByArgs['orderBy'] }
        : { orderBy?: north_star_metricGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, north_star_metricGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNorth_star_metricGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the north_star_metric model
   */
  readonly fields: north_star_metricFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for north_star_metric.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__north_star_metricClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the north_star_metric model
   */ 
  interface north_star_metricFieldRefs {
    readonly pk: FieldRef<"north_star_metric", 'Int'>
    readonly value: FieldRef<"north_star_metric", 'String'>
    readonly date: FieldRef<"north_star_metric", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * north_star_metric findUnique
   */
  export type north_star_metricFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the north_star_metric
     */
    select?: north_star_metricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the north_star_metric
     */
    omit?: north_star_metricOmit<ExtArgs> | null
    /**
     * Filter, which north_star_metric to fetch.
     */
    where: north_star_metricWhereUniqueInput
  }

  /**
   * north_star_metric findUniqueOrThrow
   */
  export type north_star_metricFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the north_star_metric
     */
    select?: north_star_metricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the north_star_metric
     */
    omit?: north_star_metricOmit<ExtArgs> | null
    /**
     * Filter, which north_star_metric to fetch.
     */
    where: north_star_metricWhereUniqueInput
  }

  /**
   * north_star_metric findFirst
   */
  export type north_star_metricFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the north_star_metric
     */
    select?: north_star_metricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the north_star_metric
     */
    omit?: north_star_metricOmit<ExtArgs> | null
    /**
     * Filter, which north_star_metric to fetch.
     */
    where?: north_star_metricWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of north_star_metrics to fetch.
     */
    orderBy?: north_star_metricOrderByWithRelationInput | north_star_metricOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for north_star_metrics.
     */
    cursor?: north_star_metricWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` north_star_metrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` north_star_metrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of north_star_metrics.
     */
    distinct?: North_star_metricScalarFieldEnum | North_star_metricScalarFieldEnum[]
  }

  /**
   * north_star_metric findFirstOrThrow
   */
  export type north_star_metricFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the north_star_metric
     */
    select?: north_star_metricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the north_star_metric
     */
    omit?: north_star_metricOmit<ExtArgs> | null
    /**
     * Filter, which north_star_metric to fetch.
     */
    where?: north_star_metricWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of north_star_metrics to fetch.
     */
    orderBy?: north_star_metricOrderByWithRelationInput | north_star_metricOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for north_star_metrics.
     */
    cursor?: north_star_metricWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` north_star_metrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` north_star_metrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of north_star_metrics.
     */
    distinct?: North_star_metricScalarFieldEnum | North_star_metricScalarFieldEnum[]
  }

  /**
   * north_star_metric findMany
   */
  export type north_star_metricFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the north_star_metric
     */
    select?: north_star_metricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the north_star_metric
     */
    omit?: north_star_metricOmit<ExtArgs> | null
    /**
     * Filter, which north_star_metrics to fetch.
     */
    where?: north_star_metricWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of north_star_metrics to fetch.
     */
    orderBy?: north_star_metricOrderByWithRelationInput | north_star_metricOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing north_star_metrics.
     */
    cursor?: north_star_metricWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` north_star_metrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` north_star_metrics.
     */
    skip?: number
    distinct?: North_star_metricScalarFieldEnum | North_star_metricScalarFieldEnum[]
  }

  /**
   * north_star_metric create
   */
  export type north_star_metricCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the north_star_metric
     */
    select?: north_star_metricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the north_star_metric
     */
    omit?: north_star_metricOmit<ExtArgs> | null
    /**
     * The data needed to create a north_star_metric.
     */
    data: XOR<north_star_metricCreateInput, north_star_metricUncheckedCreateInput>
  }

  /**
   * north_star_metric createMany
   */
  export type north_star_metricCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many north_star_metrics.
     */
    data: north_star_metricCreateManyInput | north_star_metricCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * north_star_metric createManyAndReturn
   */
  export type north_star_metricCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the north_star_metric
     */
    select?: north_star_metricSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the north_star_metric
     */
    omit?: north_star_metricOmit<ExtArgs> | null
    /**
     * The data used to create many north_star_metrics.
     */
    data: north_star_metricCreateManyInput | north_star_metricCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * north_star_metric update
   */
  export type north_star_metricUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the north_star_metric
     */
    select?: north_star_metricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the north_star_metric
     */
    omit?: north_star_metricOmit<ExtArgs> | null
    /**
     * The data needed to update a north_star_metric.
     */
    data: XOR<north_star_metricUpdateInput, north_star_metricUncheckedUpdateInput>
    /**
     * Choose, which north_star_metric to update.
     */
    where: north_star_metricWhereUniqueInput
  }

  /**
   * north_star_metric updateMany
   */
  export type north_star_metricUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update north_star_metrics.
     */
    data: XOR<north_star_metricUpdateManyMutationInput, north_star_metricUncheckedUpdateManyInput>
    /**
     * Filter which north_star_metrics to update
     */
    where?: north_star_metricWhereInput
    /**
     * Limit how many north_star_metrics to update.
     */
    limit?: number
  }

  /**
   * north_star_metric updateManyAndReturn
   */
  export type north_star_metricUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the north_star_metric
     */
    select?: north_star_metricSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the north_star_metric
     */
    omit?: north_star_metricOmit<ExtArgs> | null
    /**
     * The data used to update north_star_metrics.
     */
    data: XOR<north_star_metricUpdateManyMutationInput, north_star_metricUncheckedUpdateManyInput>
    /**
     * Filter which north_star_metrics to update
     */
    where?: north_star_metricWhereInput
    /**
     * Limit how many north_star_metrics to update.
     */
    limit?: number
  }

  /**
   * north_star_metric upsert
   */
  export type north_star_metricUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the north_star_metric
     */
    select?: north_star_metricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the north_star_metric
     */
    omit?: north_star_metricOmit<ExtArgs> | null
    /**
     * The filter to search for the north_star_metric to update in case it exists.
     */
    where: north_star_metricWhereUniqueInput
    /**
     * In case the north_star_metric found by the `where` argument doesn't exist, create a new north_star_metric with this data.
     */
    create: XOR<north_star_metricCreateInput, north_star_metricUncheckedCreateInput>
    /**
     * In case the north_star_metric was found with the provided `where` argument, update it with this data.
     */
    update: XOR<north_star_metricUpdateInput, north_star_metricUncheckedUpdateInput>
  }

  /**
   * north_star_metric delete
   */
  export type north_star_metricDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the north_star_metric
     */
    select?: north_star_metricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the north_star_metric
     */
    omit?: north_star_metricOmit<ExtArgs> | null
    /**
     * Filter which north_star_metric to delete.
     */
    where: north_star_metricWhereUniqueInput
  }

  /**
   * north_star_metric deleteMany
   */
  export type north_star_metricDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which north_star_metrics to delete
     */
    where?: north_star_metricWhereInput
    /**
     * Limit how many north_star_metrics to delete.
     */
    limit?: number
  }

  /**
   * north_star_metric without action
   */
  export type north_star_metricDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the north_star_metric
     */
    select?: north_star_metricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the north_star_metric
     */
    omit?: north_star_metricOmit<ExtArgs> | null
  }


  /**
   * Model etat_cours_d_eau
   */

  export type AggregateEtat_cours_d_eau = {
    _count: Etat_cours_d_eauCountAggregateOutputType | null
    _avg: Etat_cours_d_eauAvgAggregateOutputType | null
    _sum: Etat_cours_d_eauSumAggregateOutputType | null
    _min: Etat_cours_d_eauMinAggregateOutputType | null
    _max: Etat_cours_d_eauMaxAggregateOutputType | null
  }

  export type Etat_cours_d_eauAvgAggregateOutputType = {
    pk: number | null
    longueur: number | null
  }

  export type Etat_cours_d_eauSumAggregateOutputType = {
    pk: number | null
    longueur: number | null
  }

  export type Etat_cours_d_eauMinAggregateOutputType = {
    pk: number | null
    name: string | null
    longueur: number | null
    etateco: string | null
  }

  export type Etat_cours_d_eauMaxAggregateOutputType = {
    pk: number | null
    name: string | null
    longueur: number | null
    etateco: string | null
  }

  export type Etat_cours_d_eauCountAggregateOutputType = {
    pk: number
    name: number
    longueur: number
    etateco: number
    _all: number
  }


  export type Etat_cours_d_eauAvgAggregateInputType = {
    pk?: true
    longueur?: true
  }

  export type Etat_cours_d_eauSumAggregateInputType = {
    pk?: true
    longueur?: true
  }

  export type Etat_cours_d_eauMinAggregateInputType = {
    pk?: true
    name?: true
    longueur?: true
    etateco?: true
  }

  export type Etat_cours_d_eauMaxAggregateInputType = {
    pk?: true
    name?: true
    longueur?: true
    etateco?: true
  }

  export type Etat_cours_d_eauCountAggregateInputType = {
    pk?: true
    name?: true
    longueur?: true
    etateco?: true
    _all?: true
  }

  export type Etat_cours_d_eauAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which etat_cours_d_eau to aggregate.
     */
    where?: etat_cours_d_eauWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of etat_cours_d_eaus to fetch.
     */
    orderBy?: etat_cours_d_eauOrderByWithRelationInput | etat_cours_d_eauOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: etat_cours_d_eauWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` etat_cours_d_eaus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` etat_cours_d_eaus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned etat_cours_d_eaus
    **/
    _count?: true | Etat_cours_d_eauCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Etat_cours_d_eauAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Etat_cours_d_eauSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Etat_cours_d_eauMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Etat_cours_d_eauMaxAggregateInputType
  }

  export type GetEtat_cours_d_eauAggregateType<T extends Etat_cours_d_eauAggregateArgs> = {
        [P in keyof T & keyof AggregateEtat_cours_d_eau]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEtat_cours_d_eau[P]>
      : GetScalarType<T[P], AggregateEtat_cours_d_eau[P]>
  }




  export type etat_cours_d_eauGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: etat_cours_d_eauWhereInput
    orderBy?: etat_cours_d_eauOrderByWithAggregationInput | etat_cours_d_eauOrderByWithAggregationInput[]
    by: Etat_cours_d_eauScalarFieldEnum[] | Etat_cours_d_eauScalarFieldEnum
    having?: etat_cours_d_eauScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Etat_cours_d_eauCountAggregateInputType | true
    _avg?: Etat_cours_d_eauAvgAggregateInputType
    _sum?: Etat_cours_d_eauSumAggregateInputType
    _min?: Etat_cours_d_eauMinAggregateInputType
    _max?: Etat_cours_d_eauMaxAggregateInputType
  }

  export type Etat_cours_d_eauGroupByOutputType = {
    pk: number
    name: string
    longueur: number
    etateco: string | null
    _count: Etat_cours_d_eauCountAggregateOutputType | null
    _avg: Etat_cours_d_eauAvgAggregateOutputType | null
    _sum: Etat_cours_d_eauSumAggregateOutputType | null
    _min: Etat_cours_d_eauMinAggregateOutputType | null
    _max: Etat_cours_d_eauMaxAggregateOutputType | null
  }

  type GetEtat_cours_d_eauGroupByPayload<T extends etat_cours_d_eauGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Etat_cours_d_eauGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Etat_cours_d_eauGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Etat_cours_d_eauGroupByOutputType[P]>
            : GetScalarType<T[P], Etat_cours_d_eauGroupByOutputType[P]>
        }
      >
    >


  export type etat_cours_d_eauSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    pk?: boolean
    name?: boolean
    longueur?: boolean
    etateco?: boolean
  }, ExtArgs["result"]["etat_cours_d_eau"]>


  export type etat_cours_d_eauSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    pk?: boolean
    name?: boolean
    longueur?: boolean
    etateco?: boolean
  }, ExtArgs["result"]["etat_cours_d_eau"]>

  export type etat_cours_d_eauSelectScalar = {
    pk?: boolean
    name?: boolean
    longueur?: boolean
    etateco?: boolean
  }

  export type etat_cours_d_eauOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"pk" | "name" | "longueur" | "etateco", ExtArgs["result"]["etat_cours_d_eau"]>

  export type $etat_cours_d_eauPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "etat_cours_d_eau"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      pk: number
      name: string
      longueur: number
      etateco: string | null
    }, ExtArgs["result"]["etat_cours_d_eau"]>
    composites: {}
  }

  type etat_cours_d_eauGetPayload<S extends boolean | null | undefined | etat_cours_d_eauDefaultArgs> = $Result.GetResult<Prisma.$etat_cours_d_eauPayload, S>

  type etat_cours_d_eauCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<etat_cours_d_eauFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Etat_cours_d_eauCountAggregateInputType | true
    }

  export interface etat_cours_d_eauDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['etat_cours_d_eau'], meta: { name: 'etat_cours_d_eau' } }
    /**
     * Find zero or one Etat_cours_d_eau that matches the filter.
     * @param {etat_cours_d_eauFindUniqueArgs} args - Arguments to find a Etat_cours_d_eau
     * @example
     * // Get one Etat_cours_d_eau
     * const etat_cours_d_eau = await prisma.etat_cours_d_eau.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends etat_cours_d_eauFindUniqueArgs>(args: SelectSubset<T, etat_cours_d_eauFindUniqueArgs<ExtArgs>>): Prisma__etat_cours_d_eauClient<$Result.GetResult<Prisma.$etat_cours_d_eauPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Etat_cours_d_eau that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {etat_cours_d_eauFindUniqueOrThrowArgs} args - Arguments to find a Etat_cours_d_eau
     * @example
     * // Get one Etat_cours_d_eau
     * const etat_cours_d_eau = await prisma.etat_cours_d_eau.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends etat_cours_d_eauFindUniqueOrThrowArgs>(args: SelectSubset<T, etat_cours_d_eauFindUniqueOrThrowArgs<ExtArgs>>): Prisma__etat_cours_d_eauClient<$Result.GetResult<Prisma.$etat_cours_d_eauPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Etat_cours_d_eau that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {etat_cours_d_eauFindFirstArgs} args - Arguments to find a Etat_cours_d_eau
     * @example
     * // Get one Etat_cours_d_eau
     * const etat_cours_d_eau = await prisma.etat_cours_d_eau.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends etat_cours_d_eauFindFirstArgs>(args?: SelectSubset<T, etat_cours_d_eauFindFirstArgs<ExtArgs>>): Prisma__etat_cours_d_eauClient<$Result.GetResult<Prisma.$etat_cours_d_eauPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Etat_cours_d_eau that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {etat_cours_d_eauFindFirstOrThrowArgs} args - Arguments to find a Etat_cours_d_eau
     * @example
     * // Get one Etat_cours_d_eau
     * const etat_cours_d_eau = await prisma.etat_cours_d_eau.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends etat_cours_d_eauFindFirstOrThrowArgs>(args?: SelectSubset<T, etat_cours_d_eauFindFirstOrThrowArgs<ExtArgs>>): Prisma__etat_cours_d_eauClient<$Result.GetResult<Prisma.$etat_cours_d_eauPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Etat_cours_d_eaus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {etat_cours_d_eauFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Etat_cours_d_eaus
     * const etat_cours_d_eaus = await prisma.etat_cours_d_eau.findMany()
     * 
     * // Get first 10 Etat_cours_d_eaus
     * const etat_cours_d_eaus = await prisma.etat_cours_d_eau.findMany({ take: 10 })
     * 
     * // Only select the `pk`
     * const etat_cours_d_eauWithPkOnly = await prisma.etat_cours_d_eau.findMany({ select: { pk: true } })
     * 
     */
    findMany<T extends etat_cours_d_eauFindManyArgs>(args?: SelectSubset<T, etat_cours_d_eauFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$etat_cours_d_eauPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Delete a Etat_cours_d_eau.
     * @param {etat_cours_d_eauDeleteArgs} args - Arguments to delete one Etat_cours_d_eau.
     * @example
     * // Delete one Etat_cours_d_eau
     * const Etat_cours_d_eau = await prisma.etat_cours_d_eau.delete({
     *   where: {
     *     // ... filter to delete one Etat_cours_d_eau
     *   }
     * })
     * 
     */
    delete<T extends etat_cours_d_eauDeleteArgs>(args: SelectSubset<T, etat_cours_d_eauDeleteArgs<ExtArgs>>): Prisma__etat_cours_d_eauClient<$Result.GetResult<Prisma.$etat_cours_d_eauPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Etat_cours_d_eau.
     * @param {etat_cours_d_eauUpdateArgs} args - Arguments to update one Etat_cours_d_eau.
     * @example
     * // Update one Etat_cours_d_eau
     * const etat_cours_d_eau = await prisma.etat_cours_d_eau.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends etat_cours_d_eauUpdateArgs>(args: SelectSubset<T, etat_cours_d_eauUpdateArgs<ExtArgs>>): Prisma__etat_cours_d_eauClient<$Result.GetResult<Prisma.$etat_cours_d_eauPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Etat_cours_d_eaus.
     * @param {etat_cours_d_eauDeleteManyArgs} args - Arguments to filter Etat_cours_d_eaus to delete.
     * @example
     * // Delete a few Etat_cours_d_eaus
     * const { count } = await prisma.etat_cours_d_eau.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends etat_cours_d_eauDeleteManyArgs>(args?: SelectSubset<T, etat_cours_d_eauDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Etat_cours_d_eaus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {etat_cours_d_eauUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Etat_cours_d_eaus
     * const etat_cours_d_eau = await prisma.etat_cours_d_eau.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends etat_cours_d_eauUpdateManyArgs>(args: SelectSubset<T, etat_cours_d_eauUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Etat_cours_d_eaus and returns the data updated in the database.
     * @param {etat_cours_d_eauUpdateManyAndReturnArgs} args - Arguments to update many Etat_cours_d_eaus.
     * @example
     * // Update many Etat_cours_d_eaus
     * const etat_cours_d_eau = await prisma.etat_cours_d_eau.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Etat_cours_d_eaus and only return the `pk`
     * const etat_cours_d_eauWithPkOnly = await prisma.etat_cours_d_eau.updateManyAndReturn({
     *   select: { pk: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends etat_cours_d_eauUpdateManyAndReturnArgs>(args: SelectSubset<T, etat_cours_d_eauUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$etat_cours_d_eauPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>


    /**
     * Count the number of Etat_cours_d_eaus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {etat_cours_d_eauCountArgs} args - Arguments to filter Etat_cours_d_eaus to count.
     * @example
     * // Count the number of Etat_cours_d_eaus
     * const count = await prisma.etat_cours_d_eau.count({
     *   where: {
     *     // ... the filter for the Etat_cours_d_eaus we want to count
     *   }
     * })
    **/
    count<T extends etat_cours_d_eauCountArgs>(
      args?: Subset<T, etat_cours_d_eauCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Etat_cours_d_eauCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Etat_cours_d_eau.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Etat_cours_d_eauAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Etat_cours_d_eauAggregateArgs>(args: Subset<T, Etat_cours_d_eauAggregateArgs>): Prisma.PrismaPromise<GetEtat_cours_d_eauAggregateType<T>>

    /**
     * Group by Etat_cours_d_eau.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {etat_cours_d_eauGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends etat_cours_d_eauGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: etat_cours_d_eauGroupByArgs['orderBy'] }
        : { orderBy?: etat_cours_d_eauGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, etat_cours_d_eauGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEtat_cours_d_eauGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the etat_cours_d_eau model
   */
  readonly fields: etat_cours_d_eauFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for etat_cours_d_eau.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__etat_cours_d_eauClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the etat_cours_d_eau model
   */ 
  interface etat_cours_d_eauFieldRefs {
    readonly pk: FieldRef<"etat_cours_d_eau", 'Int'>
    readonly name: FieldRef<"etat_cours_d_eau", 'String'>
    readonly longueur: FieldRef<"etat_cours_d_eau", 'Float'>
    readonly etateco: FieldRef<"etat_cours_d_eau", 'String'>
  }
    

  // Custom InputTypes
  /**
   * etat_cours_d_eau findUnique
   */
  export type etat_cours_d_eauFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the etat_cours_d_eau
     */
    select?: etat_cours_d_eauSelect<ExtArgs> | null
    /**
     * Omit specific fields from the etat_cours_d_eau
     */
    omit?: etat_cours_d_eauOmit<ExtArgs> | null
    /**
     * Filter, which etat_cours_d_eau to fetch.
     */
    where: etat_cours_d_eauWhereUniqueInput
  }

  /**
   * etat_cours_d_eau findUniqueOrThrow
   */
  export type etat_cours_d_eauFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the etat_cours_d_eau
     */
    select?: etat_cours_d_eauSelect<ExtArgs> | null
    /**
     * Omit specific fields from the etat_cours_d_eau
     */
    omit?: etat_cours_d_eauOmit<ExtArgs> | null
    /**
     * Filter, which etat_cours_d_eau to fetch.
     */
    where: etat_cours_d_eauWhereUniqueInput
  }

  /**
   * etat_cours_d_eau findFirst
   */
  export type etat_cours_d_eauFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the etat_cours_d_eau
     */
    select?: etat_cours_d_eauSelect<ExtArgs> | null
    /**
     * Omit specific fields from the etat_cours_d_eau
     */
    omit?: etat_cours_d_eauOmit<ExtArgs> | null
    /**
     * Filter, which etat_cours_d_eau to fetch.
     */
    where?: etat_cours_d_eauWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of etat_cours_d_eaus to fetch.
     */
    orderBy?: etat_cours_d_eauOrderByWithRelationInput | etat_cours_d_eauOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for etat_cours_d_eaus.
     */
    cursor?: etat_cours_d_eauWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` etat_cours_d_eaus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` etat_cours_d_eaus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of etat_cours_d_eaus.
     */
    distinct?: Etat_cours_d_eauScalarFieldEnum | Etat_cours_d_eauScalarFieldEnum[]
  }

  /**
   * etat_cours_d_eau findFirstOrThrow
   */
  export type etat_cours_d_eauFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the etat_cours_d_eau
     */
    select?: etat_cours_d_eauSelect<ExtArgs> | null
    /**
     * Omit specific fields from the etat_cours_d_eau
     */
    omit?: etat_cours_d_eauOmit<ExtArgs> | null
    /**
     * Filter, which etat_cours_d_eau to fetch.
     */
    where?: etat_cours_d_eauWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of etat_cours_d_eaus to fetch.
     */
    orderBy?: etat_cours_d_eauOrderByWithRelationInput | etat_cours_d_eauOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for etat_cours_d_eaus.
     */
    cursor?: etat_cours_d_eauWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` etat_cours_d_eaus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` etat_cours_d_eaus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of etat_cours_d_eaus.
     */
    distinct?: Etat_cours_d_eauScalarFieldEnum | Etat_cours_d_eauScalarFieldEnum[]
  }

  /**
   * etat_cours_d_eau findMany
   */
  export type etat_cours_d_eauFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the etat_cours_d_eau
     */
    select?: etat_cours_d_eauSelect<ExtArgs> | null
    /**
     * Omit specific fields from the etat_cours_d_eau
     */
    omit?: etat_cours_d_eauOmit<ExtArgs> | null
    /**
     * Filter, which etat_cours_d_eaus to fetch.
     */
    where?: etat_cours_d_eauWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of etat_cours_d_eaus to fetch.
     */
    orderBy?: etat_cours_d_eauOrderByWithRelationInput | etat_cours_d_eauOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing etat_cours_d_eaus.
     */
    cursor?: etat_cours_d_eauWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` etat_cours_d_eaus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` etat_cours_d_eaus.
     */
    skip?: number
    distinct?: Etat_cours_d_eauScalarFieldEnum | Etat_cours_d_eauScalarFieldEnum[]
  }

  /**
   * etat_cours_d_eau update
   */
  export type etat_cours_d_eauUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the etat_cours_d_eau
     */
    select?: etat_cours_d_eauSelect<ExtArgs> | null
    /**
     * Omit specific fields from the etat_cours_d_eau
     */
    omit?: etat_cours_d_eauOmit<ExtArgs> | null
    /**
     * The data needed to update a etat_cours_d_eau.
     */
    data: XOR<etat_cours_d_eauUpdateInput, etat_cours_d_eauUncheckedUpdateInput>
    /**
     * Choose, which etat_cours_d_eau to update.
     */
    where: etat_cours_d_eauWhereUniqueInput
  }

  /**
   * etat_cours_d_eau updateMany
   */
  export type etat_cours_d_eauUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update etat_cours_d_eaus.
     */
    data: XOR<etat_cours_d_eauUpdateManyMutationInput, etat_cours_d_eauUncheckedUpdateManyInput>
    /**
     * Filter which etat_cours_d_eaus to update
     */
    where?: etat_cours_d_eauWhereInput
    /**
     * Limit how many etat_cours_d_eaus to update.
     */
    limit?: number
  }

  /**
   * etat_cours_d_eau updateManyAndReturn
   */
  export type etat_cours_d_eauUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the etat_cours_d_eau
     */
    select?: etat_cours_d_eauSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the etat_cours_d_eau
     */
    omit?: etat_cours_d_eauOmit<ExtArgs> | null
    /**
     * The data used to update etat_cours_d_eaus.
     */
    data: XOR<etat_cours_d_eauUpdateManyMutationInput, etat_cours_d_eauUncheckedUpdateManyInput>
    /**
     * Filter which etat_cours_d_eaus to update
     */
    where?: etat_cours_d_eauWhereInput
    /**
     * Limit how many etat_cours_d_eaus to update.
     */
    limit?: number
  }

  /**
   * etat_cours_d_eau delete
   */
  export type etat_cours_d_eauDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the etat_cours_d_eau
     */
    select?: etat_cours_d_eauSelect<ExtArgs> | null
    /**
     * Omit specific fields from the etat_cours_d_eau
     */
    omit?: etat_cours_d_eauOmit<ExtArgs> | null
    /**
     * Filter which etat_cours_d_eau to delete.
     */
    where: etat_cours_d_eauWhereUniqueInput
  }

  /**
   * etat_cours_d_eau deleteMany
   */
  export type etat_cours_d_eauDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which etat_cours_d_eaus to delete
     */
    where?: etat_cours_d_eauWhereInput
    /**
     * Limit how many etat_cours_d_eaus to delete.
     */
    limit?: number
  }

  /**
   * etat_cours_d_eau without action
   */
  export type etat_cours_d_eauDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the etat_cours_d_eau
     */
    select?: etat_cours_d_eauSelect<ExtArgs> | null
    /**
     * Omit specific fields from the etat_cours_d_eau
     */
    omit?: etat_cours_d_eauOmit<ExtArgs> | null
  }


  /**
   * Model aot_40
   */

  export type AggregateAot_40 = {
    _count: Aot_40CountAggregateOutputType | null
    _avg: Aot_40AvgAggregateOutputType | null
    _sum: Aot_40SumAggregateOutputType | null
    _min: Aot_40MinAggregateOutputType | null
    _max: Aot_40MaxAggregateOutputType | null
  }

  export type Aot_40AvgAggregateOutputType = {
    index: number | null
    valeur_brute: number | null
    Latitude: number | null
    Longitude: number | null
  }

  export type Aot_40SumAggregateOutputType = {
    index: bigint | null
    valeur_brute: number | null
    Latitude: number | null
    Longitude: number | null
  }

  export type Aot_40MinAggregateOutputType = {
    index: bigint | null
    nom_site: string | null
    type_d_implantation: string | null
    valeur_brute: number | null
    Latitude: number | null
    Longitude: number | null
  }

  export type Aot_40MaxAggregateOutputType = {
    index: bigint | null
    nom_site: string | null
    type_d_implantation: string | null
    valeur_brute: number | null
    Latitude: number | null
    Longitude: number | null
  }

  export type Aot_40CountAggregateOutputType = {
    index: number
    nom_site: number
    type_d_implantation: number
    valeur_brute: number
    Latitude: number
    Longitude: number
    _all: number
  }


  export type Aot_40AvgAggregateInputType = {
    index?: true
    valeur_brute?: true
    Latitude?: true
    Longitude?: true
  }

  export type Aot_40SumAggregateInputType = {
    index?: true
    valeur_brute?: true
    Latitude?: true
    Longitude?: true
  }

  export type Aot_40MinAggregateInputType = {
    index?: true
    nom_site?: true
    type_d_implantation?: true
    valeur_brute?: true
    Latitude?: true
    Longitude?: true
  }

  export type Aot_40MaxAggregateInputType = {
    index?: true
    nom_site?: true
    type_d_implantation?: true
    valeur_brute?: true
    Latitude?: true
    Longitude?: true
  }

  export type Aot_40CountAggregateInputType = {
    index?: true
    nom_site?: true
    type_d_implantation?: true
    valeur_brute?: true
    Latitude?: true
    Longitude?: true
    _all?: true
  }

  export type Aot_40AggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which aot_40 to aggregate.
     */
    where?: aot_40WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of aot_40s to fetch.
     */
    orderBy?: aot_40OrderByWithRelationInput | aot_40OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: aot_40WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` aot_40s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` aot_40s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned aot_40s
    **/
    _count?: true | Aot_40CountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Aot_40AvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Aot_40SumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Aot_40MinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Aot_40MaxAggregateInputType
  }

  export type GetAot_40AggregateType<T extends Aot_40AggregateArgs> = {
        [P in keyof T & keyof AggregateAot_40]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAot_40[P]>
      : GetScalarType<T[P], AggregateAot_40[P]>
  }




  export type aot_40GroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: aot_40WhereInput
    orderBy?: aot_40OrderByWithAggregationInput | aot_40OrderByWithAggregationInput[]
    by: Aot_40ScalarFieldEnum[] | Aot_40ScalarFieldEnum
    having?: aot_40ScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Aot_40CountAggregateInputType | true
    _avg?: Aot_40AvgAggregateInputType
    _sum?: Aot_40SumAggregateInputType
    _min?: Aot_40MinAggregateInputType
    _max?: Aot_40MaxAggregateInputType
  }

  export type Aot_40GroupByOutputType = {
    index: bigint
    nom_site: string
    type_d_implantation: string
    valeur_brute: number
    Latitude: number
    Longitude: number
    _count: Aot_40CountAggregateOutputType | null
    _avg: Aot_40AvgAggregateOutputType | null
    _sum: Aot_40SumAggregateOutputType | null
    _min: Aot_40MinAggregateOutputType | null
    _max: Aot_40MaxAggregateOutputType | null
  }

  type GetAot_40GroupByPayload<T extends aot_40GroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Aot_40GroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Aot_40GroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Aot_40GroupByOutputType[P]>
            : GetScalarType<T[P], Aot_40GroupByOutputType[P]>
        }
      >
    >


  export type aot_40Select<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    index?: boolean
    nom_site?: boolean
    type_d_implantation?: boolean
    valeur_brute?: boolean
    Latitude?: boolean
    Longitude?: boolean
  }, ExtArgs["result"]["aot_40"]>

  export type aot_40SelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    index?: boolean
    nom_site?: boolean
    type_d_implantation?: boolean
    valeur_brute?: boolean
    Latitude?: boolean
    Longitude?: boolean
  }, ExtArgs["result"]["aot_40"]>

  export type aot_40SelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    index?: boolean
    nom_site?: boolean
    type_d_implantation?: boolean
    valeur_brute?: boolean
    Latitude?: boolean
    Longitude?: boolean
  }, ExtArgs["result"]["aot_40"]>

  export type aot_40SelectScalar = {
    index?: boolean
    nom_site?: boolean
    type_d_implantation?: boolean
    valeur_brute?: boolean
    Latitude?: boolean
    Longitude?: boolean
  }

  export type aot_40Omit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"index" | "nom_site" | "type_d_implantation" | "valeur_brute" | "Latitude" | "Longitude", ExtArgs["result"]["aot_40"]>

  export type $aot_40Payload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "aot_40"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      index: bigint
      nom_site: string
      type_d_implantation: string
      valeur_brute: number
      Latitude: number
      Longitude: number
    }, ExtArgs["result"]["aot_40"]>
    composites: {}
  }

  type aot_40GetPayload<S extends boolean | null | undefined | aot_40DefaultArgs> = $Result.GetResult<Prisma.$aot_40Payload, S>

  type aot_40CountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<aot_40FindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Aot_40CountAggregateInputType | true
    }

  export interface aot_40Delegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['aot_40'], meta: { name: 'aot_40' } }
    /**
     * Find zero or one Aot_40 that matches the filter.
     * @param {aot_40FindUniqueArgs} args - Arguments to find a Aot_40
     * @example
     * // Get one Aot_40
     * const aot_40 = await prisma.aot_40.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends aot_40FindUniqueArgs>(args: SelectSubset<T, aot_40FindUniqueArgs<ExtArgs>>): Prisma__aot_40Client<$Result.GetResult<Prisma.$aot_40Payload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Aot_40 that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {aot_40FindUniqueOrThrowArgs} args - Arguments to find a Aot_40
     * @example
     * // Get one Aot_40
     * const aot_40 = await prisma.aot_40.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends aot_40FindUniqueOrThrowArgs>(args: SelectSubset<T, aot_40FindUniqueOrThrowArgs<ExtArgs>>): Prisma__aot_40Client<$Result.GetResult<Prisma.$aot_40Payload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Aot_40 that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {aot_40FindFirstArgs} args - Arguments to find a Aot_40
     * @example
     * // Get one Aot_40
     * const aot_40 = await prisma.aot_40.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends aot_40FindFirstArgs>(args?: SelectSubset<T, aot_40FindFirstArgs<ExtArgs>>): Prisma__aot_40Client<$Result.GetResult<Prisma.$aot_40Payload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Aot_40 that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {aot_40FindFirstOrThrowArgs} args - Arguments to find a Aot_40
     * @example
     * // Get one Aot_40
     * const aot_40 = await prisma.aot_40.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends aot_40FindFirstOrThrowArgs>(args?: SelectSubset<T, aot_40FindFirstOrThrowArgs<ExtArgs>>): Prisma__aot_40Client<$Result.GetResult<Prisma.$aot_40Payload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Aot_40s that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {aot_40FindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Aot_40s
     * const aot_40s = await prisma.aot_40.findMany()
     * 
     * // Get first 10 Aot_40s
     * const aot_40s = await prisma.aot_40.findMany({ take: 10 })
     * 
     * // Only select the `index`
     * const aot_40WithIndexOnly = await prisma.aot_40.findMany({ select: { index: true } })
     * 
     */
    findMany<T extends aot_40FindManyArgs>(args?: SelectSubset<T, aot_40FindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$aot_40Payload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Aot_40.
     * @param {aot_40CreateArgs} args - Arguments to create a Aot_40.
     * @example
     * // Create one Aot_40
     * const Aot_40 = await prisma.aot_40.create({
     *   data: {
     *     // ... data to create a Aot_40
     *   }
     * })
     * 
     */
    create<T extends aot_40CreateArgs>(args: SelectSubset<T, aot_40CreateArgs<ExtArgs>>): Prisma__aot_40Client<$Result.GetResult<Prisma.$aot_40Payload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Aot_40s.
     * @param {aot_40CreateManyArgs} args - Arguments to create many Aot_40s.
     * @example
     * // Create many Aot_40s
     * const aot_40 = await prisma.aot_40.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends aot_40CreateManyArgs>(args?: SelectSubset<T, aot_40CreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Aot_40s and returns the data saved in the database.
     * @param {aot_40CreateManyAndReturnArgs} args - Arguments to create many Aot_40s.
     * @example
     * // Create many Aot_40s
     * const aot_40 = await prisma.aot_40.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Aot_40s and only return the `index`
     * const aot_40WithIndexOnly = await prisma.aot_40.createManyAndReturn({
     *   select: { index: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends aot_40CreateManyAndReturnArgs>(args?: SelectSubset<T, aot_40CreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$aot_40Payload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Aot_40.
     * @param {aot_40DeleteArgs} args - Arguments to delete one Aot_40.
     * @example
     * // Delete one Aot_40
     * const Aot_40 = await prisma.aot_40.delete({
     *   where: {
     *     // ... filter to delete one Aot_40
     *   }
     * })
     * 
     */
    delete<T extends aot_40DeleteArgs>(args: SelectSubset<T, aot_40DeleteArgs<ExtArgs>>): Prisma__aot_40Client<$Result.GetResult<Prisma.$aot_40Payload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Aot_40.
     * @param {aot_40UpdateArgs} args - Arguments to update one Aot_40.
     * @example
     * // Update one Aot_40
     * const aot_40 = await prisma.aot_40.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends aot_40UpdateArgs>(args: SelectSubset<T, aot_40UpdateArgs<ExtArgs>>): Prisma__aot_40Client<$Result.GetResult<Prisma.$aot_40Payload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Aot_40s.
     * @param {aot_40DeleteManyArgs} args - Arguments to filter Aot_40s to delete.
     * @example
     * // Delete a few Aot_40s
     * const { count } = await prisma.aot_40.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends aot_40DeleteManyArgs>(args?: SelectSubset<T, aot_40DeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Aot_40s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {aot_40UpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Aot_40s
     * const aot_40 = await prisma.aot_40.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends aot_40UpdateManyArgs>(args: SelectSubset<T, aot_40UpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Aot_40s and returns the data updated in the database.
     * @param {aot_40UpdateManyAndReturnArgs} args - Arguments to update many Aot_40s.
     * @example
     * // Update many Aot_40s
     * const aot_40 = await prisma.aot_40.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Aot_40s and only return the `index`
     * const aot_40WithIndexOnly = await prisma.aot_40.updateManyAndReturn({
     *   select: { index: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends aot_40UpdateManyAndReturnArgs>(args: SelectSubset<T, aot_40UpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$aot_40Payload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Aot_40.
     * @param {aot_40UpsertArgs} args - Arguments to update or create a Aot_40.
     * @example
     * // Update or create a Aot_40
     * const aot_40 = await prisma.aot_40.upsert({
     *   create: {
     *     // ... data to create a Aot_40
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Aot_40 we want to update
     *   }
     * })
     */
    upsert<T extends aot_40UpsertArgs>(args: SelectSubset<T, aot_40UpsertArgs<ExtArgs>>): Prisma__aot_40Client<$Result.GetResult<Prisma.$aot_40Payload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Aot_40s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {aot_40CountArgs} args - Arguments to filter Aot_40s to count.
     * @example
     * // Count the number of Aot_40s
     * const count = await prisma.aot_40.count({
     *   where: {
     *     // ... the filter for the Aot_40s we want to count
     *   }
     * })
    **/
    count<T extends aot_40CountArgs>(
      args?: Subset<T, aot_40CountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Aot_40CountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Aot_40.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Aot_40AggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Aot_40AggregateArgs>(args: Subset<T, Aot_40AggregateArgs>): Prisma.PrismaPromise<GetAot_40AggregateType<T>>

    /**
     * Group by Aot_40.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {aot_40GroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends aot_40GroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: aot_40GroupByArgs['orderBy'] }
        : { orderBy?: aot_40GroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, aot_40GroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAot_40GroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the aot_40 model
   */
  readonly fields: aot_40FieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for aot_40.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__aot_40Client<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the aot_40 model
   */ 
  interface aot_40FieldRefs {
    readonly index: FieldRef<"aot_40", 'BigInt'>
    readonly nom_site: FieldRef<"aot_40", 'String'>
    readonly type_d_implantation: FieldRef<"aot_40", 'String'>
    readonly valeur_brute: FieldRef<"aot_40", 'Float'>
    readonly Latitude: FieldRef<"aot_40", 'Float'>
    readonly Longitude: FieldRef<"aot_40", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * aot_40 findUnique
   */
  export type aot_40FindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the aot_40
     */
    select?: aot_40Select<ExtArgs> | null
    /**
     * Omit specific fields from the aot_40
     */
    omit?: aot_40Omit<ExtArgs> | null
    /**
     * Filter, which aot_40 to fetch.
     */
    where: aot_40WhereUniqueInput
  }

  /**
   * aot_40 findUniqueOrThrow
   */
  export type aot_40FindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the aot_40
     */
    select?: aot_40Select<ExtArgs> | null
    /**
     * Omit specific fields from the aot_40
     */
    omit?: aot_40Omit<ExtArgs> | null
    /**
     * Filter, which aot_40 to fetch.
     */
    where: aot_40WhereUniqueInput
  }

  /**
   * aot_40 findFirst
   */
  export type aot_40FindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the aot_40
     */
    select?: aot_40Select<ExtArgs> | null
    /**
     * Omit specific fields from the aot_40
     */
    omit?: aot_40Omit<ExtArgs> | null
    /**
     * Filter, which aot_40 to fetch.
     */
    where?: aot_40WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of aot_40s to fetch.
     */
    orderBy?: aot_40OrderByWithRelationInput | aot_40OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for aot_40s.
     */
    cursor?: aot_40WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` aot_40s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` aot_40s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of aot_40s.
     */
    distinct?: Aot_40ScalarFieldEnum | Aot_40ScalarFieldEnum[]
  }

  /**
   * aot_40 findFirstOrThrow
   */
  export type aot_40FindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the aot_40
     */
    select?: aot_40Select<ExtArgs> | null
    /**
     * Omit specific fields from the aot_40
     */
    omit?: aot_40Omit<ExtArgs> | null
    /**
     * Filter, which aot_40 to fetch.
     */
    where?: aot_40WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of aot_40s to fetch.
     */
    orderBy?: aot_40OrderByWithRelationInput | aot_40OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for aot_40s.
     */
    cursor?: aot_40WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` aot_40s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` aot_40s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of aot_40s.
     */
    distinct?: Aot_40ScalarFieldEnum | Aot_40ScalarFieldEnum[]
  }

  /**
   * aot_40 findMany
   */
  export type aot_40FindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the aot_40
     */
    select?: aot_40Select<ExtArgs> | null
    /**
     * Omit specific fields from the aot_40
     */
    omit?: aot_40Omit<ExtArgs> | null
    /**
     * Filter, which aot_40s to fetch.
     */
    where?: aot_40WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of aot_40s to fetch.
     */
    orderBy?: aot_40OrderByWithRelationInput | aot_40OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing aot_40s.
     */
    cursor?: aot_40WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` aot_40s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` aot_40s.
     */
    skip?: number
    distinct?: Aot_40ScalarFieldEnum | Aot_40ScalarFieldEnum[]
  }

  /**
   * aot_40 create
   */
  export type aot_40CreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the aot_40
     */
    select?: aot_40Select<ExtArgs> | null
    /**
     * Omit specific fields from the aot_40
     */
    omit?: aot_40Omit<ExtArgs> | null
    /**
     * The data needed to create a aot_40.
     */
    data: XOR<aot_40CreateInput, aot_40UncheckedCreateInput>
  }

  /**
   * aot_40 createMany
   */
  export type aot_40CreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many aot_40s.
     */
    data: aot_40CreateManyInput | aot_40CreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * aot_40 createManyAndReturn
   */
  export type aot_40CreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the aot_40
     */
    select?: aot_40SelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the aot_40
     */
    omit?: aot_40Omit<ExtArgs> | null
    /**
     * The data used to create many aot_40s.
     */
    data: aot_40CreateManyInput | aot_40CreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * aot_40 update
   */
  export type aot_40UpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the aot_40
     */
    select?: aot_40Select<ExtArgs> | null
    /**
     * Omit specific fields from the aot_40
     */
    omit?: aot_40Omit<ExtArgs> | null
    /**
     * The data needed to update a aot_40.
     */
    data: XOR<aot_40UpdateInput, aot_40UncheckedUpdateInput>
    /**
     * Choose, which aot_40 to update.
     */
    where: aot_40WhereUniqueInput
  }

  /**
   * aot_40 updateMany
   */
  export type aot_40UpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update aot_40s.
     */
    data: XOR<aot_40UpdateManyMutationInput, aot_40UncheckedUpdateManyInput>
    /**
     * Filter which aot_40s to update
     */
    where?: aot_40WhereInput
    /**
     * Limit how many aot_40s to update.
     */
    limit?: number
  }

  /**
   * aot_40 updateManyAndReturn
   */
  export type aot_40UpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the aot_40
     */
    select?: aot_40SelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the aot_40
     */
    omit?: aot_40Omit<ExtArgs> | null
    /**
     * The data used to update aot_40s.
     */
    data: XOR<aot_40UpdateManyMutationInput, aot_40UncheckedUpdateManyInput>
    /**
     * Filter which aot_40s to update
     */
    where?: aot_40WhereInput
    /**
     * Limit how many aot_40s to update.
     */
    limit?: number
  }

  /**
   * aot_40 upsert
   */
  export type aot_40UpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the aot_40
     */
    select?: aot_40Select<ExtArgs> | null
    /**
     * Omit specific fields from the aot_40
     */
    omit?: aot_40Omit<ExtArgs> | null
    /**
     * The filter to search for the aot_40 to update in case it exists.
     */
    where: aot_40WhereUniqueInput
    /**
     * In case the aot_40 found by the `where` argument doesn't exist, create a new aot_40 with this data.
     */
    create: XOR<aot_40CreateInput, aot_40UncheckedCreateInput>
    /**
     * In case the aot_40 was found with the provided `where` argument, update it with this data.
     */
    update: XOR<aot_40UpdateInput, aot_40UncheckedUpdateInput>
  }

  /**
   * aot_40 delete
   */
  export type aot_40DeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the aot_40
     */
    select?: aot_40Select<ExtArgs> | null
    /**
     * Omit specific fields from the aot_40
     */
    omit?: aot_40Omit<ExtArgs> | null
    /**
     * Filter which aot_40 to delete.
     */
    where: aot_40WhereUniqueInput
  }

  /**
   * aot_40 deleteMany
   */
  export type aot_40DeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which aot_40s to delete
     */
    where?: aot_40WhereInput
    /**
     * Limit how many aot_40s to delete.
     */
    limit?: number
  }

  /**
   * aot_40 without action
   */
  export type aot_40DefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the aot_40
     */
    select?: aot_40Select<ExtArgs> | null
    /**
     * Omit specific fields from the aot_40
     */
    omit?: aot_40Omit<ExtArgs> | null
  }


  /**
   * Model qualite_sites_baignade
   */

  export type AggregateQualite_sites_baignade = {
    _count: Qualite_sites_baignadeCountAggregateOutputType | null
    _avg: Qualite_sites_baignadeAvgAggregateOutputType | null
    _sum: Qualite_sites_baignadeSumAggregateOutputType | null
    _min: Qualite_sites_baignadeMinAggregateOutputType | null
    _max: Qualite_sites_baignadeMaxAggregateOutputType | null
  }

  export type Qualite_sites_baignadeAvgAggregateOutputType = {
    index: number | null
    LONG: number | null
    LAT: number | null
  }

  export type Qualite_sites_baignadeSumAggregateOutputType = {
    index: bigint | null
    LONG: number | null
    LAT: number | null
  }

  export type Qualite_sites_baignadeMinAggregateOutputType = {
    index: bigint | null
    DEP_NOM: string | null
    DEP_NUM: string | null
    TYPE: string | null
    COMMUNE: string | null
    POINT: string | null
    LONG: number | null
    LAT: number | null
    QEB_2013: string | null
    QEB_2014: string | null
    QEB_2015: string | null
    QEB_2016: string | null
    QEB_2017: string | null
    QEB_2018: string | null
    QEB_2019: string | null
    QEB_2020: string | null
  }

  export type Qualite_sites_baignadeMaxAggregateOutputType = {
    index: bigint | null
    DEP_NOM: string | null
    DEP_NUM: string | null
    TYPE: string | null
    COMMUNE: string | null
    POINT: string | null
    LONG: number | null
    LAT: number | null
    QEB_2013: string | null
    QEB_2014: string | null
    QEB_2015: string | null
    QEB_2016: string | null
    QEB_2017: string | null
    QEB_2018: string | null
    QEB_2019: string | null
    QEB_2020: string | null
  }

  export type Qualite_sites_baignadeCountAggregateOutputType = {
    index: number
    DEP_NOM: number
    DEP_NUM: number
    TYPE: number
    COMMUNE: number
    POINT: number
    LONG: number
    LAT: number
    QEB_2013: number
    QEB_2014: number
    QEB_2015: number
    QEB_2016: number
    QEB_2017: number
    QEB_2018: number
    QEB_2019: number
    QEB_2020: number
    _all: number
  }


  export type Qualite_sites_baignadeAvgAggregateInputType = {
    index?: true
    LONG?: true
    LAT?: true
  }

  export type Qualite_sites_baignadeSumAggregateInputType = {
    index?: true
    LONG?: true
    LAT?: true
  }

  export type Qualite_sites_baignadeMinAggregateInputType = {
    index?: true
    DEP_NOM?: true
    DEP_NUM?: true
    TYPE?: true
    COMMUNE?: true
    POINT?: true
    LONG?: true
    LAT?: true
    QEB_2013?: true
    QEB_2014?: true
    QEB_2015?: true
    QEB_2016?: true
    QEB_2017?: true
    QEB_2018?: true
    QEB_2019?: true
    QEB_2020?: true
  }

  export type Qualite_sites_baignadeMaxAggregateInputType = {
    index?: true
    DEP_NOM?: true
    DEP_NUM?: true
    TYPE?: true
    COMMUNE?: true
    POINT?: true
    LONG?: true
    LAT?: true
    QEB_2013?: true
    QEB_2014?: true
    QEB_2015?: true
    QEB_2016?: true
    QEB_2017?: true
    QEB_2018?: true
    QEB_2019?: true
    QEB_2020?: true
  }

  export type Qualite_sites_baignadeCountAggregateInputType = {
    index?: true
    DEP_NOM?: true
    DEP_NUM?: true
    TYPE?: true
    COMMUNE?: true
    POINT?: true
    LONG?: true
    LAT?: true
    QEB_2013?: true
    QEB_2014?: true
    QEB_2015?: true
    QEB_2016?: true
    QEB_2017?: true
    QEB_2018?: true
    QEB_2019?: true
    QEB_2020?: true
    _all?: true
  }

  export type Qualite_sites_baignadeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which qualite_sites_baignade to aggregate.
     */
    where?: qualite_sites_baignadeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of qualite_sites_baignades to fetch.
     */
    orderBy?: qualite_sites_baignadeOrderByWithRelationInput | qualite_sites_baignadeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: qualite_sites_baignadeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` qualite_sites_baignades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` qualite_sites_baignades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned qualite_sites_baignades
    **/
    _count?: true | Qualite_sites_baignadeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Qualite_sites_baignadeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Qualite_sites_baignadeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Qualite_sites_baignadeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Qualite_sites_baignadeMaxAggregateInputType
  }

  export type GetQualite_sites_baignadeAggregateType<T extends Qualite_sites_baignadeAggregateArgs> = {
        [P in keyof T & keyof AggregateQualite_sites_baignade]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQualite_sites_baignade[P]>
      : GetScalarType<T[P], AggregateQualite_sites_baignade[P]>
  }




  export type qualite_sites_baignadeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: qualite_sites_baignadeWhereInput
    orderBy?: qualite_sites_baignadeOrderByWithAggregationInput | qualite_sites_baignadeOrderByWithAggregationInput[]
    by: Qualite_sites_baignadeScalarFieldEnum[] | Qualite_sites_baignadeScalarFieldEnum
    having?: qualite_sites_baignadeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Qualite_sites_baignadeCountAggregateInputType | true
    _avg?: Qualite_sites_baignadeAvgAggregateInputType
    _sum?: Qualite_sites_baignadeSumAggregateInputType
    _min?: Qualite_sites_baignadeMinAggregateInputType
    _max?: Qualite_sites_baignadeMaxAggregateInputType
  }

  export type Qualite_sites_baignadeGroupByOutputType = {
    index: bigint
    DEP_NOM: string
    DEP_NUM: string
    TYPE: string
    COMMUNE: string
    POINT: string
    LONG: number
    LAT: number
    QEB_2013: string | null
    QEB_2014: string | null
    QEB_2015: string | null
    QEB_2016: string | null
    QEB_2017: string | null
    QEB_2018: string | null
    QEB_2019: string | null
    QEB_2020: string | null
    _count: Qualite_sites_baignadeCountAggregateOutputType | null
    _avg: Qualite_sites_baignadeAvgAggregateOutputType | null
    _sum: Qualite_sites_baignadeSumAggregateOutputType | null
    _min: Qualite_sites_baignadeMinAggregateOutputType | null
    _max: Qualite_sites_baignadeMaxAggregateOutputType | null
  }

  type GetQualite_sites_baignadeGroupByPayload<T extends qualite_sites_baignadeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Qualite_sites_baignadeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Qualite_sites_baignadeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Qualite_sites_baignadeGroupByOutputType[P]>
            : GetScalarType<T[P], Qualite_sites_baignadeGroupByOutputType[P]>
        }
      >
    >


  export type qualite_sites_baignadeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    index?: boolean
    DEP_NOM?: boolean
    DEP_NUM?: boolean
    TYPE?: boolean
    COMMUNE?: boolean
    POINT?: boolean
    LONG?: boolean
    LAT?: boolean
    QEB_2013?: boolean
    QEB_2014?: boolean
    QEB_2015?: boolean
    QEB_2016?: boolean
    QEB_2017?: boolean
    QEB_2018?: boolean
    QEB_2019?: boolean
    QEB_2020?: boolean
  }, ExtArgs["result"]["qualite_sites_baignade"]>

  export type qualite_sites_baignadeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    index?: boolean
    DEP_NOM?: boolean
    DEP_NUM?: boolean
    TYPE?: boolean
    COMMUNE?: boolean
    POINT?: boolean
    LONG?: boolean
    LAT?: boolean
    QEB_2013?: boolean
    QEB_2014?: boolean
    QEB_2015?: boolean
    QEB_2016?: boolean
    QEB_2017?: boolean
    QEB_2018?: boolean
    QEB_2019?: boolean
    QEB_2020?: boolean
  }, ExtArgs["result"]["qualite_sites_baignade"]>

  export type qualite_sites_baignadeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    index?: boolean
    DEP_NOM?: boolean
    DEP_NUM?: boolean
    TYPE?: boolean
    COMMUNE?: boolean
    POINT?: boolean
    LONG?: boolean
    LAT?: boolean
    QEB_2013?: boolean
    QEB_2014?: boolean
    QEB_2015?: boolean
    QEB_2016?: boolean
    QEB_2017?: boolean
    QEB_2018?: boolean
    QEB_2019?: boolean
    QEB_2020?: boolean
  }, ExtArgs["result"]["qualite_sites_baignade"]>

  export type qualite_sites_baignadeSelectScalar = {
    index?: boolean
    DEP_NOM?: boolean
    DEP_NUM?: boolean
    TYPE?: boolean
    COMMUNE?: boolean
    POINT?: boolean
    LONG?: boolean
    LAT?: boolean
    QEB_2013?: boolean
    QEB_2014?: boolean
    QEB_2015?: boolean
    QEB_2016?: boolean
    QEB_2017?: boolean
    QEB_2018?: boolean
    QEB_2019?: boolean
    QEB_2020?: boolean
  }

  export type qualite_sites_baignadeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"index" | "DEP_NOM" | "DEP_NUM" | "TYPE" | "COMMUNE" | "POINT" | "LONG" | "LAT" | "QEB_2013" | "QEB_2014" | "QEB_2015" | "QEB_2016" | "QEB_2017" | "QEB_2018" | "QEB_2019" | "QEB_2020", ExtArgs["result"]["qualite_sites_baignade"]>

  export type $qualite_sites_baignadePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "qualite_sites_baignade"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      index: bigint
      DEP_NOM: string
      DEP_NUM: string
      TYPE: string
      COMMUNE: string
      POINT: string
      LONG: number
      LAT: number
      QEB_2013: string | null
      QEB_2014: string | null
      QEB_2015: string | null
      QEB_2016: string | null
      QEB_2017: string | null
      QEB_2018: string | null
      QEB_2019: string | null
      QEB_2020: string | null
    }, ExtArgs["result"]["qualite_sites_baignade"]>
    composites: {}
  }

  type qualite_sites_baignadeGetPayload<S extends boolean | null | undefined | qualite_sites_baignadeDefaultArgs> = $Result.GetResult<Prisma.$qualite_sites_baignadePayload, S>

  type qualite_sites_baignadeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<qualite_sites_baignadeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Qualite_sites_baignadeCountAggregateInputType | true
    }

  export interface qualite_sites_baignadeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['qualite_sites_baignade'], meta: { name: 'qualite_sites_baignade' } }
    /**
     * Find zero or one Qualite_sites_baignade that matches the filter.
     * @param {qualite_sites_baignadeFindUniqueArgs} args - Arguments to find a Qualite_sites_baignade
     * @example
     * // Get one Qualite_sites_baignade
     * const qualite_sites_baignade = await prisma.qualite_sites_baignade.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends qualite_sites_baignadeFindUniqueArgs>(args: SelectSubset<T, qualite_sites_baignadeFindUniqueArgs<ExtArgs>>): Prisma__qualite_sites_baignadeClient<$Result.GetResult<Prisma.$qualite_sites_baignadePayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Qualite_sites_baignade that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {qualite_sites_baignadeFindUniqueOrThrowArgs} args - Arguments to find a Qualite_sites_baignade
     * @example
     * // Get one Qualite_sites_baignade
     * const qualite_sites_baignade = await prisma.qualite_sites_baignade.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends qualite_sites_baignadeFindUniqueOrThrowArgs>(args: SelectSubset<T, qualite_sites_baignadeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__qualite_sites_baignadeClient<$Result.GetResult<Prisma.$qualite_sites_baignadePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Qualite_sites_baignade that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {qualite_sites_baignadeFindFirstArgs} args - Arguments to find a Qualite_sites_baignade
     * @example
     * // Get one Qualite_sites_baignade
     * const qualite_sites_baignade = await prisma.qualite_sites_baignade.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends qualite_sites_baignadeFindFirstArgs>(args?: SelectSubset<T, qualite_sites_baignadeFindFirstArgs<ExtArgs>>): Prisma__qualite_sites_baignadeClient<$Result.GetResult<Prisma.$qualite_sites_baignadePayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Qualite_sites_baignade that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {qualite_sites_baignadeFindFirstOrThrowArgs} args - Arguments to find a Qualite_sites_baignade
     * @example
     * // Get one Qualite_sites_baignade
     * const qualite_sites_baignade = await prisma.qualite_sites_baignade.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends qualite_sites_baignadeFindFirstOrThrowArgs>(args?: SelectSubset<T, qualite_sites_baignadeFindFirstOrThrowArgs<ExtArgs>>): Prisma__qualite_sites_baignadeClient<$Result.GetResult<Prisma.$qualite_sites_baignadePayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Qualite_sites_baignades that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {qualite_sites_baignadeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Qualite_sites_baignades
     * const qualite_sites_baignades = await prisma.qualite_sites_baignade.findMany()
     * 
     * // Get first 10 Qualite_sites_baignades
     * const qualite_sites_baignades = await prisma.qualite_sites_baignade.findMany({ take: 10 })
     * 
     * // Only select the `index`
     * const qualite_sites_baignadeWithIndexOnly = await prisma.qualite_sites_baignade.findMany({ select: { index: true } })
     * 
     */
    findMany<T extends qualite_sites_baignadeFindManyArgs>(args?: SelectSubset<T, qualite_sites_baignadeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$qualite_sites_baignadePayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Qualite_sites_baignade.
     * @param {qualite_sites_baignadeCreateArgs} args - Arguments to create a Qualite_sites_baignade.
     * @example
     * // Create one Qualite_sites_baignade
     * const Qualite_sites_baignade = await prisma.qualite_sites_baignade.create({
     *   data: {
     *     // ... data to create a Qualite_sites_baignade
     *   }
     * })
     * 
     */
    create<T extends qualite_sites_baignadeCreateArgs>(args: SelectSubset<T, qualite_sites_baignadeCreateArgs<ExtArgs>>): Prisma__qualite_sites_baignadeClient<$Result.GetResult<Prisma.$qualite_sites_baignadePayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Qualite_sites_baignades.
     * @param {qualite_sites_baignadeCreateManyArgs} args - Arguments to create many Qualite_sites_baignades.
     * @example
     * // Create many Qualite_sites_baignades
     * const qualite_sites_baignade = await prisma.qualite_sites_baignade.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends qualite_sites_baignadeCreateManyArgs>(args?: SelectSubset<T, qualite_sites_baignadeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Qualite_sites_baignades and returns the data saved in the database.
     * @param {qualite_sites_baignadeCreateManyAndReturnArgs} args - Arguments to create many Qualite_sites_baignades.
     * @example
     * // Create many Qualite_sites_baignades
     * const qualite_sites_baignade = await prisma.qualite_sites_baignade.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Qualite_sites_baignades and only return the `index`
     * const qualite_sites_baignadeWithIndexOnly = await prisma.qualite_sites_baignade.createManyAndReturn({
     *   select: { index: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends qualite_sites_baignadeCreateManyAndReturnArgs>(args?: SelectSubset<T, qualite_sites_baignadeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$qualite_sites_baignadePayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Qualite_sites_baignade.
     * @param {qualite_sites_baignadeDeleteArgs} args - Arguments to delete one Qualite_sites_baignade.
     * @example
     * // Delete one Qualite_sites_baignade
     * const Qualite_sites_baignade = await prisma.qualite_sites_baignade.delete({
     *   where: {
     *     // ... filter to delete one Qualite_sites_baignade
     *   }
     * })
     * 
     */
    delete<T extends qualite_sites_baignadeDeleteArgs>(args: SelectSubset<T, qualite_sites_baignadeDeleteArgs<ExtArgs>>): Prisma__qualite_sites_baignadeClient<$Result.GetResult<Prisma.$qualite_sites_baignadePayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Qualite_sites_baignade.
     * @param {qualite_sites_baignadeUpdateArgs} args - Arguments to update one Qualite_sites_baignade.
     * @example
     * // Update one Qualite_sites_baignade
     * const qualite_sites_baignade = await prisma.qualite_sites_baignade.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends qualite_sites_baignadeUpdateArgs>(args: SelectSubset<T, qualite_sites_baignadeUpdateArgs<ExtArgs>>): Prisma__qualite_sites_baignadeClient<$Result.GetResult<Prisma.$qualite_sites_baignadePayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Qualite_sites_baignades.
     * @param {qualite_sites_baignadeDeleteManyArgs} args - Arguments to filter Qualite_sites_baignades to delete.
     * @example
     * // Delete a few Qualite_sites_baignades
     * const { count } = await prisma.qualite_sites_baignade.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends qualite_sites_baignadeDeleteManyArgs>(args?: SelectSubset<T, qualite_sites_baignadeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Qualite_sites_baignades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {qualite_sites_baignadeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Qualite_sites_baignades
     * const qualite_sites_baignade = await prisma.qualite_sites_baignade.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends qualite_sites_baignadeUpdateManyArgs>(args: SelectSubset<T, qualite_sites_baignadeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Qualite_sites_baignades and returns the data updated in the database.
     * @param {qualite_sites_baignadeUpdateManyAndReturnArgs} args - Arguments to update many Qualite_sites_baignades.
     * @example
     * // Update many Qualite_sites_baignades
     * const qualite_sites_baignade = await prisma.qualite_sites_baignade.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Qualite_sites_baignades and only return the `index`
     * const qualite_sites_baignadeWithIndexOnly = await prisma.qualite_sites_baignade.updateManyAndReturn({
     *   select: { index: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends qualite_sites_baignadeUpdateManyAndReturnArgs>(args: SelectSubset<T, qualite_sites_baignadeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$qualite_sites_baignadePayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Qualite_sites_baignade.
     * @param {qualite_sites_baignadeUpsertArgs} args - Arguments to update or create a Qualite_sites_baignade.
     * @example
     * // Update or create a Qualite_sites_baignade
     * const qualite_sites_baignade = await prisma.qualite_sites_baignade.upsert({
     *   create: {
     *     // ... data to create a Qualite_sites_baignade
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Qualite_sites_baignade we want to update
     *   }
     * })
     */
    upsert<T extends qualite_sites_baignadeUpsertArgs>(args: SelectSubset<T, qualite_sites_baignadeUpsertArgs<ExtArgs>>): Prisma__qualite_sites_baignadeClient<$Result.GetResult<Prisma.$qualite_sites_baignadePayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Qualite_sites_baignades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {qualite_sites_baignadeCountArgs} args - Arguments to filter Qualite_sites_baignades to count.
     * @example
     * // Count the number of Qualite_sites_baignades
     * const count = await prisma.qualite_sites_baignade.count({
     *   where: {
     *     // ... the filter for the Qualite_sites_baignades we want to count
     *   }
     * })
    **/
    count<T extends qualite_sites_baignadeCountArgs>(
      args?: Subset<T, qualite_sites_baignadeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Qualite_sites_baignadeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Qualite_sites_baignade.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Qualite_sites_baignadeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Qualite_sites_baignadeAggregateArgs>(args: Subset<T, Qualite_sites_baignadeAggregateArgs>): Prisma.PrismaPromise<GetQualite_sites_baignadeAggregateType<T>>

    /**
     * Group by Qualite_sites_baignade.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {qualite_sites_baignadeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends qualite_sites_baignadeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: qualite_sites_baignadeGroupByArgs['orderBy'] }
        : { orderBy?: qualite_sites_baignadeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, qualite_sites_baignadeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQualite_sites_baignadeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the qualite_sites_baignade model
   */
  readonly fields: qualite_sites_baignadeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for qualite_sites_baignade.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__qualite_sites_baignadeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the qualite_sites_baignade model
   */ 
  interface qualite_sites_baignadeFieldRefs {
    readonly index: FieldRef<"qualite_sites_baignade", 'BigInt'>
    readonly DEP_NOM: FieldRef<"qualite_sites_baignade", 'String'>
    readonly DEP_NUM: FieldRef<"qualite_sites_baignade", 'String'>
    readonly TYPE: FieldRef<"qualite_sites_baignade", 'String'>
    readonly COMMUNE: FieldRef<"qualite_sites_baignade", 'String'>
    readonly POINT: FieldRef<"qualite_sites_baignade", 'String'>
    readonly LONG: FieldRef<"qualite_sites_baignade", 'Float'>
    readonly LAT: FieldRef<"qualite_sites_baignade", 'Float'>
    readonly QEB_2013: FieldRef<"qualite_sites_baignade", 'String'>
    readonly QEB_2014: FieldRef<"qualite_sites_baignade", 'String'>
    readonly QEB_2015: FieldRef<"qualite_sites_baignade", 'String'>
    readonly QEB_2016: FieldRef<"qualite_sites_baignade", 'String'>
    readonly QEB_2017: FieldRef<"qualite_sites_baignade", 'String'>
    readonly QEB_2018: FieldRef<"qualite_sites_baignade", 'String'>
    readonly QEB_2019: FieldRef<"qualite_sites_baignade", 'String'>
    readonly QEB_2020: FieldRef<"qualite_sites_baignade", 'String'>
  }
    

  // Custom InputTypes
  /**
   * qualite_sites_baignade findUnique
   */
  export type qualite_sites_baignadeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the qualite_sites_baignade
     */
    select?: qualite_sites_baignadeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the qualite_sites_baignade
     */
    omit?: qualite_sites_baignadeOmit<ExtArgs> | null
    /**
     * Filter, which qualite_sites_baignade to fetch.
     */
    where: qualite_sites_baignadeWhereUniqueInput
  }

  /**
   * qualite_sites_baignade findUniqueOrThrow
   */
  export type qualite_sites_baignadeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the qualite_sites_baignade
     */
    select?: qualite_sites_baignadeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the qualite_sites_baignade
     */
    omit?: qualite_sites_baignadeOmit<ExtArgs> | null
    /**
     * Filter, which qualite_sites_baignade to fetch.
     */
    where: qualite_sites_baignadeWhereUniqueInput
  }

  /**
   * qualite_sites_baignade findFirst
   */
  export type qualite_sites_baignadeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the qualite_sites_baignade
     */
    select?: qualite_sites_baignadeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the qualite_sites_baignade
     */
    omit?: qualite_sites_baignadeOmit<ExtArgs> | null
    /**
     * Filter, which qualite_sites_baignade to fetch.
     */
    where?: qualite_sites_baignadeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of qualite_sites_baignades to fetch.
     */
    orderBy?: qualite_sites_baignadeOrderByWithRelationInput | qualite_sites_baignadeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for qualite_sites_baignades.
     */
    cursor?: qualite_sites_baignadeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` qualite_sites_baignades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` qualite_sites_baignades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of qualite_sites_baignades.
     */
    distinct?: Qualite_sites_baignadeScalarFieldEnum | Qualite_sites_baignadeScalarFieldEnum[]
  }

  /**
   * qualite_sites_baignade findFirstOrThrow
   */
  export type qualite_sites_baignadeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the qualite_sites_baignade
     */
    select?: qualite_sites_baignadeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the qualite_sites_baignade
     */
    omit?: qualite_sites_baignadeOmit<ExtArgs> | null
    /**
     * Filter, which qualite_sites_baignade to fetch.
     */
    where?: qualite_sites_baignadeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of qualite_sites_baignades to fetch.
     */
    orderBy?: qualite_sites_baignadeOrderByWithRelationInput | qualite_sites_baignadeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for qualite_sites_baignades.
     */
    cursor?: qualite_sites_baignadeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` qualite_sites_baignades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` qualite_sites_baignades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of qualite_sites_baignades.
     */
    distinct?: Qualite_sites_baignadeScalarFieldEnum | Qualite_sites_baignadeScalarFieldEnum[]
  }

  /**
   * qualite_sites_baignade findMany
   */
  export type qualite_sites_baignadeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the qualite_sites_baignade
     */
    select?: qualite_sites_baignadeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the qualite_sites_baignade
     */
    omit?: qualite_sites_baignadeOmit<ExtArgs> | null
    /**
     * Filter, which qualite_sites_baignades to fetch.
     */
    where?: qualite_sites_baignadeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of qualite_sites_baignades to fetch.
     */
    orderBy?: qualite_sites_baignadeOrderByWithRelationInput | qualite_sites_baignadeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing qualite_sites_baignades.
     */
    cursor?: qualite_sites_baignadeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` qualite_sites_baignades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` qualite_sites_baignades.
     */
    skip?: number
    distinct?: Qualite_sites_baignadeScalarFieldEnum | Qualite_sites_baignadeScalarFieldEnum[]
  }

  /**
   * qualite_sites_baignade create
   */
  export type qualite_sites_baignadeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the qualite_sites_baignade
     */
    select?: qualite_sites_baignadeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the qualite_sites_baignade
     */
    omit?: qualite_sites_baignadeOmit<ExtArgs> | null
    /**
     * The data needed to create a qualite_sites_baignade.
     */
    data: XOR<qualite_sites_baignadeCreateInput, qualite_sites_baignadeUncheckedCreateInput>
  }

  /**
   * qualite_sites_baignade createMany
   */
  export type qualite_sites_baignadeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many qualite_sites_baignades.
     */
    data: qualite_sites_baignadeCreateManyInput | qualite_sites_baignadeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * qualite_sites_baignade createManyAndReturn
   */
  export type qualite_sites_baignadeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the qualite_sites_baignade
     */
    select?: qualite_sites_baignadeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the qualite_sites_baignade
     */
    omit?: qualite_sites_baignadeOmit<ExtArgs> | null
    /**
     * The data used to create many qualite_sites_baignades.
     */
    data: qualite_sites_baignadeCreateManyInput | qualite_sites_baignadeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * qualite_sites_baignade update
   */
  export type qualite_sites_baignadeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the qualite_sites_baignade
     */
    select?: qualite_sites_baignadeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the qualite_sites_baignade
     */
    omit?: qualite_sites_baignadeOmit<ExtArgs> | null
    /**
     * The data needed to update a qualite_sites_baignade.
     */
    data: XOR<qualite_sites_baignadeUpdateInput, qualite_sites_baignadeUncheckedUpdateInput>
    /**
     * Choose, which qualite_sites_baignade to update.
     */
    where: qualite_sites_baignadeWhereUniqueInput
  }

  /**
   * qualite_sites_baignade updateMany
   */
  export type qualite_sites_baignadeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update qualite_sites_baignades.
     */
    data: XOR<qualite_sites_baignadeUpdateManyMutationInput, qualite_sites_baignadeUncheckedUpdateManyInput>
    /**
     * Filter which qualite_sites_baignades to update
     */
    where?: qualite_sites_baignadeWhereInput
    /**
     * Limit how many qualite_sites_baignades to update.
     */
    limit?: number
  }

  /**
   * qualite_sites_baignade updateManyAndReturn
   */
  export type qualite_sites_baignadeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the qualite_sites_baignade
     */
    select?: qualite_sites_baignadeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the qualite_sites_baignade
     */
    omit?: qualite_sites_baignadeOmit<ExtArgs> | null
    /**
     * The data used to update qualite_sites_baignades.
     */
    data: XOR<qualite_sites_baignadeUpdateManyMutationInput, qualite_sites_baignadeUncheckedUpdateManyInput>
    /**
     * Filter which qualite_sites_baignades to update
     */
    where?: qualite_sites_baignadeWhereInput
    /**
     * Limit how many qualite_sites_baignades to update.
     */
    limit?: number
  }

  /**
   * qualite_sites_baignade upsert
   */
  export type qualite_sites_baignadeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the qualite_sites_baignade
     */
    select?: qualite_sites_baignadeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the qualite_sites_baignade
     */
    omit?: qualite_sites_baignadeOmit<ExtArgs> | null
    /**
     * The filter to search for the qualite_sites_baignade to update in case it exists.
     */
    where: qualite_sites_baignadeWhereUniqueInput
    /**
     * In case the qualite_sites_baignade found by the `where` argument doesn't exist, create a new qualite_sites_baignade with this data.
     */
    create: XOR<qualite_sites_baignadeCreateInput, qualite_sites_baignadeUncheckedCreateInput>
    /**
     * In case the qualite_sites_baignade was found with the provided `where` argument, update it with this data.
     */
    update: XOR<qualite_sites_baignadeUpdateInput, qualite_sites_baignadeUncheckedUpdateInput>
  }

  /**
   * qualite_sites_baignade delete
   */
  export type qualite_sites_baignadeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the qualite_sites_baignade
     */
    select?: qualite_sites_baignadeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the qualite_sites_baignade
     */
    omit?: qualite_sites_baignadeOmit<ExtArgs> | null
    /**
     * Filter which qualite_sites_baignade to delete.
     */
    where: qualite_sites_baignadeWhereUniqueInput
  }

  /**
   * qualite_sites_baignade deleteMany
   */
  export type qualite_sites_baignadeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which qualite_sites_baignades to delete
     */
    where?: qualite_sites_baignadeWhereInput
    /**
     * Limit how many qualite_sites_baignades to delete.
     */
    limit?: number
  }

  /**
   * qualite_sites_baignade without action
   */
  export type qualite_sites_baignadeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the qualite_sites_baignade
     */
    select?: qualite_sites_baignadeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the qualite_sites_baignade
     */
    omit?: qualite_sites_baignadeOmit<ExtArgs> | null
  }


  /**
   * Model communes
   */

  export type AggregateCommunes = {
    _count: CommunesCountAggregateOutputType | null
    _avg: CommunesAvgAggregateOutputType | null
    _sum: CommunesSumAggregateOutputType | null
    _min: CommunesMinAggregateOutputType | null
    _max: CommunesMaxAggregateOutputType | null
  }

  export type CommunesAvgAggregateOutputType = {
    pk: number | null
    densite_bati: number | null
    precarite_logement: number | null
  }

  export type CommunesSumAggregateOutputType = {
    pk: number | null
    densite_bati: number | null
    precarite_logement: number | null
  }

  export type CommunesMinAggregateOutputType = {
    pk: number | null
    code_commune: string | null
    libelle_commune: string | null
    epci: string | null
    libelle_epci: string | null
    libgeo: string | null
    coordinates: string | null
    densite_bati: number | null
    precarite_logement: number | null
  }

  export type CommunesMaxAggregateOutputType = {
    pk: number | null
    code_commune: string | null
    libelle_commune: string | null
    epci: string | null
    libelle_epci: string | null
    libgeo: string | null
    coordinates: string | null
    densite_bati: number | null
    precarite_logement: number | null
  }

  export type CommunesCountAggregateOutputType = {
    pk: number
    code_commune: number
    libelle_commune: number
    epci: number
    libelle_epci: number
    libgeo: number
    coordinates: number
    densite_bati: number
    precarite_logement: number
    _all: number
  }


  export type CommunesAvgAggregateInputType = {
    pk?: true
    densite_bati?: true
    precarite_logement?: true
  }

  export type CommunesSumAggregateInputType = {
    pk?: true
    densite_bati?: true
    precarite_logement?: true
  }

  export type CommunesMinAggregateInputType = {
    pk?: true
    code_commune?: true
    libelle_commune?: true
    epci?: true
    libelle_epci?: true
    libgeo?: true
    coordinates?: true
    densite_bati?: true
    precarite_logement?: true
  }

  export type CommunesMaxAggregateInputType = {
    pk?: true
    code_commune?: true
    libelle_commune?: true
    epci?: true
    libelle_epci?: true
    libgeo?: true
    coordinates?: true
    densite_bati?: true
    precarite_logement?: true
  }

  export type CommunesCountAggregateInputType = {
    pk?: true
    code_commune?: true
    libelle_commune?: true
    epci?: true
    libelle_epci?: true
    libgeo?: true
    coordinates?: true
    densite_bati?: true
    precarite_logement?: true
    _all?: true
  }

  export type CommunesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which communes to aggregate.
     */
    where?: communesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of communes to fetch.
     */
    orderBy?: communesOrderByWithRelationInput | communesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: communesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` communes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` communes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned communes
    **/
    _count?: true | CommunesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommunesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommunesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommunesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommunesMaxAggregateInputType
  }

  export type GetCommunesAggregateType<T extends CommunesAggregateArgs> = {
        [P in keyof T & keyof AggregateCommunes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCommunes[P]>
      : GetScalarType<T[P], AggregateCommunes[P]>
  }




  export type communesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: communesWhereInput
    orderBy?: communesOrderByWithAggregationInput | communesOrderByWithAggregationInput[]
    by: CommunesScalarFieldEnum[] | CommunesScalarFieldEnum
    having?: communesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommunesCountAggregateInputType | true
    _avg?: CommunesAvgAggregateInputType
    _sum?: CommunesSumAggregateInputType
    _min?: CommunesMinAggregateInputType
    _max?: CommunesMaxAggregateInputType
  }

  export type CommunesGroupByOutputType = {
    pk: number
    code_commune: string | null
    libelle_commune: string | null
    epci: string | null
    libelle_epci: string | null
    libgeo: string | null
    coordinates: string | null
    densite_bati: number | null
    precarite_logement: number | null
    _count: CommunesCountAggregateOutputType | null
    _avg: CommunesAvgAggregateOutputType | null
    _sum: CommunesSumAggregateOutputType | null
    _min: CommunesMinAggregateOutputType | null
    _max: CommunesMaxAggregateOutputType | null
  }

  type GetCommunesGroupByPayload<T extends communesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommunesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommunesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommunesGroupByOutputType[P]>
            : GetScalarType<T[P], CommunesGroupByOutputType[P]>
        }
      >
    >


  export type communesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    pk?: boolean
    code_commune?: boolean
    libelle_commune?: boolean
    epci?: boolean
    libelle_epci?: boolean
    libgeo?: boolean
    coordinates?: boolean
    densite_bati?: boolean
    precarite_logement?: boolean
  }, ExtArgs["result"]["communes"]>

  export type communesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    pk?: boolean
    code_commune?: boolean
    libelle_commune?: boolean
    epci?: boolean
    libelle_epci?: boolean
    libgeo?: boolean
    coordinates?: boolean
    densite_bati?: boolean
    precarite_logement?: boolean
  }, ExtArgs["result"]["communes"]>

  export type communesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    pk?: boolean
    code_commune?: boolean
    libelle_commune?: boolean
    epci?: boolean
    libelle_epci?: boolean
    libgeo?: boolean
    coordinates?: boolean
    densite_bati?: boolean
    precarite_logement?: boolean
  }, ExtArgs["result"]["communes"]>

  export type communesSelectScalar = {
    pk?: boolean
    code_commune?: boolean
    libelle_commune?: boolean
    epci?: boolean
    libelle_epci?: boolean
    libgeo?: boolean
    coordinates?: boolean
    densite_bati?: boolean
    precarite_logement?: boolean
  }

  export type communesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"pk" | "code_commune" | "libelle_commune" | "epci" | "libelle_epci" | "libgeo" | "coordinates" | "densite_bati" | "precarite_logement", ExtArgs["result"]["communes"]>

  export type $communesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "communes"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      pk: number
      code_commune: string | null
      libelle_commune: string | null
      epci: string | null
      libelle_epci: string | null
      libgeo: string | null
      coordinates: string | null
      densite_bati: number | null
      precarite_logement: number | null
    }, ExtArgs["result"]["communes"]>
    composites: {}
  }

  type communesGetPayload<S extends boolean | null | undefined | communesDefaultArgs> = $Result.GetResult<Prisma.$communesPayload, S>

  type communesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<communesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CommunesCountAggregateInputType | true
    }

  export interface communesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['communes'], meta: { name: 'communes' } }
    /**
     * Find zero or one Communes that matches the filter.
     * @param {communesFindUniqueArgs} args - Arguments to find a Communes
     * @example
     * // Get one Communes
     * const communes = await prisma.communes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends communesFindUniqueArgs>(args: SelectSubset<T, communesFindUniqueArgs<ExtArgs>>): Prisma__communesClient<$Result.GetResult<Prisma.$communesPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Communes that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {communesFindUniqueOrThrowArgs} args - Arguments to find a Communes
     * @example
     * // Get one Communes
     * const communes = await prisma.communes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends communesFindUniqueOrThrowArgs>(args: SelectSubset<T, communesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__communesClient<$Result.GetResult<Prisma.$communesPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Communes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {communesFindFirstArgs} args - Arguments to find a Communes
     * @example
     * // Get one Communes
     * const communes = await prisma.communes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends communesFindFirstArgs>(args?: SelectSubset<T, communesFindFirstArgs<ExtArgs>>): Prisma__communesClient<$Result.GetResult<Prisma.$communesPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Communes that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {communesFindFirstOrThrowArgs} args - Arguments to find a Communes
     * @example
     * // Get one Communes
     * const communes = await prisma.communes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends communesFindFirstOrThrowArgs>(args?: SelectSubset<T, communesFindFirstOrThrowArgs<ExtArgs>>): Prisma__communesClient<$Result.GetResult<Prisma.$communesPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Communes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {communesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Communes
     * const communes = await prisma.communes.findMany()
     * 
     * // Get first 10 Communes
     * const communes = await prisma.communes.findMany({ take: 10 })
     * 
     * // Only select the `pk`
     * const communesWithPkOnly = await prisma.communes.findMany({ select: { pk: true } })
     * 
     */
    findMany<T extends communesFindManyArgs>(args?: SelectSubset<T, communesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$communesPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Communes.
     * @param {communesCreateArgs} args - Arguments to create a Communes.
     * @example
     * // Create one Communes
     * const Communes = await prisma.communes.create({
     *   data: {
     *     // ... data to create a Communes
     *   }
     * })
     * 
     */
    create<T extends communesCreateArgs>(args: SelectSubset<T, communesCreateArgs<ExtArgs>>): Prisma__communesClient<$Result.GetResult<Prisma.$communesPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Communes.
     * @param {communesCreateManyArgs} args - Arguments to create many Communes.
     * @example
     * // Create many Communes
     * const communes = await prisma.communes.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends communesCreateManyArgs>(args?: SelectSubset<T, communesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Communes and returns the data saved in the database.
     * @param {communesCreateManyAndReturnArgs} args - Arguments to create many Communes.
     * @example
     * // Create many Communes
     * const communes = await prisma.communes.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Communes and only return the `pk`
     * const communesWithPkOnly = await prisma.communes.createManyAndReturn({
     *   select: { pk: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends communesCreateManyAndReturnArgs>(args?: SelectSubset<T, communesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$communesPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Communes.
     * @param {communesDeleteArgs} args - Arguments to delete one Communes.
     * @example
     * // Delete one Communes
     * const Communes = await prisma.communes.delete({
     *   where: {
     *     // ... filter to delete one Communes
     *   }
     * })
     * 
     */
    delete<T extends communesDeleteArgs>(args: SelectSubset<T, communesDeleteArgs<ExtArgs>>): Prisma__communesClient<$Result.GetResult<Prisma.$communesPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Communes.
     * @param {communesUpdateArgs} args - Arguments to update one Communes.
     * @example
     * // Update one Communes
     * const communes = await prisma.communes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends communesUpdateArgs>(args: SelectSubset<T, communesUpdateArgs<ExtArgs>>): Prisma__communesClient<$Result.GetResult<Prisma.$communesPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Communes.
     * @param {communesDeleteManyArgs} args - Arguments to filter Communes to delete.
     * @example
     * // Delete a few Communes
     * const { count } = await prisma.communes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends communesDeleteManyArgs>(args?: SelectSubset<T, communesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Communes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {communesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Communes
     * const communes = await prisma.communes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends communesUpdateManyArgs>(args: SelectSubset<T, communesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Communes and returns the data updated in the database.
     * @param {communesUpdateManyAndReturnArgs} args - Arguments to update many Communes.
     * @example
     * // Update many Communes
     * const communes = await prisma.communes.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Communes and only return the `pk`
     * const communesWithPkOnly = await prisma.communes.updateManyAndReturn({
     *   select: { pk: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends communesUpdateManyAndReturnArgs>(args: SelectSubset<T, communesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$communesPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Communes.
     * @param {communesUpsertArgs} args - Arguments to update or create a Communes.
     * @example
     * // Update or create a Communes
     * const communes = await prisma.communes.upsert({
     *   create: {
     *     // ... data to create a Communes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Communes we want to update
     *   }
     * })
     */
    upsert<T extends communesUpsertArgs>(args: SelectSubset<T, communesUpsertArgs<ExtArgs>>): Prisma__communesClient<$Result.GetResult<Prisma.$communesPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Communes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {communesCountArgs} args - Arguments to filter Communes to count.
     * @example
     * // Count the number of Communes
     * const count = await prisma.communes.count({
     *   where: {
     *     // ... the filter for the Communes we want to count
     *   }
     * })
    **/
    count<T extends communesCountArgs>(
      args?: Subset<T, communesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommunesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Communes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommunesAggregateArgs>(args: Subset<T, CommunesAggregateArgs>): Prisma.PrismaPromise<GetCommunesAggregateType<T>>

    /**
     * Group by Communes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {communesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends communesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: communesGroupByArgs['orderBy'] }
        : { orderBy?: communesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, communesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommunesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the communes model
   */
  readonly fields: communesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for communes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__communesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the communes model
   */ 
  interface communesFieldRefs {
    readonly pk: FieldRef<"communes", 'Int'>
    readonly code_commune: FieldRef<"communes", 'String'>
    readonly libelle_commune: FieldRef<"communes", 'String'>
    readonly epci: FieldRef<"communes", 'String'>
    readonly libelle_epci: FieldRef<"communes", 'String'>
    readonly libgeo: FieldRef<"communes", 'String'>
    readonly coordinates: FieldRef<"communes", 'String'>
    readonly densite_bati: FieldRef<"communes", 'Float'>
    readonly precarite_logement: FieldRef<"communes", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * communes findUnique
   */
  export type communesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the communes
     */
    select?: communesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the communes
     */
    omit?: communesOmit<ExtArgs> | null
    /**
     * Filter, which communes to fetch.
     */
    where: communesWhereUniqueInput
  }

  /**
   * communes findUniqueOrThrow
   */
  export type communesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the communes
     */
    select?: communesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the communes
     */
    omit?: communesOmit<ExtArgs> | null
    /**
     * Filter, which communes to fetch.
     */
    where: communesWhereUniqueInput
  }

  /**
   * communes findFirst
   */
  export type communesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the communes
     */
    select?: communesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the communes
     */
    omit?: communesOmit<ExtArgs> | null
    /**
     * Filter, which communes to fetch.
     */
    where?: communesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of communes to fetch.
     */
    orderBy?: communesOrderByWithRelationInput | communesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for communes.
     */
    cursor?: communesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` communes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` communes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of communes.
     */
    distinct?: CommunesScalarFieldEnum | CommunesScalarFieldEnum[]
  }

  /**
   * communes findFirstOrThrow
   */
  export type communesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the communes
     */
    select?: communesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the communes
     */
    omit?: communesOmit<ExtArgs> | null
    /**
     * Filter, which communes to fetch.
     */
    where?: communesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of communes to fetch.
     */
    orderBy?: communesOrderByWithRelationInput | communesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for communes.
     */
    cursor?: communesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` communes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` communes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of communes.
     */
    distinct?: CommunesScalarFieldEnum | CommunesScalarFieldEnum[]
  }

  /**
   * communes findMany
   */
  export type communesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the communes
     */
    select?: communesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the communes
     */
    omit?: communesOmit<ExtArgs> | null
    /**
     * Filter, which communes to fetch.
     */
    where?: communesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of communes to fetch.
     */
    orderBy?: communesOrderByWithRelationInput | communesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing communes.
     */
    cursor?: communesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` communes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` communes.
     */
    skip?: number
    distinct?: CommunesScalarFieldEnum | CommunesScalarFieldEnum[]
  }

  /**
   * communes create
   */
  export type communesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the communes
     */
    select?: communesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the communes
     */
    omit?: communesOmit<ExtArgs> | null
    /**
     * The data needed to create a communes.
     */
    data?: XOR<communesCreateInput, communesUncheckedCreateInput>
  }

  /**
   * communes createMany
   */
  export type communesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many communes.
     */
    data: communesCreateManyInput | communesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * communes createManyAndReturn
   */
  export type communesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the communes
     */
    select?: communesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the communes
     */
    omit?: communesOmit<ExtArgs> | null
    /**
     * The data used to create many communes.
     */
    data: communesCreateManyInput | communesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * communes update
   */
  export type communesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the communes
     */
    select?: communesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the communes
     */
    omit?: communesOmit<ExtArgs> | null
    /**
     * The data needed to update a communes.
     */
    data: XOR<communesUpdateInput, communesUncheckedUpdateInput>
    /**
     * Choose, which communes to update.
     */
    where: communesWhereUniqueInput
  }

  /**
   * communes updateMany
   */
  export type communesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update communes.
     */
    data: XOR<communesUpdateManyMutationInput, communesUncheckedUpdateManyInput>
    /**
     * Filter which communes to update
     */
    where?: communesWhereInput
    /**
     * Limit how many communes to update.
     */
    limit?: number
  }

  /**
   * communes updateManyAndReturn
   */
  export type communesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the communes
     */
    select?: communesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the communes
     */
    omit?: communesOmit<ExtArgs> | null
    /**
     * The data used to update communes.
     */
    data: XOR<communesUpdateManyMutationInput, communesUncheckedUpdateManyInput>
    /**
     * Filter which communes to update
     */
    where?: communesWhereInput
    /**
     * Limit how many communes to update.
     */
    limit?: number
  }

  /**
   * communes upsert
   */
  export type communesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the communes
     */
    select?: communesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the communes
     */
    omit?: communesOmit<ExtArgs> | null
    /**
     * The filter to search for the communes to update in case it exists.
     */
    where: communesWhereUniqueInput
    /**
     * In case the communes found by the `where` argument doesn't exist, create a new communes with this data.
     */
    create: XOR<communesCreateInput, communesUncheckedCreateInput>
    /**
     * In case the communes was found with the provided `where` argument, update it with this data.
     */
    update: XOR<communesUpdateInput, communesUncheckedUpdateInput>
  }

  /**
   * communes delete
   */
  export type communesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the communes
     */
    select?: communesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the communes
     */
    omit?: communesOmit<ExtArgs> | null
    /**
     * Filter which communes to delete.
     */
    where: communesWhereUniqueInput
  }

  /**
   * communes deleteMany
   */
  export type communesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which communes to delete
     */
    where?: communesWhereInput
    /**
     * Limit how many communes to delete.
     */
    limit?: number
  }

  /**
   * communes without action
   */
  export type communesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the communes
     */
    select?: communesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the communes
     */
    omit?: communesOmit<ExtArgs> | null
  }


  /**
   * Model patch4c
   */

  export type AggregatePatch4c = {
    _count: Patch4cCountAggregateOutputType | null
    _avg: Patch4cAvgAggregateOutputType | null
    _sum: Patch4cSumAggregateOutputType | null
    _min: Patch4cMinAggregateOutputType | null
    _max: Patch4cMaxAggregateOutputType | null
  }

  export type Patch4cAvgAggregateOutputType = {
    index: number | null
    niveaux_marins: number | null
    feux_foret: number | null
    secheresse_sols: number | null
    fortes_precipitations: number | null
    fortes_chaleurs: number | null
  }

  export type Patch4cSumAggregateOutputType = {
    index: bigint | null
    niveaux_marins: number | null
    feux_foret: number | null
    secheresse_sols: number | null
    fortes_precipitations: number | null
    fortes_chaleurs: number | null
  }

  export type Patch4cMinAggregateOutputType = {
    index: bigint | null
    code_geographique: string | null
    niveaux_marins: number | null
    feux_foret: number | null
    secheresse_sols: number | null
    fortes_precipitations: number | null
    fortes_chaleurs: number | null
  }

  export type Patch4cMaxAggregateOutputType = {
    index: bigint | null
    code_geographique: string | null
    niveaux_marins: number | null
    feux_foret: number | null
    secheresse_sols: number | null
    fortes_precipitations: number | null
    fortes_chaleurs: number | null
  }

  export type Patch4cCountAggregateOutputType = {
    index: number
    code_geographique: number
    niveaux_marins: number
    feux_foret: number
    secheresse_sols: number
    fortes_precipitations: number
    fortes_chaleurs: number
    _all: number
  }


  export type Patch4cAvgAggregateInputType = {
    index?: true
    niveaux_marins?: true
    feux_foret?: true
    secheresse_sols?: true
    fortes_precipitations?: true
    fortes_chaleurs?: true
  }

  export type Patch4cSumAggregateInputType = {
    index?: true
    niveaux_marins?: true
    feux_foret?: true
    secheresse_sols?: true
    fortes_precipitations?: true
    fortes_chaleurs?: true
  }

  export type Patch4cMinAggregateInputType = {
    index?: true
    code_geographique?: true
    niveaux_marins?: true
    feux_foret?: true
    secheresse_sols?: true
    fortes_precipitations?: true
    fortes_chaleurs?: true
  }

  export type Patch4cMaxAggregateInputType = {
    index?: true
    code_geographique?: true
    niveaux_marins?: true
    feux_foret?: true
    secheresse_sols?: true
    fortes_precipitations?: true
    fortes_chaleurs?: true
  }

  export type Patch4cCountAggregateInputType = {
    index?: true
    code_geographique?: true
    niveaux_marins?: true
    feux_foret?: true
    secheresse_sols?: true
    fortes_precipitations?: true
    fortes_chaleurs?: true
    _all?: true
  }

  export type Patch4cAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which patch4c to aggregate.
     */
    where?: patch4cWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of patch4cs to fetch.
     */
    orderBy?: patch4cOrderByWithRelationInput | patch4cOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: patch4cWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` patch4cs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` patch4cs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned patch4cs
    **/
    _count?: true | Patch4cCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Patch4cAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Patch4cSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Patch4cMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Patch4cMaxAggregateInputType
  }

  export type GetPatch4cAggregateType<T extends Patch4cAggregateArgs> = {
        [P in keyof T & keyof AggregatePatch4c]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePatch4c[P]>
      : GetScalarType<T[P], AggregatePatch4c[P]>
  }




  export type patch4cGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: patch4cWhereInput
    orderBy?: patch4cOrderByWithAggregationInput | patch4cOrderByWithAggregationInput[]
    by: Patch4cScalarFieldEnum[] | Patch4cScalarFieldEnum
    having?: patch4cScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Patch4cCountAggregateInputType | true
    _avg?: Patch4cAvgAggregateInputType
    _sum?: Patch4cSumAggregateInputType
    _min?: Patch4cMinAggregateInputType
    _max?: Patch4cMaxAggregateInputType
  }

  export type Patch4cGroupByOutputType = {
    index: bigint
    code_geographique: string
    niveaux_marins: number | null
    feux_foret: number
    secheresse_sols: number
    fortes_precipitations: number
    fortes_chaleurs: number
    _count: Patch4cCountAggregateOutputType | null
    _avg: Patch4cAvgAggregateOutputType | null
    _sum: Patch4cSumAggregateOutputType | null
    _min: Patch4cMinAggregateOutputType | null
    _max: Patch4cMaxAggregateOutputType | null
  }

  type GetPatch4cGroupByPayload<T extends patch4cGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Patch4cGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Patch4cGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Patch4cGroupByOutputType[P]>
            : GetScalarType<T[P], Patch4cGroupByOutputType[P]>
        }
      >
    >


  export type patch4cSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    index?: boolean
    code_geographique?: boolean
    niveaux_marins?: boolean
    feux_foret?: boolean
    secheresse_sols?: boolean
    fortes_precipitations?: boolean
    fortes_chaleurs?: boolean
  }, ExtArgs["result"]["patch4c"]>

  export type patch4cSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    index?: boolean
    code_geographique?: boolean
    niveaux_marins?: boolean
    feux_foret?: boolean
    secheresse_sols?: boolean
    fortes_precipitations?: boolean
    fortes_chaleurs?: boolean
  }, ExtArgs["result"]["patch4c"]>

  export type patch4cSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    index?: boolean
    code_geographique?: boolean
    niveaux_marins?: boolean
    feux_foret?: boolean
    secheresse_sols?: boolean
    fortes_precipitations?: boolean
    fortes_chaleurs?: boolean
  }, ExtArgs["result"]["patch4c"]>

  export type patch4cSelectScalar = {
    index?: boolean
    code_geographique?: boolean
    niveaux_marins?: boolean
    feux_foret?: boolean
    secheresse_sols?: boolean
    fortes_precipitations?: boolean
    fortes_chaleurs?: boolean
  }

  export type patch4cOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"index" | "code_geographique" | "niveaux_marins" | "feux_foret" | "secheresse_sols" | "fortes_precipitations" | "fortes_chaleurs", ExtArgs["result"]["patch4c"]>

  export type $patch4cPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "patch4c"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      index: bigint
      code_geographique: string
      niveaux_marins: number | null
      feux_foret: number
      secheresse_sols: number
      fortes_precipitations: number
      fortes_chaleurs: number
    }, ExtArgs["result"]["patch4c"]>
    composites: {}
  }

  type patch4cGetPayload<S extends boolean | null | undefined | patch4cDefaultArgs> = $Result.GetResult<Prisma.$patch4cPayload, S>

  type patch4cCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<patch4cFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Patch4cCountAggregateInputType | true
    }

  export interface patch4cDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['patch4c'], meta: { name: 'patch4c' } }
    /**
     * Find zero or one Patch4c that matches the filter.
     * @param {patch4cFindUniqueArgs} args - Arguments to find a Patch4c
     * @example
     * // Get one Patch4c
     * const patch4c = await prisma.patch4c.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends patch4cFindUniqueArgs>(args: SelectSubset<T, patch4cFindUniqueArgs<ExtArgs>>): Prisma__patch4cClient<$Result.GetResult<Prisma.$patch4cPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Patch4c that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {patch4cFindUniqueOrThrowArgs} args - Arguments to find a Patch4c
     * @example
     * // Get one Patch4c
     * const patch4c = await prisma.patch4c.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends patch4cFindUniqueOrThrowArgs>(args: SelectSubset<T, patch4cFindUniqueOrThrowArgs<ExtArgs>>): Prisma__patch4cClient<$Result.GetResult<Prisma.$patch4cPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Patch4c that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {patch4cFindFirstArgs} args - Arguments to find a Patch4c
     * @example
     * // Get one Patch4c
     * const patch4c = await prisma.patch4c.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends patch4cFindFirstArgs>(args?: SelectSubset<T, patch4cFindFirstArgs<ExtArgs>>): Prisma__patch4cClient<$Result.GetResult<Prisma.$patch4cPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Patch4c that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {patch4cFindFirstOrThrowArgs} args - Arguments to find a Patch4c
     * @example
     * // Get one Patch4c
     * const patch4c = await prisma.patch4c.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends patch4cFindFirstOrThrowArgs>(args?: SelectSubset<T, patch4cFindFirstOrThrowArgs<ExtArgs>>): Prisma__patch4cClient<$Result.GetResult<Prisma.$patch4cPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Patch4cs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {patch4cFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Patch4cs
     * const patch4cs = await prisma.patch4c.findMany()
     * 
     * // Get first 10 Patch4cs
     * const patch4cs = await prisma.patch4c.findMany({ take: 10 })
     * 
     * // Only select the `index`
     * const patch4cWithIndexOnly = await prisma.patch4c.findMany({ select: { index: true } })
     * 
     */
    findMany<T extends patch4cFindManyArgs>(args?: SelectSubset<T, patch4cFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$patch4cPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Patch4c.
     * @param {patch4cCreateArgs} args - Arguments to create a Patch4c.
     * @example
     * // Create one Patch4c
     * const Patch4c = await prisma.patch4c.create({
     *   data: {
     *     // ... data to create a Patch4c
     *   }
     * })
     * 
     */
    create<T extends patch4cCreateArgs>(args: SelectSubset<T, patch4cCreateArgs<ExtArgs>>): Prisma__patch4cClient<$Result.GetResult<Prisma.$patch4cPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Patch4cs.
     * @param {patch4cCreateManyArgs} args - Arguments to create many Patch4cs.
     * @example
     * // Create many Patch4cs
     * const patch4c = await prisma.patch4c.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends patch4cCreateManyArgs>(args?: SelectSubset<T, patch4cCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Patch4cs and returns the data saved in the database.
     * @param {patch4cCreateManyAndReturnArgs} args - Arguments to create many Patch4cs.
     * @example
     * // Create many Patch4cs
     * const patch4c = await prisma.patch4c.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Patch4cs and only return the `index`
     * const patch4cWithIndexOnly = await prisma.patch4c.createManyAndReturn({
     *   select: { index: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends patch4cCreateManyAndReturnArgs>(args?: SelectSubset<T, patch4cCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$patch4cPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Patch4c.
     * @param {patch4cDeleteArgs} args - Arguments to delete one Patch4c.
     * @example
     * // Delete one Patch4c
     * const Patch4c = await prisma.patch4c.delete({
     *   where: {
     *     // ... filter to delete one Patch4c
     *   }
     * })
     * 
     */
    delete<T extends patch4cDeleteArgs>(args: SelectSubset<T, patch4cDeleteArgs<ExtArgs>>): Prisma__patch4cClient<$Result.GetResult<Prisma.$patch4cPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Patch4c.
     * @param {patch4cUpdateArgs} args - Arguments to update one Patch4c.
     * @example
     * // Update one Patch4c
     * const patch4c = await prisma.patch4c.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends patch4cUpdateArgs>(args: SelectSubset<T, patch4cUpdateArgs<ExtArgs>>): Prisma__patch4cClient<$Result.GetResult<Prisma.$patch4cPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Patch4cs.
     * @param {patch4cDeleteManyArgs} args - Arguments to filter Patch4cs to delete.
     * @example
     * // Delete a few Patch4cs
     * const { count } = await prisma.patch4c.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends patch4cDeleteManyArgs>(args?: SelectSubset<T, patch4cDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Patch4cs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {patch4cUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Patch4cs
     * const patch4c = await prisma.patch4c.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends patch4cUpdateManyArgs>(args: SelectSubset<T, patch4cUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Patch4cs and returns the data updated in the database.
     * @param {patch4cUpdateManyAndReturnArgs} args - Arguments to update many Patch4cs.
     * @example
     * // Update many Patch4cs
     * const patch4c = await prisma.patch4c.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Patch4cs and only return the `index`
     * const patch4cWithIndexOnly = await prisma.patch4c.updateManyAndReturn({
     *   select: { index: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends patch4cUpdateManyAndReturnArgs>(args: SelectSubset<T, patch4cUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$patch4cPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Patch4c.
     * @param {patch4cUpsertArgs} args - Arguments to update or create a Patch4c.
     * @example
     * // Update or create a Patch4c
     * const patch4c = await prisma.patch4c.upsert({
     *   create: {
     *     // ... data to create a Patch4c
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Patch4c we want to update
     *   }
     * })
     */
    upsert<T extends patch4cUpsertArgs>(args: SelectSubset<T, patch4cUpsertArgs<ExtArgs>>): Prisma__patch4cClient<$Result.GetResult<Prisma.$patch4cPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Patch4cs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {patch4cCountArgs} args - Arguments to filter Patch4cs to count.
     * @example
     * // Count the number of Patch4cs
     * const count = await prisma.patch4c.count({
     *   where: {
     *     // ... the filter for the Patch4cs we want to count
     *   }
     * })
    **/
    count<T extends patch4cCountArgs>(
      args?: Subset<T, patch4cCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Patch4cCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Patch4c.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Patch4cAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Patch4cAggregateArgs>(args: Subset<T, Patch4cAggregateArgs>): Prisma.PrismaPromise<GetPatch4cAggregateType<T>>

    /**
     * Group by Patch4c.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {patch4cGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends patch4cGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: patch4cGroupByArgs['orderBy'] }
        : { orderBy?: patch4cGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, patch4cGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatch4cGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the patch4c model
   */
  readonly fields: patch4cFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for patch4c.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__patch4cClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the patch4c model
   */ 
  interface patch4cFieldRefs {
    readonly index: FieldRef<"patch4c", 'BigInt'>
    readonly code_geographique: FieldRef<"patch4c", 'String'>
    readonly niveaux_marins: FieldRef<"patch4c", 'Float'>
    readonly feux_foret: FieldRef<"patch4c", 'Float'>
    readonly secheresse_sols: FieldRef<"patch4c", 'Float'>
    readonly fortes_precipitations: FieldRef<"patch4c", 'Float'>
    readonly fortes_chaleurs: FieldRef<"patch4c", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * patch4c findUnique
   */
  export type patch4cFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the patch4c
     */
    select?: patch4cSelect<ExtArgs> | null
    /**
     * Omit specific fields from the patch4c
     */
    omit?: patch4cOmit<ExtArgs> | null
    /**
     * Filter, which patch4c to fetch.
     */
    where: patch4cWhereUniqueInput
  }

  /**
   * patch4c findUniqueOrThrow
   */
  export type patch4cFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the patch4c
     */
    select?: patch4cSelect<ExtArgs> | null
    /**
     * Omit specific fields from the patch4c
     */
    omit?: patch4cOmit<ExtArgs> | null
    /**
     * Filter, which patch4c to fetch.
     */
    where: patch4cWhereUniqueInput
  }

  /**
   * patch4c findFirst
   */
  export type patch4cFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the patch4c
     */
    select?: patch4cSelect<ExtArgs> | null
    /**
     * Omit specific fields from the patch4c
     */
    omit?: patch4cOmit<ExtArgs> | null
    /**
     * Filter, which patch4c to fetch.
     */
    where?: patch4cWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of patch4cs to fetch.
     */
    orderBy?: patch4cOrderByWithRelationInput | patch4cOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for patch4cs.
     */
    cursor?: patch4cWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` patch4cs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` patch4cs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of patch4cs.
     */
    distinct?: Patch4cScalarFieldEnum | Patch4cScalarFieldEnum[]
  }

  /**
   * patch4c findFirstOrThrow
   */
  export type patch4cFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the patch4c
     */
    select?: patch4cSelect<ExtArgs> | null
    /**
     * Omit specific fields from the patch4c
     */
    omit?: patch4cOmit<ExtArgs> | null
    /**
     * Filter, which patch4c to fetch.
     */
    where?: patch4cWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of patch4cs to fetch.
     */
    orderBy?: patch4cOrderByWithRelationInput | patch4cOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for patch4cs.
     */
    cursor?: patch4cWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` patch4cs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` patch4cs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of patch4cs.
     */
    distinct?: Patch4cScalarFieldEnum | Patch4cScalarFieldEnum[]
  }

  /**
   * patch4c findMany
   */
  export type patch4cFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the patch4c
     */
    select?: patch4cSelect<ExtArgs> | null
    /**
     * Omit specific fields from the patch4c
     */
    omit?: patch4cOmit<ExtArgs> | null
    /**
     * Filter, which patch4cs to fetch.
     */
    where?: patch4cWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of patch4cs to fetch.
     */
    orderBy?: patch4cOrderByWithRelationInput | patch4cOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing patch4cs.
     */
    cursor?: patch4cWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` patch4cs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` patch4cs.
     */
    skip?: number
    distinct?: Patch4cScalarFieldEnum | Patch4cScalarFieldEnum[]
  }

  /**
   * patch4c create
   */
  export type patch4cCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the patch4c
     */
    select?: patch4cSelect<ExtArgs> | null
    /**
     * Omit specific fields from the patch4c
     */
    omit?: patch4cOmit<ExtArgs> | null
    /**
     * The data needed to create a patch4c.
     */
    data: XOR<patch4cCreateInput, patch4cUncheckedCreateInput>
  }

  /**
   * patch4c createMany
   */
  export type patch4cCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many patch4cs.
     */
    data: patch4cCreateManyInput | patch4cCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * patch4c createManyAndReturn
   */
  export type patch4cCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the patch4c
     */
    select?: patch4cSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the patch4c
     */
    omit?: patch4cOmit<ExtArgs> | null
    /**
     * The data used to create many patch4cs.
     */
    data: patch4cCreateManyInput | patch4cCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * patch4c update
   */
  export type patch4cUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the patch4c
     */
    select?: patch4cSelect<ExtArgs> | null
    /**
     * Omit specific fields from the patch4c
     */
    omit?: patch4cOmit<ExtArgs> | null
    /**
     * The data needed to update a patch4c.
     */
    data: XOR<patch4cUpdateInput, patch4cUncheckedUpdateInput>
    /**
     * Choose, which patch4c to update.
     */
    where: patch4cWhereUniqueInput
  }

  /**
   * patch4c updateMany
   */
  export type patch4cUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update patch4cs.
     */
    data: XOR<patch4cUpdateManyMutationInput, patch4cUncheckedUpdateManyInput>
    /**
     * Filter which patch4cs to update
     */
    where?: patch4cWhereInput
    /**
     * Limit how many patch4cs to update.
     */
    limit?: number
  }

  /**
   * patch4c updateManyAndReturn
   */
  export type patch4cUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the patch4c
     */
    select?: patch4cSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the patch4c
     */
    omit?: patch4cOmit<ExtArgs> | null
    /**
     * The data used to update patch4cs.
     */
    data: XOR<patch4cUpdateManyMutationInput, patch4cUncheckedUpdateManyInput>
    /**
     * Filter which patch4cs to update
     */
    where?: patch4cWhereInput
    /**
     * Limit how many patch4cs to update.
     */
    limit?: number
  }

  /**
   * patch4c upsert
   */
  export type patch4cUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the patch4c
     */
    select?: patch4cSelect<ExtArgs> | null
    /**
     * Omit specific fields from the patch4c
     */
    omit?: patch4cOmit<ExtArgs> | null
    /**
     * The filter to search for the patch4c to update in case it exists.
     */
    where: patch4cWhereUniqueInput
    /**
     * In case the patch4c found by the `where` argument doesn't exist, create a new patch4c with this data.
     */
    create: XOR<patch4cCreateInput, patch4cUncheckedCreateInput>
    /**
     * In case the patch4c was found with the provided `where` argument, update it with this data.
     */
    update: XOR<patch4cUpdateInput, patch4cUncheckedUpdateInput>
  }

  /**
   * patch4c delete
   */
  export type patch4cDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the patch4c
     */
    select?: patch4cSelect<ExtArgs> | null
    /**
     * Omit specific fields from the patch4c
     */
    omit?: patch4cOmit<ExtArgs> | null
    /**
     * Filter which patch4c to delete.
     */
    where: patch4cWhereUniqueInput
  }

  /**
   * patch4c deleteMany
   */
  export type patch4cDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which patch4cs to delete
     */
    where?: patch4cWhereInput
    /**
     * Limit how many patch4cs to delete.
     */
    limit?: number
  }

  /**
   * patch4c without action
   */
  export type patch4cDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the patch4c
     */
    select?: patch4cSelect<ExtArgs> | null
    /**
     * Omit specific fields from the patch4c
     */
    omit?: patch4cOmit<ExtArgs> | null
  }


  /**
   * Model agriculture
   */

  export type AggregateAgriculture = {
    _count: AgricultureCountAggregateOutputType | null
    _avg: AgricultureAvgAggregateOutputType | null
    _sum: AgricultureSumAggregateOutputType | null
    _min: AgricultureMinAggregateOutputType | null
    _max: AgricultureMaxAggregateOutputType | null
  }

  export type AgricultureAvgAggregateOutputType = {
    index: number | null
    REG: number | null
    part_irr_SAU_2020: number | null
    part_over_55: number | null
  }

  export type AgricultureSumAggregateOutputType = {
    index: bigint | null
    REG: number | null
    part_irr_SAU_2020: number | null
    part_over_55: number | null
  }

  export type AgricultureMinAggregateOutputType = {
    index: bigint | null
    CODGEO: string | null
    LIBGEO: string | null
    EPCI: string | null
    LIBEPCI: string | null
    DEP: string | null
    REG: number | null
    part_irr_SAU_2020: number | null
    part_over_55: number | null
  }

  export type AgricultureMaxAggregateOutputType = {
    index: bigint | null
    CODGEO: string | null
    LIBGEO: string | null
    EPCI: string | null
    LIBEPCI: string | null
    DEP: string | null
    REG: number | null
    part_irr_SAU_2020: number | null
    part_over_55: number | null
  }

  export type AgricultureCountAggregateOutputType = {
    index: number
    CODGEO: number
    LIBGEO: number
    EPCI: number
    LIBEPCI: number
    DEP: number
    REG: number
    part_irr_SAU_2020: number
    part_over_55: number
    _all: number
  }


  export type AgricultureAvgAggregateInputType = {
    index?: true
    REG?: true
    part_irr_SAU_2020?: true
    part_over_55?: true
  }

  export type AgricultureSumAggregateInputType = {
    index?: true
    REG?: true
    part_irr_SAU_2020?: true
    part_over_55?: true
  }

  export type AgricultureMinAggregateInputType = {
    index?: true
    CODGEO?: true
    LIBGEO?: true
    EPCI?: true
    LIBEPCI?: true
    DEP?: true
    REG?: true
    part_irr_SAU_2020?: true
    part_over_55?: true
  }

  export type AgricultureMaxAggregateInputType = {
    index?: true
    CODGEO?: true
    LIBGEO?: true
    EPCI?: true
    LIBEPCI?: true
    DEP?: true
    REG?: true
    part_irr_SAU_2020?: true
    part_over_55?: true
  }

  export type AgricultureCountAggregateInputType = {
    index?: true
    CODGEO?: true
    LIBGEO?: true
    EPCI?: true
    LIBEPCI?: true
    DEP?: true
    REG?: true
    part_irr_SAU_2020?: true
    part_over_55?: true
    _all?: true
  }

  export type AgricultureAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which agriculture to aggregate.
     */
    where?: agricultureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of agricultures to fetch.
     */
    orderBy?: agricultureOrderByWithRelationInput | agricultureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: agricultureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` agricultures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` agricultures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned agricultures
    **/
    _count?: true | AgricultureCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AgricultureAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AgricultureSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AgricultureMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AgricultureMaxAggregateInputType
  }

  export type GetAgricultureAggregateType<T extends AgricultureAggregateArgs> = {
        [P in keyof T & keyof AggregateAgriculture]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAgriculture[P]>
      : GetScalarType<T[P], AggregateAgriculture[P]>
  }




  export type agricultureGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: agricultureWhereInput
    orderBy?: agricultureOrderByWithAggregationInput | agricultureOrderByWithAggregationInput[]
    by: AgricultureScalarFieldEnum[] | AgricultureScalarFieldEnum
    having?: agricultureScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AgricultureCountAggregateInputType | true
    _avg?: AgricultureAvgAggregateInputType
    _sum?: AgricultureSumAggregateInputType
    _min?: AgricultureMinAggregateInputType
    _max?: AgricultureMaxAggregateInputType
  }

  export type AgricultureGroupByOutputType = {
    index: bigint
    CODGEO: string
    LIBGEO: string
    EPCI: string
    LIBEPCI: string
    DEP: string
    REG: number
    part_irr_SAU_2020: number | null
    part_over_55: number | null
    _count: AgricultureCountAggregateOutputType | null
    _avg: AgricultureAvgAggregateOutputType | null
    _sum: AgricultureSumAggregateOutputType | null
    _min: AgricultureMinAggregateOutputType | null
    _max: AgricultureMaxAggregateOutputType | null
  }

  type GetAgricultureGroupByPayload<T extends agricultureGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AgricultureGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AgricultureGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AgricultureGroupByOutputType[P]>
            : GetScalarType<T[P], AgricultureGroupByOutputType[P]>
        }
      >
    >


  export type agricultureSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    index?: boolean
    CODGEO?: boolean
    LIBGEO?: boolean
    EPCI?: boolean
    LIBEPCI?: boolean
    DEP?: boolean
    REG?: boolean
    part_irr_SAU_2020?: boolean
    part_over_55?: boolean
  }, ExtArgs["result"]["agriculture"]>

  export type agricultureSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    index?: boolean
    CODGEO?: boolean
    LIBGEO?: boolean
    EPCI?: boolean
    LIBEPCI?: boolean
    DEP?: boolean
    REG?: boolean
    part_irr_SAU_2020?: boolean
    part_over_55?: boolean
  }, ExtArgs["result"]["agriculture"]>

  export type agricultureSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    index?: boolean
    CODGEO?: boolean
    LIBGEO?: boolean
    EPCI?: boolean
    LIBEPCI?: boolean
    DEP?: boolean
    REG?: boolean
    part_irr_SAU_2020?: boolean
    part_over_55?: boolean
  }, ExtArgs["result"]["agriculture"]>

  export type agricultureSelectScalar = {
    index?: boolean
    CODGEO?: boolean
    LIBGEO?: boolean
    EPCI?: boolean
    LIBEPCI?: boolean
    DEP?: boolean
    REG?: boolean
    part_irr_SAU_2020?: boolean
    part_over_55?: boolean
  }

  export type agricultureOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"index" | "CODGEO" | "LIBGEO" | "EPCI" | "LIBEPCI" | "DEP" | "REG" | "part_irr_SAU_2020" | "part_over_55", ExtArgs["result"]["agriculture"]>

  export type $agriculturePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "agriculture"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      index: bigint
      CODGEO: string
      LIBGEO: string
      EPCI: string
      LIBEPCI: string
      DEP: string
      REG: number
      part_irr_SAU_2020: number | null
      part_over_55: number | null
    }, ExtArgs["result"]["agriculture"]>
    composites: {}
  }

  type agricultureGetPayload<S extends boolean | null | undefined | agricultureDefaultArgs> = $Result.GetResult<Prisma.$agriculturePayload, S>

  type agricultureCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<agricultureFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AgricultureCountAggregateInputType | true
    }

  export interface agricultureDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['agriculture'], meta: { name: 'agriculture' } }
    /**
     * Find zero or one Agriculture that matches the filter.
     * @param {agricultureFindUniqueArgs} args - Arguments to find a Agriculture
     * @example
     * // Get one Agriculture
     * const agriculture = await prisma.agriculture.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends agricultureFindUniqueArgs>(args: SelectSubset<T, agricultureFindUniqueArgs<ExtArgs>>): Prisma__agricultureClient<$Result.GetResult<Prisma.$agriculturePayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Agriculture that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {agricultureFindUniqueOrThrowArgs} args - Arguments to find a Agriculture
     * @example
     * // Get one Agriculture
     * const agriculture = await prisma.agriculture.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends agricultureFindUniqueOrThrowArgs>(args: SelectSubset<T, agricultureFindUniqueOrThrowArgs<ExtArgs>>): Prisma__agricultureClient<$Result.GetResult<Prisma.$agriculturePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Agriculture that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {agricultureFindFirstArgs} args - Arguments to find a Agriculture
     * @example
     * // Get one Agriculture
     * const agriculture = await prisma.agriculture.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends agricultureFindFirstArgs>(args?: SelectSubset<T, agricultureFindFirstArgs<ExtArgs>>): Prisma__agricultureClient<$Result.GetResult<Prisma.$agriculturePayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Agriculture that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {agricultureFindFirstOrThrowArgs} args - Arguments to find a Agriculture
     * @example
     * // Get one Agriculture
     * const agriculture = await prisma.agriculture.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends agricultureFindFirstOrThrowArgs>(args?: SelectSubset<T, agricultureFindFirstOrThrowArgs<ExtArgs>>): Prisma__agricultureClient<$Result.GetResult<Prisma.$agriculturePayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Agricultures that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {agricultureFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Agricultures
     * const agricultures = await prisma.agriculture.findMany()
     * 
     * // Get first 10 Agricultures
     * const agricultures = await prisma.agriculture.findMany({ take: 10 })
     * 
     * // Only select the `index`
     * const agricultureWithIndexOnly = await prisma.agriculture.findMany({ select: { index: true } })
     * 
     */
    findMany<T extends agricultureFindManyArgs>(args?: SelectSubset<T, agricultureFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$agriculturePayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Agriculture.
     * @param {agricultureCreateArgs} args - Arguments to create a Agriculture.
     * @example
     * // Create one Agriculture
     * const Agriculture = await prisma.agriculture.create({
     *   data: {
     *     // ... data to create a Agriculture
     *   }
     * })
     * 
     */
    create<T extends agricultureCreateArgs>(args: SelectSubset<T, agricultureCreateArgs<ExtArgs>>): Prisma__agricultureClient<$Result.GetResult<Prisma.$agriculturePayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Agricultures.
     * @param {agricultureCreateManyArgs} args - Arguments to create many Agricultures.
     * @example
     * // Create many Agricultures
     * const agriculture = await prisma.agriculture.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends agricultureCreateManyArgs>(args?: SelectSubset<T, agricultureCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Agricultures and returns the data saved in the database.
     * @param {agricultureCreateManyAndReturnArgs} args - Arguments to create many Agricultures.
     * @example
     * // Create many Agricultures
     * const agriculture = await prisma.agriculture.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Agricultures and only return the `index`
     * const agricultureWithIndexOnly = await prisma.agriculture.createManyAndReturn({
     *   select: { index: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends agricultureCreateManyAndReturnArgs>(args?: SelectSubset<T, agricultureCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$agriculturePayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Agriculture.
     * @param {agricultureDeleteArgs} args - Arguments to delete one Agriculture.
     * @example
     * // Delete one Agriculture
     * const Agriculture = await prisma.agriculture.delete({
     *   where: {
     *     // ... filter to delete one Agriculture
     *   }
     * })
     * 
     */
    delete<T extends agricultureDeleteArgs>(args: SelectSubset<T, agricultureDeleteArgs<ExtArgs>>): Prisma__agricultureClient<$Result.GetResult<Prisma.$agriculturePayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Agriculture.
     * @param {agricultureUpdateArgs} args - Arguments to update one Agriculture.
     * @example
     * // Update one Agriculture
     * const agriculture = await prisma.agriculture.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends agricultureUpdateArgs>(args: SelectSubset<T, agricultureUpdateArgs<ExtArgs>>): Prisma__agricultureClient<$Result.GetResult<Prisma.$agriculturePayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Agricultures.
     * @param {agricultureDeleteManyArgs} args - Arguments to filter Agricultures to delete.
     * @example
     * // Delete a few Agricultures
     * const { count } = await prisma.agriculture.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends agricultureDeleteManyArgs>(args?: SelectSubset<T, agricultureDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Agricultures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {agricultureUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Agricultures
     * const agriculture = await prisma.agriculture.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends agricultureUpdateManyArgs>(args: SelectSubset<T, agricultureUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Agricultures and returns the data updated in the database.
     * @param {agricultureUpdateManyAndReturnArgs} args - Arguments to update many Agricultures.
     * @example
     * // Update many Agricultures
     * const agriculture = await prisma.agriculture.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Agricultures and only return the `index`
     * const agricultureWithIndexOnly = await prisma.agriculture.updateManyAndReturn({
     *   select: { index: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends agricultureUpdateManyAndReturnArgs>(args: SelectSubset<T, agricultureUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$agriculturePayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Agriculture.
     * @param {agricultureUpsertArgs} args - Arguments to update or create a Agriculture.
     * @example
     * // Update or create a Agriculture
     * const agriculture = await prisma.agriculture.upsert({
     *   create: {
     *     // ... data to create a Agriculture
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Agriculture we want to update
     *   }
     * })
     */
    upsert<T extends agricultureUpsertArgs>(args: SelectSubset<T, agricultureUpsertArgs<ExtArgs>>): Prisma__agricultureClient<$Result.GetResult<Prisma.$agriculturePayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Agricultures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {agricultureCountArgs} args - Arguments to filter Agricultures to count.
     * @example
     * // Count the number of Agricultures
     * const count = await prisma.agriculture.count({
     *   where: {
     *     // ... the filter for the Agricultures we want to count
     *   }
     * })
    **/
    count<T extends agricultureCountArgs>(
      args?: Subset<T, agricultureCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AgricultureCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Agriculture.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgricultureAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AgricultureAggregateArgs>(args: Subset<T, AgricultureAggregateArgs>): Prisma.PrismaPromise<GetAgricultureAggregateType<T>>

    /**
     * Group by Agriculture.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {agricultureGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends agricultureGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: agricultureGroupByArgs['orderBy'] }
        : { orderBy?: agricultureGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, agricultureGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAgricultureGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the agriculture model
   */
  readonly fields: agricultureFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for agriculture.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__agricultureClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the agriculture model
   */ 
  interface agricultureFieldRefs {
    readonly index: FieldRef<"agriculture", 'BigInt'>
    readonly CODGEO: FieldRef<"agriculture", 'String'>
    readonly LIBGEO: FieldRef<"agriculture", 'String'>
    readonly EPCI: FieldRef<"agriculture", 'String'>
    readonly LIBEPCI: FieldRef<"agriculture", 'String'>
    readonly DEP: FieldRef<"agriculture", 'String'>
    readonly REG: FieldRef<"agriculture", 'Float'>
    readonly part_irr_SAU_2020: FieldRef<"agriculture", 'Float'>
    readonly part_over_55: FieldRef<"agriculture", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * agriculture findUnique
   */
  export type agricultureFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the agriculture
     */
    select?: agricultureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the agriculture
     */
    omit?: agricultureOmit<ExtArgs> | null
    /**
     * Filter, which agriculture to fetch.
     */
    where: agricultureWhereUniqueInput
  }

  /**
   * agriculture findUniqueOrThrow
   */
  export type agricultureFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the agriculture
     */
    select?: agricultureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the agriculture
     */
    omit?: agricultureOmit<ExtArgs> | null
    /**
     * Filter, which agriculture to fetch.
     */
    where: agricultureWhereUniqueInput
  }

  /**
   * agriculture findFirst
   */
  export type agricultureFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the agriculture
     */
    select?: agricultureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the agriculture
     */
    omit?: agricultureOmit<ExtArgs> | null
    /**
     * Filter, which agriculture to fetch.
     */
    where?: agricultureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of agricultures to fetch.
     */
    orderBy?: agricultureOrderByWithRelationInput | agricultureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for agricultures.
     */
    cursor?: agricultureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` agricultures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` agricultures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of agricultures.
     */
    distinct?: AgricultureScalarFieldEnum | AgricultureScalarFieldEnum[]
  }

  /**
   * agriculture findFirstOrThrow
   */
  export type agricultureFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the agriculture
     */
    select?: agricultureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the agriculture
     */
    omit?: agricultureOmit<ExtArgs> | null
    /**
     * Filter, which agriculture to fetch.
     */
    where?: agricultureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of agricultures to fetch.
     */
    orderBy?: agricultureOrderByWithRelationInput | agricultureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for agricultures.
     */
    cursor?: agricultureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` agricultures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` agricultures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of agricultures.
     */
    distinct?: AgricultureScalarFieldEnum | AgricultureScalarFieldEnum[]
  }

  /**
   * agriculture findMany
   */
  export type agricultureFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the agriculture
     */
    select?: agricultureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the agriculture
     */
    omit?: agricultureOmit<ExtArgs> | null
    /**
     * Filter, which agricultures to fetch.
     */
    where?: agricultureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of agricultures to fetch.
     */
    orderBy?: agricultureOrderByWithRelationInput | agricultureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing agricultures.
     */
    cursor?: agricultureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` agricultures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` agricultures.
     */
    skip?: number
    distinct?: AgricultureScalarFieldEnum | AgricultureScalarFieldEnum[]
  }

  /**
   * agriculture create
   */
  export type agricultureCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the agriculture
     */
    select?: agricultureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the agriculture
     */
    omit?: agricultureOmit<ExtArgs> | null
    /**
     * The data needed to create a agriculture.
     */
    data: XOR<agricultureCreateInput, agricultureUncheckedCreateInput>
  }

  /**
   * agriculture createMany
   */
  export type agricultureCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many agricultures.
     */
    data: agricultureCreateManyInput | agricultureCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * agriculture createManyAndReturn
   */
  export type agricultureCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the agriculture
     */
    select?: agricultureSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the agriculture
     */
    omit?: agricultureOmit<ExtArgs> | null
    /**
     * The data used to create many agricultures.
     */
    data: agricultureCreateManyInput | agricultureCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * agriculture update
   */
  export type agricultureUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the agriculture
     */
    select?: agricultureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the agriculture
     */
    omit?: agricultureOmit<ExtArgs> | null
    /**
     * The data needed to update a agriculture.
     */
    data: XOR<agricultureUpdateInput, agricultureUncheckedUpdateInput>
    /**
     * Choose, which agriculture to update.
     */
    where: agricultureWhereUniqueInput
  }

  /**
   * agriculture updateMany
   */
  export type agricultureUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update agricultures.
     */
    data: XOR<agricultureUpdateManyMutationInput, agricultureUncheckedUpdateManyInput>
    /**
     * Filter which agricultures to update
     */
    where?: agricultureWhereInput
    /**
     * Limit how many agricultures to update.
     */
    limit?: number
  }

  /**
   * agriculture updateManyAndReturn
   */
  export type agricultureUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the agriculture
     */
    select?: agricultureSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the agriculture
     */
    omit?: agricultureOmit<ExtArgs> | null
    /**
     * The data used to update agricultures.
     */
    data: XOR<agricultureUpdateManyMutationInput, agricultureUncheckedUpdateManyInput>
    /**
     * Filter which agricultures to update
     */
    where?: agricultureWhereInput
    /**
     * Limit how many agricultures to update.
     */
    limit?: number
  }

  /**
   * agriculture upsert
   */
  export type agricultureUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the agriculture
     */
    select?: agricultureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the agriculture
     */
    omit?: agricultureOmit<ExtArgs> | null
    /**
     * The filter to search for the agriculture to update in case it exists.
     */
    where: agricultureWhereUniqueInput
    /**
     * In case the agriculture found by the `where` argument doesn't exist, create a new agriculture with this data.
     */
    create: XOR<agricultureCreateInput, agricultureUncheckedCreateInput>
    /**
     * In case the agriculture was found with the provided `where` argument, update it with this data.
     */
    update: XOR<agricultureUpdateInput, agricultureUncheckedUpdateInput>
  }

  /**
   * agriculture delete
   */
  export type agricultureDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the agriculture
     */
    select?: agricultureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the agriculture
     */
    omit?: agricultureOmit<ExtArgs> | null
    /**
     * Filter which agriculture to delete.
     */
    where: agricultureWhereUniqueInput
  }

  /**
   * agriculture deleteMany
   */
  export type agricultureDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which agricultures to delete
     */
    where?: agricultureWhereInput
    /**
     * Limit how many agricultures to delete.
     */
    limit?: number
  }

  /**
   * agriculture without action
   */
  export type agricultureDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the agriculture
     */
    select?: agricultureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the agriculture
     */
    omit?: agricultureOmit<ExtArgs> | null
  }


  /**
   * Model incendies_foret
   */

  export type AggregateIncendies_foret = {
    _count: Incendies_foretCountAggregateOutputType | null
    _avg: Incendies_foretAvgAggregateOutputType | null
    _sum: Incendies_foretSumAggregateOutputType | null
    _min: Incendies_foretMinAggregateOutputType | null
    _max: Incendies_foretMaxAggregateOutputType | null
  }

  export type Incendies_foretAvgAggregateOutputType = {
    index: number | null
    region: number | null
    annee: number | null
    surface_parcourue: number | null
    surface_foret: number | null
    surface_maquis_garrigues: number | null
    autres_surfaces_naturelles_hors_foret: number | null
    surfaces_agricoles: number | null
    surfaces_non_boisees: number | null
    surfaces_non_boisees_artificialisees: number | null
    surfaces_non_boisees_naturelles: number | null
    surface_autres_terres_boisees: number | null
    autres_surfaces: number | null
  }

  export type Incendies_foretSumAggregateOutputType = {
    index: bigint | null
    region: number | null
    annee: number | null
    surface_parcourue: number | null
    surface_foret: number | null
    surface_maquis_garrigues: number | null
    autres_surfaces_naturelles_hors_foret: number | null
    surfaces_agricoles: number | null
    surfaces_non_boisees: number | null
    surfaces_non_boisees_artificialisees: number | null
    surfaces_non_boisees_naturelles: number | null
    surface_autres_terres_boisees: number | null
    autres_surfaces: number | null
  }

  export type Incendies_foretMinAggregateOutputType = {
    index: bigint | null
    code_geographique: string | null
    libelle_geographique: string | null
    epci: string | null
    libelle_epci: string | null
    departement: string | null
    region: number | null
    nature: string | null
    annee: number | null
    surface_parcourue: number | null
    surface_foret: number | null
    surface_maquis_garrigues: number | null
    autres_surfaces_naturelles_hors_foret: number | null
    surfaces_agricoles: number | null
    surfaces_non_boisees: number | null
    surfaces_non_boisees_artificialisees: number | null
    surfaces_non_boisees_naturelles: number | null
    surface_autres_terres_boisees: number | null
    autres_surfaces: number | null
  }

  export type Incendies_foretMaxAggregateOutputType = {
    index: bigint | null
    code_geographique: string | null
    libelle_geographique: string | null
    epci: string | null
    libelle_epci: string | null
    departement: string | null
    region: number | null
    nature: string | null
    annee: number | null
    surface_parcourue: number | null
    surface_foret: number | null
    surface_maquis_garrigues: number | null
    autres_surfaces_naturelles_hors_foret: number | null
    surfaces_agricoles: number | null
    surfaces_non_boisees: number | null
    surfaces_non_boisees_artificialisees: number | null
    surfaces_non_boisees_naturelles: number | null
    surface_autres_terres_boisees: number | null
    autres_surfaces: number | null
  }

  export type Incendies_foretCountAggregateOutputType = {
    index: number
    code_geographique: number
    libelle_geographique: number
    epci: number
    libelle_epci: number
    departement: number
    region: number
    nature: number
    annee: number
    surface_parcourue: number
    surface_foret: number
    surface_maquis_garrigues: number
    autres_surfaces_naturelles_hors_foret: number
    surfaces_agricoles: number
    surfaces_non_boisees: number
    surfaces_non_boisees_artificialisees: number
    surfaces_non_boisees_naturelles: number
    surface_autres_terres_boisees: number
    autres_surfaces: number
    _all: number
  }


  export type Incendies_foretAvgAggregateInputType = {
    index?: true
    region?: true
    annee?: true
    surface_parcourue?: true
    surface_foret?: true
    surface_maquis_garrigues?: true
    autres_surfaces_naturelles_hors_foret?: true
    surfaces_agricoles?: true
    surfaces_non_boisees?: true
    surfaces_non_boisees_artificialisees?: true
    surfaces_non_boisees_naturelles?: true
    surface_autres_terres_boisees?: true
    autres_surfaces?: true
  }

  export type Incendies_foretSumAggregateInputType = {
    index?: true
    region?: true
    annee?: true
    surface_parcourue?: true
    surface_foret?: true
    surface_maquis_garrigues?: true
    autres_surfaces_naturelles_hors_foret?: true
    surfaces_agricoles?: true
    surfaces_non_boisees?: true
    surfaces_non_boisees_artificialisees?: true
    surfaces_non_boisees_naturelles?: true
    surface_autres_terres_boisees?: true
    autres_surfaces?: true
  }

  export type Incendies_foretMinAggregateInputType = {
    index?: true
    code_geographique?: true
    libelle_geographique?: true
    epci?: true
    libelle_epci?: true
    departement?: true
    region?: true
    nature?: true
    annee?: true
    surface_parcourue?: true
    surface_foret?: true
    surface_maquis_garrigues?: true
    autres_surfaces_naturelles_hors_foret?: true
    surfaces_agricoles?: true
    surfaces_non_boisees?: true
    surfaces_non_boisees_artificialisees?: true
    surfaces_non_boisees_naturelles?: true
    surface_autres_terres_boisees?: true
    autres_surfaces?: true
  }

  export type Incendies_foretMaxAggregateInputType = {
    index?: true
    code_geographique?: true
    libelle_geographique?: true
    epci?: true
    libelle_epci?: true
    departement?: true
    region?: true
    nature?: true
    annee?: true
    surface_parcourue?: true
    surface_foret?: true
    surface_maquis_garrigues?: true
    autres_surfaces_naturelles_hors_foret?: true
    surfaces_agricoles?: true
    surfaces_non_boisees?: true
    surfaces_non_boisees_artificialisees?: true
    surfaces_non_boisees_naturelles?: true
    surface_autres_terres_boisees?: true
    autres_surfaces?: true
  }

  export type Incendies_foretCountAggregateInputType = {
    index?: true
    code_geographique?: true
    libelle_geographique?: true
    epci?: true
    libelle_epci?: true
    departement?: true
    region?: true
    nature?: true
    annee?: true
    surface_parcourue?: true
    surface_foret?: true
    surface_maquis_garrigues?: true
    autres_surfaces_naturelles_hors_foret?: true
    surfaces_agricoles?: true
    surfaces_non_boisees?: true
    surfaces_non_boisees_artificialisees?: true
    surfaces_non_boisees_naturelles?: true
    surface_autres_terres_boisees?: true
    autres_surfaces?: true
    _all?: true
  }

  export type Incendies_foretAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which incendies_foret to aggregate.
     */
    where?: incendies_foretWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of incendies_forets to fetch.
     */
    orderBy?: incendies_foretOrderByWithRelationInput | incendies_foretOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: incendies_foretWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` incendies_forets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` incendies_forets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned incendies_forets
    **/
    _count?: true | Incendies_foretCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Incendies_foretAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Incendies_foretSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Incendies_foretMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Incendies_foretMaxAggregateInputType
  }

  export type GetIncendies_foretAggregateType<T extends Incendies_foretAggregateArgs> = {
        [P in keyof T & keyof AggregateIncendies_foret]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIncendies_foret[P]>
      : GetScalarType<T[P], AggregateIncendies_foret[P]>
  }




  export type incendies_foretGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: incendies_foretWhereInput
    orderBy?: incendies_foretOrderByWithAggregationInput | incendies_foretOrderByWithAggregationInput[]
    by: Incendies_foretScalarFieldEnum[] | Incendies_foretScalarFieldEnum
    having?: incendies_foretScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Incendies_foretCountAggregateInputType | true
    _avg?: Incendies_foretAvgAggregateInputType
    _sum?: Incendies_foretSumAggregateInputType
    _min?: Incendies_foretMinAggregateInputType
    _max?: Incendies_foretMaxAggregateInputType
  }

  export type Incendies_foretGroupByOutputType = {
    index: bigint
    code_geographique: string
    libelle_geographique: string
    epci: string
    libelle_epci: string
    departement: string
    region: number
    nature: string | null
    annee: number
    surface_parcourue: number
    surface_foret: number | null
    surface_maquis_garrigues: number | null
    autres_surfaces_naturelles_hors_foret: number | null
    surfaces_agricoles: number | null
    surfaces_non_boisees: number | null
    surfaces_non_boisees_artificialisees: number | null
    surfaces_non_boisees_naturelles: number | null
    surface_autres_terres_boisees: number | null
    autres_surfaces: number | null
    _count: Incendies_foretCountAggregateOutputType | null
    _avg: Incendies_foretAvgAggregateOutputType | null
    _sum: Incendies_foretSumAggregateOutputType | null
    _min: Incendies_foretMinAggregateOutputType | null
    _max: Incendies_foretMaxAggregateOutputType | null
  }

  type GetIncendies_foretGroupByPayload<T extends incendies_foretGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Incendies_foretGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Incendies_foretGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Incendies_foretGroupByOutputType[P]>
            : GetScalarType<T[P], Incendies_foretGroupByOutputType[P]>
        }
      >
    >


  export type incendies_foretSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    index?: boolean
    code_geographique?: boolean
    libelle_geographique?: boolean
    epci?: boolean
    libelle_epci?: boolean
    departement?: boolean
    region?: boolean
    nature?: boolean
    annee?: boolean
    surface_parcourue?: boolean
    surface_foret?: boolean
    surface_maquis_garrigues?: boolean
    autres_surfaces_naturelles_hors_foret?: boolean
    surfaces_agricoles?: boolean
    surfaces_non_boisees?: boolean
    surfaces_non_boisees_artificialisees?: boolean
    surfaces_non_boisees_naturelles?: boolean
    surface_autres_terres_boisees?: boolean
    autres_surfaces?: boolean
  }, ExtArgs["result"]["incendies_foret"]>

  export type incendies_foretSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    index?: boolean
    code_geographique?: boolean
    libelle_geographique?: boolean
    epci?: boolean
    libelle_epci?: boolean
    departement?: boolean
    region?: boolean
    nature?: boolean
    annee?: boolean
    surface_parcourue?: boolean
    surface_foret?: boolean
    surface_maquis_garrigues?: boolean
    autres_surfaces_naturelles_hors_foret?: boolean
    surfaces_agricoles?: boolean
    surfaces_non_boisees?: boolean
    surfaces_non_boisees_artificialisees?: boolean
    surfaces_non_boisees_naturelles?: boolean
    surface_autres_terres_boisees?: boolean
    autres_surfaces?: boolean
  }, ExtArgs["result"]["incendies_foret"]>

  export type incendies_foretSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    index?: boolean
    code_geographique?: boolean
    libelle_geographique?: boolean
    epci?: boolean
    libelle_epci?: boolean
    departement?: boolean
    region?: boolean
    nature?: boolean
    annee?: boolean
    surface_parcourue?: boolean
    surface_foret?: boolean
    surface_maquis_garrigues?: boolean
    autres_surfaces_naturelles_hors_foret?: boolean
    surfaces_agricoles?: boolean
    surfaces_non_boisees?: boolean
    surfaces_non_boisees_artificialisees?: boolean
    surfaces_non_boisees_naturelles?: boolean
    surface_autres_terres_boisees?: boolean
    autres_surfaces?: boolean
  }, ExtArgs["result"]["incendies_foret"]>

  export type incendies_foretSelectScalar = {
    index?: boolean
    code_geographique?: boolean
    libelle_geographique?: boolean
    epci?: boolean
    libelle_epci?: boolean
    departement?: boolean
    region?: boolean
    nature?: boolean
    annee?: boolean
    surface_parcourue?: boolean
    surface_foret?: boolean
    surface_maquis_garrigues?: boolean
    autres_surfaces_naturelles_hors_foret?: boolean
    surfaces_agricoles?: boolean
    surfaces_non_boisees?: boolean
    surfaces_non_boisees_artificialisees?: boolean
    surfaces_non_boisees_naturelles?: boolean
    surface_autres_terres_boisees?: boolean
    autres_surfaces?: boolean
  }

  export type incendies_foretOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"index" | "code_geographique" | "libelle_geographique" | "epci" | "libelle_epci" | "departement" | "region" | "nature" | "annee" | "surface_parcourue" | "surface_foret" | "surface_maquis_garrigues" | "autres_surfaces_naturelles_hors_foret" | "surfaces_agricoles" | "surfaces_non_boisees" | "surfaces_non_boisees_artificialisees" | "surfaces_non_boisees_naturelles" | "surface_autres_terres_boisees" | "autres_surfaces", ExtArgs["result"]["incendies_foret"]>

  export type $incendies_foretPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "incendies_foret"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      index: bigint
      code_geographique: string
      libelle_geographique: string
      epci: string
      libelle_epci: string
      departement: string
      region: number
      nature: string | null
      annee: number
      surface_parcourue: number
      surface_foret: number | null
      surface_maquis_garrigues: number | null
      autres_surfaces_naturelles_hors_foret: number | null
      surfaces_agricoles: number | null
      surfaces_non_boisees: number | null
      surfaces_non_boisees_artificialisees: number | null
      surfaces_non_boisees_naturelles: number | null
      surface_autres_terres_boisees: number | null
      autres_surfaces: number | null
    }, ExtArgs["result"]["incendies_foret"]>
    composites: {}
  }

  type incendies_foretGetPayload<S extends boolean | null | undefined | incendies_foretDefaultArgs> = $Result.GetResult<Prisma.$incendies_foretPayload, S>

  type incendies_foretCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<incendies_foretFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Incendies_foretCountAggregateInputType | true
    }

  export interface incendies_foretDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['incendies_foret'], meta: { name: 'incendies_foret' } }
    /**
     * Find zero or one Incendies_foret that matches the filter.
     * @param {incendies_foretFindUniqueArgs} args - Arguments to find a Incendies_foret
     * @example
     * // Get one Incendies_foret
     * const incendies_foret = await prisma.incendies_foret.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends incendies_foretFindUniqueArgs>(args: SelectSubset<T, incendies_foretFindUniqueArgs<ExtArgs>>): Prisma__incendies_foretClient<$Result.GetResult<Prisma.$incendies_foretPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Incendies_foret that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {incendies_foretFindUniqueOrThrowArgs} args - Arguments to find a Incendies_foret
     * @example
     * // Get one Incendies_foret
     * const incendies_foret = await prisma.incendies_foret.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends incendies_foretFindUniqueOrThrowArgs>(args: SelectSubset<T, incendies_foretFindUniqueOrThrowArgs<ExtArgs>>): Prisma__incendies_foretClient<$Result.GetResult<Prisma.$incendies_foretPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Incendies_foret that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {incendies_foretFindFirstArgs} args - Arguments to find a Incendies_foret
     * @example
     * // Get one Incendies_foret
     * const incendies_foret = await prisma.incendies_foret.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends incendies_foretFindFirstArgs>(args?: SelectSubset<T, incendies_foretFindFirstArgs<ExtArgs>>): Prisma__incendies_foretClient<$Result.GetResult<Prisma.$incendies_foretPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Incendies_foret that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {incendies_foretFindFirstOrThrowArgs} args - Arguments to find a Incendies_foret
     * @example
     * // Get one Incendies_foret
     * const incendies_foret = await prisma.incendies_foret.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends incendies_foretFindFirstOrThrowArgs>(args?: SelectSubset<T, incendies_foretFindFirstOrThrowArgs<ExtArgs>>): Prisma__incendies_foretClient<$Result.GetResult<Prisma.$incendies_foretPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Incendies_forets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {incendies_foretFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Incendies_forets
     * const incendies_forets = await prisma.incendies_foret.findMany()
     * 
     * // Get first 10 Incendies_forets
     * const incendies_forets = await prisma.incendies_foret.findMany({ take: 10 })
     * 
     * // Only select the `index`
     * const incendies_foretWithIndexOnly = await prisma.incendies_foret.findMany({ select: { index: true } })
     * 
     */
    findMany<T extends incendies_foretFindManyArgs>(args?: SelectSubset<T, incendies_foretFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$incendies_foretPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Incendies_foret.
     * @param {incendies_foretCreateArgs} args - Arguments to create a Incendies_foret.
     * @example
     * // Create one Incendies_foret
     * const Incendies_foret = await prisma.incendies_foret.create({
     *   data: {
     *     // ... data to create a Incendies_foret
     *   }
     * })
     * 
     */
    create<T extends incendies_foretCreateArgs>(args: SelectSubset<T, incendies_foretCreateArgs<ExtArgs>>): Prisma__incendies_foretClient<$Result.GetResult<Prisma.$incendies_foretPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Incendies_forets.
     * @param {incendies_foretCreateManyArgs} args - Arguments to create many Incendies_forets.
     * @example
     * // Create many Incendies_forets
     * const incendies_foret = await prisma.incendies_foret.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends incendies_foretCreateManyArgs>(args?: SelectSubset<T, incendies_foretCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Incendies_forets and returns the data saved in the database.
     * @param {incendies_foretCreateManyAndReturnArgs} args - Arguments to create many Incendies_forets.
     * @example
     * // Create many Incendies_forets
     * const incendies_foret = await prisma.incendies_foret.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Incendies_forets and only return the `index`
     * const incendies_foretWithIndexOnly = await prisma.incendies_foret.createManyAndReturn({
     *   select: { index: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends incendies_foretCreateManyAndReturnArgs>(args?: SelectSubset<T, incendies_foretCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$incendies_foretPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Incendies_foret.
     * @param {incendies_foretDeleteArgs} args - Arguments to delete one Incendies_foret.
     * @example
     * // Delete one Incendies_foret
     * const Incendies_foret = await prisma.incendies_foret.delete({
     *   where: {
     *     // ... filter to delete one Incendies_foret
     *   }
     * })
     * 
     */
    delete<T extends incendies_foretDeleteArgs>(args: SelectSubset<T, incendies_foretDeleteArgs<ExtArgs>>): Prisma__incendies_foretClient<$Result.GetResult<Prisma.$incendies_foretPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Incendies_foret.
     * @param {incendies_foretUpdateArgs} args - Arguments to update one Incendies_foret.
     * @example
     * // Update one Incendies_foret
     * const incendies_foret = await prisma.incendies_foret.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends incendies_foretUpdateArgs>(args: SelectSubset<T, incendies_foretUpdateArgs<ExtArgs>>): Prisma__incendies_foretClient<$Result.GetResult<Prisma.$incendies_foretPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Incendies_forets.
     * @param {incendies_foretDeleteManyArgs} args - Arguments to filter Incendies_forets to delete.
     * @example
     * // Delete a few Incendies_forets
     * const { count } = await prisma.incendies_foret.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends incendies_foretDeleteManyArgs>(args?: SelectSubset<T, incendies_foretDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Incendies_forets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {incendies_foretUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Incendies_forets
     * const incendies_foret = await prisma.incendies_foret.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends incendies_foretUpdateManyArgs>(args: SelectSubset<T, incendies_foretUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Incendies_forets and returns the data updated in the database.
     * @param {incendies_foretUpdateManyAndReturnArgs} args - Arguments to update many Incendies_forets.
     * @example
     * // Update many Incendies_forets
     * const incendies_foret = await prisma.incendies_foret.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Incendies_forets and only return the `index`
     * const incendies_foretWithIndexOnly = await prisma.incendies_foret.updateManyAndReturn({
     *   select: { index: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends incendies_foretUpdateManyAndReturnArgs>(args: SelectSubset<T, incendies_foretUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$incendies_foretPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Incendies_foret.
     * @param {incendies_foretUpsertArgs} args - Arguments to update or create a Incendies_foret.
     * @example
     * // Update or create a Incendies_foret
     * const incendies_foret = await prisma.incendies_foret.upsert({
     *   create: {
     *     // ... data to create a Incendies_foret
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Incendies_foret we want to update
     *   }
     * })
     */
    upsert<T extends incendies_foretUpsertArgs>(args: SelectSubset<T, incendies_foretUpsertArgs<ExtArgs>>): Prisma__incendies_foretClient<$Result.GetResult<Prisma.$incendies_foretPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Incendies_forets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {incendies_foretCountArgs} args - Arguments to filter Incendies_forets to count.
     * @example
     * // Count the number of Incendies_forets
     * const count = await prisma.incendies_foret.count({
     *   where: {
     *     // ... the filter for the Incendies_forets we want to count
     *   }
     * })
    **/
    count<T extends incendies_foretCountArgs>(
      args?: Subset<T, incendies_foretCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Incendies_foretCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Incendies_foret.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Incendies_foretAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Incendies_foretAggregateArgs>(args: Subset<T, Incendies_foretAggregateArgs>): Prisma.PrismaPromise<GetIncendies_foretAggregateType<T>>

    /**
     * Group by Incendies_foret.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {incendies_foretGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends incendies_foretGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: incendies_foretGroupByArgs['orderBy'] }
        : { orderBy?: incendies_foretGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, incendies_foretGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIncendies_foretGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the incendies_foret model
   */
  readonly fields: incendies_foretFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for incendies_foret.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__incendies_foretClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the incendies_foret model
   */ 
  interface incendies_foretFieldRefs {
    readonly index: FieldRef<"incendies_foret", 'BigInt'>
    readonly code_geographique: FieldRef<"incendies_foret", 'String'>
    readonly libelle_geographique: FieldRef<"incendies_foret", 'String'>
    readonly epci: FieldRef<"incendies_foret", 'String'>
    readonly libelle_epci: FieldRef<"incendies_foret", 'String'>
    readonly departement: FieldRef<"incendies_foret", 'String'>
    readonly region: FieldRef<"incendies_foret", 'Float'>
    readonly nature: FieldRef<"incendies_foret", 'String'>
    readonly annee: FieldRef<"incendies_foret", 'Int'>
    readonly surface_parcourue: FieldRef<"incendies_foret", 'Float'>
    readonly surface_foret: FieldRef<"incendies_foret", 'Float'>
    readonly surface_maquis_garrigues: FieldRef<"incendies_foret", 'Float'>
    readonly autres_surfaces_naturelles_hors_foret: FieldRef<"incendies_foret", 'Float'>
    readonly surfaces_agricoles: FieldRef<"incendies_foret", 'Float'>
    readonly surfaces_non_boisees: FieldRef<"incendies_foret", 'Float'>
    readonly surfaces_non_boisees_artificialisees: FieldRef<"incendies_foret", 'Float'>
    readonly surfaces_non_boisees_naturelles: FieldRef<"incendies_foret", 'Float'>
    readonly surface_autres_terres_boisees: FieldRef<"incendies_foret", 'Float'>
    readonly autres_surfaces: FieldRef<"incendies_foret", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * incendies_foret findUnique
   */
  export type incendies_foretFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the incendies_foret
     */
    select?: incendies_foretSelect<ExtArgs> | null
    /**
     * Omit specific fields from the incendies_foret
     */
    omit?: incendies_foretOmit<ExtArgs> | null
    /**
     * Filter, which incendies_foret to fetch.
     */
    where: incendies_foretWhereUniqueInput
  }

  /**
   * incendies_foret findUniqueOrThrow
   */
  export type incendies_foretFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the incendies_foret
     */
    select?: incendies_foretSelect<ExtArgs> | null
    /**
     * Omit specific fields from the incendies_foret
     */
    omit?: incendies_foretOmit<ExtArgs> | null
    /**
     * Filter, which incendies_foret to fetch.
     */
    where: incendies_foretWhereUniqueInput
  }

  /**
   * incendies_foret findFirst
   */
  export type incendies_foretFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the incendies_foret
     */
    select?: incendies_foretSelect<ExtArgs> | null
    /**
     * Omit specific fields from the incendies_foret
     */
    omit?: incendies_foretOmit<ExtArgs> | null
    /**
     * Filter, which incendies_foret to fetch.
     */
    where?: incendies_foretWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of incendies_forets to fetch.
     */
    orderBy?: incendies_foretOrderByWithRelationInput | incendies_foretOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for incendies_forets.
     */
    cursor?: incendies_foretWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` incendies_forets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` incendies_forets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of incendies_forets.
     */
    distinct?: Incendies_foretScalarFieldEnum | Incendies_foretScalarFieldEnum[]
  }

  /**
   * incendies_foret findFirstOrThrow
   */
  export type incendies_foretFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the incendies_foret
     */
    select?: incendies_foretSelect<ExtArgs> | null
    /**
     * Omit specific fields from the incendies_foret
     */
    omit?: incendies_foretOmit<ExtArgs> | null
    /**
     * Filter, which incendies_foret to fetch.
     */
    where?: incendies_foretWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of incendies_forets to fetch.
     */
    orderBy?: incendies_foretOrderByWithRelationInput | incendies_foretOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for incendies_forets.
     */
    cursor?: incendies_foretWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` incendies_forets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` incendies_forets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of incendies_forets.
     */
    distinct?: Incendies_foretScalarFieldEnum | Incendies_foretScalarFieldEnum[]
  }

  /**
   * incendies_foret findMany
   */
  export type incendies_foretFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the incendies_foret
     */
    select?: incendies_foretSelect<ExtArgs> | null
    /**
     * Omit specific fields from the incendies_foret
     */
    omit?: incendies_foretOmit<ExtArgs> | null
    /**
     * Filter, which incendies_forets to fetch.
     */
    where?: incendies_foretWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of incendies_forets to fetch.
     */
    orderBy?: incendies_foretOrderByWithRelationInput | incendies_foretOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing incendies_forets.
     */
    cursor?: incendies_foretWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` incendies_forets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` incendies_forets.
     */
    skip?: number
    distinct?: Incendies_foretScalarFieldEnum | Incendies_foretScalarFieldEnum[]
  }

  /**
   * incendies_foret create
   */
  export type incendies_foretCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the incendies_foret
     */
    select?: incendies_foretSelect<ExtArgs> | null
    /**
     * Omit specific fields from the incendies_foret
     */
    omit?: incendies_foretOmit<ExtArgs> | null
    /**
     * The data needed to create a incendies_foret.
     */
    data: XOR<incendies_foretCreateInput, incendies_foretUncheckedCreateInput>
  }

  /**
   * incendies_foret createMany
   */
  export type incendies_foretCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many incendies_forets.
     */
    data: incendies_foretCreateManyInput | incendies_foretCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * incendies_foret createManyAndReturn
   */
  export type incendies_foretCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the incendies_foret
     */
    select?: incendies_foretSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the incendies_foret
     */
    omit?: incendies_foretOmit<ExtArgs> | null
    /**
     * The data used to create many incendies_forets.
     */
    data: incendies_foretCreateManyInput | incendies_foretCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * incendies_foret update
   */
  export type incendies_foretUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the incendies_foret
     */
    select?: incendies_foretSelect<ExtArgs> | null
    /**
     * Omit specific fields from the incendies_foret
     */
    omit?: incendies_foretOmit<ExtArgs> | null
    /**
     * The data needed to update a incendies_foret.
     */
    data: XOR<incendies_foretUpdateInput, incendies_foretUncheckedUpdateInput>
    /**
     * Choose, which incendies_foret to update.
     */
    where: incendies_foretWhereUniqueInput
  }

  /**
   * incendies_foret updateMany
   */
  export type incendies_foretUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update incendies_forets.
     */
    data: XOR<incendies_foretUpdateManyMutationInput, incendies_foretUncheckedUpdateManyInput>
    /**
     * Filter which incendies_forets to update
     */
    where?: incendies_foretWhereInput
    /**
     * Limit how many incendies_forets to update.
     */
    limit?: number
  }

  /**
   * incendies_foret updateManyAndReturn
   */
  export type incendies_foretUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the incendies_foret
     */
    select?: incendies_foretSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the incendies_foret
     */
    omit?: incendies_foretOmit<ExtArgs> | null
    /**
     * The data used to update incendies_forets.
     */
    data: XOR<incendies_foretUpdateManyMutationInput, incendies_foretUncheckedUpdateManyInput>
    /**
     * Filter which incendies_forets to update
     */
    where?: incendies_foretWhereInput
    /**
     * Limit how many incendies_forets to update.
     */
    limit?: number
  }

  /**
   * incendies_foret upsert
   */
  export type incendies_foretUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the incendies_foret
     */
    select?: incendies_foretSelect<ExtArgs> | null
    /**
     * Omit specific fields from the incendies_foret
     */
    omit?: incendies_foretOmit<ExtArgs> | null
    /**
     * The filter to search for the incendies_foret to update in case it exists.
     */
    where: incendies_foretWhereUniqueInput
    /**
     * In case the incendies_foret found by the `where` argument doesn't exist, create a new incendies_foret with this data.
     */
    create: XOR<incendies_foretCreateInput, incendies_foretUncheckedCreateInput>
    /**
     * In case the incendies_foret was found with the provided `where` argument, update it with this data.
     */
    update: XOR<incendies_foretUpdateInput, incendies_foretUncheckedUpdateInput>
  }

  /**
   * incendies_foret delete
   */
  export type incendies_foretDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the incendies_foret
     */
    select?: incendies_foretSelect<ExtArgs> | null
    /**
     * Omit specific fields from the incendies_foret
     */
    omit?: incendies_foretOmit<ExtArgs> | null
    /**
     * Filter which incendies_foret to delete.
     */
    where: incendies_foretWhereUniqueInput
  }

  /**
   * incendies_foret deleteMany
   */
  export type incendies_foretDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which incendies_forets to delete
     */
    where?: incendies_foretWhereInput
    /**
     * Limit how many incendies_forets to delete.
     */
    limit?: number
  }

  /**
   * incendies_foret without action
   */
  export type incendies_foretDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the incendies_foret
     */
    select?: incendies_foretSelect<ExtArgs> | null
    /**
     * Omit specific fields from the incendies_foret
     */
    omit?: incendies_foretOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const Inconfort_thermiqueScalarFieldEnum: {
    index: 'index',
    code_geographique: 'code_geographique',
    libelle_geographique: 'libelle_geographique',
    epci: 'epci',
    libelle_epci: 'libelle_epci',
    departement: 'departement',
    region: 'region',
    age_bati_post06: 'age_bati_post06',
    age_bati_91_05: 'age_bati_91_05',
    age_bati_46_90: 'age_bati_46_90',
    age_bati_19_45: 'age_bati_19_45',
    age_bati_pre_19: 'age_bati_pre_19',
    under_4_sum_1968: 'under_4_sum_1968',
    to_80_sum_1968: 'to_80_sum_1968',
    over_80_sum_1968: 'over_80_sum_1968',
    under_4_sum_1975: 'under_4_sum_1975',
    to_80_sum_1975: 'to_80_sum_1975',
    over_80_sum_1975: 'over_80_sum_1975',
    under_4_sum_1982: 'under_4_sum_1982',
    to_80_sum_1982: 'to_80_sum_1982',
    over_80_sum_1982: 'over_80_sum_1982',
    under_4_sum_1990: 'under_4_sum_1990',
    to_80_sum_1990: 'to_80_sum_1990',
    over_80_sum_1990: 'over_80_sum_1990',
    under_4_sum_1999: 'under_4_sum_1999',
    to_80_sum_1999: 'to_80_sum_1999',
    over_80_sum_1999: 'over_80_sum_1999',
    under_4_sum_2009: 'under_4_sum_2009',
    to_80_sum_2009: 'to_80_sum_2009',
    over_80_sum_2009: 'over_80_sum_2009',
    under_4_sum_2014: 'under_4_sum_2014',
    to_80_sum_2014: 'to_80_sum_2014',
    over_80_sum_2014: 'over_80_sum_2014',
    under_4_sum_2020: 'under_4_sum_2020',
    to_80_sum_2020: 'to_80_sum_2020',
    over_80_sum_2020: 'over_80_sum_2020',
    P20_POP80P: 'P20_POP80P',
    P20_POP80P_PSEUL: 'P20_POP80P_PSEUL',
    P20_POP80P_PSEUL_PERCENT: 'P20_POP80P_PSEUL_PERCENT',
    tee_log: 'tee_log',
    tee_mob: 'tee_mob',
    precarite_logement: 'precarite_logement',
    NA5AZ_sum: 'NA5AZ_sum',
    NA5BE_sum: 'NA5BE_sum',
    NA5FZ_sum: 'NA5FZ_sum',
    NA5GU_sum: 'NA5GU_sum',
    NA5OQ_sum: 'NA5OQ_sum',
    s_geom_cstr_bati: 's_geom_cstr_bati',
    hauteur: 'hauteur',
    h_x_s: 'h_x_s',
    densite_bati: 'densite_bati',
    clc_1_artificialise: 'clc_1_artificialise',
    clc_2_agricole: 'clc_2_agricole',
    clc_3_foret_semiNaturel: 'clc_3_foret_semiNaturel',
    clc_4_humide: 'clc_4_humide',
    clc_5_eau: 'clc_5_eau',
    superf_choro: 'superf_choro'
  };

  export type Inconfort_thermiqueScalarFieldEnum = (typeof Inconfort_thermiqueScalarFieldEnum)[keyof typeof Inconfort_thermiqueScalarFieldEnum]


  export const Clc_epciScalarFieldEnum: {
    pk: 'pk',
    legend: 'legend',
    epci_code: 'epci_code'
  };

  export type Clc_epciScalarFieldEnum = (typeof Clc_epciScalarFieldEnum)[keyof typeof Clc_epciScalarFieldEnum]


  export const Collectivites_searchbarScalarFieldEnum: {
    index: 'index',
    code_commune: 'code_commune',
    coordinates: 'coordinates',
    libelle_commune: 'libelle_commune',
    code_epci: 'code_epci',
    libelle_epci: 'libelle_epci',
    departement: 'departement',
    region: 'region',
    search_code: 'search_code',
    search_libelle: 'search_libelle'
  };

  export type Collectivites_searchbarScalarFieldEnum = (typeof Collectivites_searchbarScalarFieldEnum)[keyof typeof Collectivites_searchbarScalarFieldEnum]


  export const BiodiversiteScalarFieldEnum: {
    index: 'index',
    code_geographique: 'code_geographique',
    type_touristique: 'type_touristique',
    libelle_geographique: 'libelle_geographique',
    epci: 'epci',
    libelle_epci: 'libelle_epci',
    departement: 'departement',
    region: 'region'
  };

  export type BiodiversiteScalarFieldEnum = (typeof BiodiversiteScalarFieldEnum)[keyof typeof BiodiversiteScalarFieldEnum]


  export const Gestion_risquesScalarFieldEnum: {
    index: 'index',
    code_geographique: 'code_geographique',
    lib_risque_jo: 'lib_risque_jo',
    dat_pub_arrete: 'dat_pub_arrete',
    libelle_geographique: 'libelle_geographique',
    epci: 'epci',
    libelle_epci: 'libelle_epci',
    departement: 'departement',
    region: 'region'
  };

  export type Gestion_risquesScalarFieldEnum = (typeof Gestion_risquesScalarFieldEnum)[keyof typeof Gestion_risquesScalarFieldEnum]


  export const Communes_dromScalarFieldEnum: {
    pk: 'pk',
    code_commune: 'code_commune',
    libelle_commune: 'libelle_commune',
    epci: 'epci',
    libelle_epci: 'libelle_epci',
    coordinates: 'coordinates',
    densite_bati: 'densite_bati',
    precarite_logement: 'precarite_logement',
    surface: 'surface'
  };

  export type Communes_dromScalarFieldEnum = (typeof Communes_dromScalarFieldEnum)[keyof typeof Communes_dromScalarFieldEnum]


  export const Ressources_eauScalarFieldEnum: {
    index: 'index',
    code_geographique: 'code_geographique',
    LIBELLE_SOUS_CHAMP: 'LIBELLE_SOUS_CHAMP',
    SOUS_CHAMP: 'SOUS_CHAMP',
    A2020: 'A2020',
    A2019: 'A2019',
    A2018: 'A2018',
    A2017: 'A2017',
    A2016: 'A2016',
    A2015: 'A2015',
    A2014: 'A2014',
    A2013: 'A2013',
    A2012: 'A2012',
    A2011: 'A2011',
    A2010: 'A2010',
    A2009: 'A2009',
    A2008: 'A2008',
    libelle_geographique: 'libelle_geographique',
    epci: 'epci',
    libelle_epci: 'libelle_epci',
    departement: 'departement',
    region: 'region'
  };

  export type Ressources_eauScalarFieldEnum = (typeof Ressources_eauScalarFieldEnum)[keyof typeof Ressources_eauScalarFieldEnum]


  export const Agriculture_bioScalarFieldEnum: {
    index: 'index',
    epci: 'epci',
    libelle_epci: 'libelle_epci',
    VARIABLE: 'VARIABLE',
    LIBELLE_SOUS_CHAMP: 'LIBELLE_SOUS_CHAMP',
    surface_2022: 'surface_2022',
    surface_2021: 'surface_2021',
    surface_2020: 'surface_2020',
    surface_2019: 'surface_2019',
    nombre_2022: 'nombre_2022',
    nombre_2021: 'nombre_2021',
    nombre_2020: 'nombre_2020',
    nombre_2019: 'nombre_2019'
  };

  export type Agriculture_bioScalarFieldEnum = (typeof Agriculture_bioScalarFieldEnum)[keyof typeof Agriculture_bioScalarFieldEnum]


  export const Erosion_cotiereScalarFieldEnum: {
    pk: 'pk',
    taux: 'taux',
    duree: 'duree',
    tdc_ancien: 'tdc_ancien',
    tdc_rec: 'tdc_rec'
  };

  export type Erosion_cotiereScalarFieldEnum = (typeof Erosion_cotiereScalarFieldEnum)[keyof typeof Erosion_cotiereScalarFieldEnum]


  export const EpciScalarFieldEnum: {
    pk: 'pk',
    epci_code: 'epci_code'
  };

  export type EpciScalarFieldEnum = (typeof EpciScalarFieldEnum)[keyof typeof EpciScalarFieldEnum]


  export const Surfaces_protegeesScalarFieldEnum: {
    index: 'index',
    code_geographique: 'code_geographique',
    PNC: 'PNC',
    RAMSAR: 'RAMSAR',
    PNR: 'PNR',
    PNP: 'PNP',
    FOR_PRO: 'FOR_PRO',
    ZZZ: 'ZZZ',
    ZNIEFF2: 'ZNIEFF2',
    ZNIEFF1: 'ZNIEFF1',
    RNR: 'RNR',
    TOU_PRO: 'TOU_PRO',
    NATURA: 'NATURA',
    ZPS: 'ZPS',
    SIC: 'SIC',
    CELRL: 'CELRL',
    BIO: 'BIO',
    APB: 'APB',
    RN: 'RN',
    RBFD: 'RBFD',
    RNCFS: 'RNCFS',
    libelle_geographique: 'libelle_geographique',
    epci: 'epci',
    libelle_epci: 'libelle_epci',
    departement: 'departement',
    region: 'region'
  };

  export type Surfaces_protegeesScalarFieldEnum = (typeof Surfaces_protegeesScalarFieldEnum)[keyof typeof Surfaces_protegeesScalarFieldEnum]


  export const Consommation_espaces_nafScalarFieldEnum: {
    index: 'index',
    code_geographique: 'code_geographique',
    libelle_geographique: 'libelle_geographique',
    epci: 'epci',
    libelle_epci: 'libelle_epci',
    departement: 'departement',
    region: 'region',
    naf09art10: 'naf09art10',
    art09act10: 'art09act10',
    art09hab10: 'art09hab10',
    art09mix10: 'art09mix10',
    art09rou10: 'art09rou10',
    art09fer10: 'art09fer10',
    art09inc10: 'art09inc10',
    naf10art11: 'naf10art11',
    art10act11: 'art10act11',
    art10hab11: 'art10hab11',
    art10mix11: 'art10mix11',
    art10rou11: 'art10rou11',
    art10fer11: 'art10fer11',
    art10inc11: 'art10inc11',
    naf11art12: 'naf11art12',
    art11act12: 'art11act12',
    art11hab12: 'art11hab12',
    art11mix12: 'art11mix12',
    art11rou12: 'art11rou12',
    art11fer12: 'art11fer12',
    art11inc12: 'art11inc12',
    naf12art13: 'naf12art13',
    art12act13: 'art12act13',
    art12hab13: 'art12hab13',
    art12mix13: 'art12mix13',
    art12rou13: 'art12rou13',
    art12fer13: 'art12fer13',
    art12inc13: 'art12inc13',
    naf13art14: 'naf13art14',
    art13act14: 'art13act14',
    art13hab14: 'art13hab14',
    art13mix14: 'art13mix14',
    art13rou14: 'art13rou14',
    art13fer14: 'art13fer14',
    art13inc14: 'art13inc14',
    naf14art15: 'naf14art15',
    art14act15: 'art14act15',
    art14hab15: 'art14hab15',
    art14mix15: 'art14mix15',
    art14rou15: 'art14rou15',
    art14fer15: 'art14fer15',
    art14inc15: 'art14inc15',
    naf15art16: 'naf15art16',
    art15act16: 'art15act16',
    art15hab16: 'art15hab16',
    art15mix16: 'art15mix16',
    art15rou16: 'art15rou16',
    art15fer16: 'art15fer16',
    art15inc16: 'art15inc16',
    naf16art17: 'naf16art17',
    art16act17: 'art16act17',
    art16hab17: 'art16hab17',
    art16mix17: 'art16mix17',
    art16rou17: 'art16rou17',
    art16fer17: 'art16fer17',
    art16inc17: 'art16inc17',
    naf17art18: 'naf17art18',
    art17act18: 'art17act18',
    art17hab18: 'art17hab18',
    art17mix18: 'art17mix18',
    art17rou18: 'art17rou18',
    art17fer18: 'art17fer18',
    art17inc18: 'art17inc18',
    naf18art19: 'naf18art19',
    art18act19: 'art18act19',
    art18hab19: 'art18hab19',
    art18mix19: 'art18mix19',
    art18rou19: 'art18rou19',
    art18fer19: 'art18fer19',
    art18inc19: 'art18inc19',
    naf19art20: 'naf19art20',
    art19act20: 'art19act20',
    art19hab20: 'art19hab20',
    art19mix20: 'art19mix20',
    art19rou20: 'art19rou20',
    art19fer20: 'art19fer20',
    art19inc20: 'art19inc20',
    naf20art21: 'naf20art21',
    art20act21: 'art20act21',
    art20hab21: 'art20hab21',
    art20mix21: 'art20mix21',
    art20rou21: 'art20rou21',
    art20fer21: 'art20fer21',
    art20inc21: 'art20inc21',
    naf21art22: 'naf21art22',
    art21act22: 'art21act22',
    art21hab22: 'art21hab22',
    art21mix22: 'art21mix22',
    art21rou22: 'art21rou22',
    art21fer22: 'art21fer22',
    art21inc22: 'art21inc22',
    naf22art23: 'naf22art23',
    art22act23: 'art22act23',
    art22hab23: 'art22hab23',
    art22mix23: 'art22mix23',
    art22rou23: 'art22rou23',
    art22fer23: 'art22fer23',
    art22inc23: 'art22inc23',
    naf09art23: 'naf09art23',
    art09act23: 'art09act23',
    art09hab23: 'art09hab23',
    art09mix23: 'art09mix23',
    art09inc23: 'art09inc23',
    art09rou23: 'art09rou23',
    art09fer23: 'art09fer23',
    artcom0923: 'artcom0923',
    pop14: 'pop14',
    pop20: 'pop20',
    pop1420: 'pop1420',
    men14: 'men14',
    men20: 'men20',
    men1420: 'men1420',
    emp14: 'emp14',
    emp20: 'emp20',
    emp1420: 'emp1420',
    mepart1420: 'mepart1420',
    menhab1420: 'menhab1420',
    artpop1420: 'artpop1420',
    surfcom2023: 'surfcom2023',
    C10_MEN: 'C10_MEN',
    C15_MEN: 'C15_MEN',
    C21_MEN: 'C21_MEN'
  };

  export type Consommation_espaces_nafScalarFieldEnum = (typeof Consommation_espaces_nafScalarFieldEnum)[keyof typeof Consommation_espaces_nafScalarFieldEnum]


  export const North_star_metricScalarFieldEnum: {
    pk: 'pk',
    value: 'value',
    date: 'date'
  };

  export type North_star_metricScalarFieldEnum = (typeof North_star_metricScalarFieldEnum)[keyof typeof North_star_metricScalarFieldEnum]


  export const Etat_cours_d_eauScalarFieldEnum: {
    pk: 'pk',
    name: 'name',
    longueur: 'longueur',
    etateco: 'etateco'
  };

  export type Etat_cours_d_eauScalarFieldEnum = (typeof Etat_cours_d_eauScalarFieldEnum)[keyof typeof Etat_cours_d_eauScalarFieldEnum]


  export const Aot_40ScalarFieldEnum: {
    index: 'index',
    nom_site: 'nom_site',
    type_d_implantation: 'type_d_implantation',
    valeur_brute: 'valeur_brute',
    Latitude: 'Latitude',
    Longitude: 'Longitude'
  };

  export type Aot_40ScalarFieldEnum = (typeof Aot_40ScalarFieldEnum)[keyof typeof Aot_40ScalarFieldEnum]


  export const Qualite_sites_baignadeScalarFieldEnum: {
    index: 'index',
    DEP_NOM: 'DEP_NOM',
    DEP_NUM: 'DEP_NUM',
    TYPE: 'TYPE',
    COMMUNE: 'COMMUNE',
    POINT: 'POINT',
    LONG: 'LONG',
    LAT: 'LAT',
    QEB_2013: 'QEB_2013',
    QEB_2014: 'QEB_2014',
    QEB_2015: 'QEB_2015',
    QEB_2016: 'QEB_2016',
    QEB_2017: 'QEB_2017',
    QEB_2018: 'QEB_2018',
    QEB_2019: 'QEB_2019',
    QEB_2020: 'QEB_2020'
  };

  export type Qualite_sites_baignadeScalarFieldEnum = (typeof Qualite_sites_baignadeScalarFieldEnum)[keyof typeof Qualite_sites_baignadeScalarFieldEnum]


  export const CommunesScalarFieldEnum: {
    pk: 'pk',
    code_commune: 'code_commune',
    libelle_commune: 'libelle_commune',
    epci: 'epci',
    libelle_epci: 'libelle_epci',
    libgeo: 'libgeo',
    coordinates: 'coordinates',
    densite_bati: 'densite_bati',
    precarite_logement: 'precarite_logement'
  };

  export type CommunesScalarFieldEnum = (typeof CommunesScalarFieldEnum)[keyof typeof CommunesScalarFieldEnum]


  export const Patch4cScalarFieldEnum: {
    index: 'index',
    code_geographique: 'code_geographique',
    niveaux_marins: 'niveaux_marins',
    feux_foret: 'feux_foret',
    secheresse_sols: 'secheresse_sols',
    fortes_precipitations: 'fortes_precipitations',
    fortes_chaleurs: 'fortes_chaleurs'
  };

  export type Patch4cScalarFieldEnum = (typeof Patch4cScalarFieldEnum)[keyof typeof Patch4cScalarFieldEnum]


  export const AgricultureScalarFieldEnum: {
    index: 'index',
    CODGEO: 'CODGEO',
    LIBGEO: 'LIBGEO',
    EPCI: 'EPCI',
    LIBEPCI: 'LIBEPCI',
    DEP: 'DEP',
    REG: 'REG',
    part_irr_SAU_2020: 'part_irr_SAU_2020',
    part_over_55: 'part_over_55'
  };

  export type AgricultureScalarFieldEnum = (typeof AgricultureScalarFieldEnum)[keyof typeof AgricultureScalarFieldEnum]


  export const Incendies_foretScalarFieldEnum: {
    index: 'index',
    code_geographique: 'code_geographique',
    libelle_geographique: 'libelle_geographique',
    epci: 'epci',
    libelle_epci: 'libelle_epci',
    departement: 'departement',
    region: 'region',
    nature: 'nature',
    annee: 'annee',
    surface_parcourue: 'surface_parcourue',
    surface_foret: 'surface_foret',
    surface_maquis_garrigues: 'surface_maquis_garrigues',
    autres_surfaces_naturelles_hors_foret: 'autres_surfaces_naturelles_hors_foret',
    surfaces_agricoles: 'surfaces_agricoles',
    surfaces_non_boisees: 'surfaces_non_boisees',
    surfaces_non_boisees_artificialisees: 'surfaces_non_boisees_artificialisees',
    surfaces_non_boisees_naturelles: 'surfaces_non_boisees_naturelles',
    surface_autres_terres_boisees: 'surface_autres_terres_boisees',
    autres_surfaces: 'autres_surfaces'
  };

  export type Incendies_foretScalarFieldEnum = (typeof Incendies_foretScalarFieldEnum)[keyof typeof Incendies_foretScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'BigInt'
   */
  export type BigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt'>
    


  /**
   * Reference to a field of type 'BigInt[]'
   */
  export type ListBigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    
  /**
   * Deep Input Types
   */


  export type inconfort_thermiqueWhereInput = {
    AND?: inconfort_thermiqueWhereInput | inconfort_thermiqueWhereInput[]
    OR?: inconfort_thermiqueWhereInput[]
    NOT?: inconfort_thermiqueWhereInput | inconfort_thermiqueWhereInput[]
    index?: BigIntFilter<"inconfort_thermique"> | bigint | number
    code_geographique?: StringFilter<"inconfort_thermique"> | string
    libelle_geographique?: StringFilter<"inconfort_thermique"> | string
    epci?: StringFilter<"inconfort_thermique"> | string
    libelle_epci?: StringFilter<"inconfort_thermique"> | string
    departement?: StringFilter<"inconfort_thermique"> | string
    region?: IntFilter<"inconfort_thermique"> | number
    age_bati_post06?: FloatNullableFilter<"inconfort_thermique"> | number | null
    age_bati_91_05?: FloatNullableFilter<"inconfort_thermique"> | number | null
    age_bati_46_90?: FloatNullableFilter<"inconfort_thermique"> | number | null
    age_bati_19_45?: FloatNullableFilter<"inconfort_thermique"> | number | null
    age_bati_pre_19?: FloatNullableFilter<"inconfort_thermique"> | number | null
    under_4_sum_1968?: StringNullableFilter<"inconfort_thermique"> | string | null
    to_80_sum_1968?: StringNullableFilter<"inconfort_thermique"> | string | null
    over_80_sum_1968?: StringNullableFilter<"inconfort_thermique"> | string | null
    under_4_sum_1975?: StringNullableFilter<"inconfort_thermique"> | string | null
    to_80_sum_1975?: StringNullableFilter<"inconfort_thermique"> | string | null
    over_80_sum_1975?: StringNullableFilter<"inconfort_thermique"> | string | null
    under_4_sum_1982?: StringNullableFilter<"inconfort_thermique"> | string | null
    to_80_sum_1982?: StringNullableFilter<"inconfort_thermique"> | string | null
    over_80_sum_1982?: StringNullableFilter<"inconfort_thermique"> | string | null
    under_4_sum_1990?: StringNullableFilter<"inconfort_thermique"> | string | null
    to_80_sum_1990?: StringNullableFilter<"inconfort_thermique"> | string | null
    over_80_sum_1990?: StringNullableFilter<"inconfort_thermique"> | string | null
    under_4_sum_1999?: StringNullableFilter<"inconfort_thermique"> | string | null
    to_80_sum_1999?: StringNullableFilter<"inconfort_thermique"> | string | null
    over_80_sum_1999?: StringNullableFilter<"inconfort_thermique"> | string | null
    under_4_sum_2009?: StringNullableFilter<"inconfort_thermique"> | string | null
    to_80_sum_2009?: StringNullableFilter<"inconfort_thermique"> | string | null
    over_80_sum_2009?: StringNullableFilter<"inconfort_thermique"> | string | null
    under_4_sum_2014?: StringNullableFilter<"inconfort_thermique"> | string | null
    to_80_sum_2014?: StringNullableFilter<"inconfort_thermique"> | string | null
    over_80_sum_2014?: StringNullableFilter<"inconfort_thermique"> | string | null
    under_4_sum_2020?: StringNullableFilter<"inconfort_thermique"> | string | null
    to_80_sum_2020?: StringNullableFilter<"inconfort_thermique"> | string | null
    over_80_sum_2020?: StringNullableFilter<"inconfort_thermique"> | string | null
    P20_POP80P?: StringNullableFilter<"inconfort_thermique"> | string | null
    P20_POP80P_PSEUL?: StringNullableFilter<"inconfort_thermique"> | string | null
    P20_POP80P_PSEUL_PERCENT?: StringNullableFilter<"inconfort_thermique"> | string | null
    tee_log?: FloatNullableFilter<"inconfort_thermique"> | number | null
    tee_mob?: FloatNullableFilter<"inconfort_thermique"> | number | null
    precarite_logement?: FloatNullableFilter<"inconfort_thermique"> | number | null
    NA5AZ_sum?: FloatNullableFilter<"inconfort_thermique"> | number | null
    NA5BE_sum?: FloatNullableFilter<"inconfort_thermique"> | number | null
    NA5FZ_sum?: FloatNullableFilter<"inconfort_thermique"> | number | null
    NA5GU_sum?: FloatNullableFilter<"inconfort_thermique"> | number | null
    NA5OQ_sum?: FloatNullableFilter<"inconfort_thermique"> | number | null
    s_geom_cstr_bati?: FloatNullableFilter<"inconfort_thermique"> | number | null
    hauteur?: FloatNullableFilter<"inconfort_thermique"> | number | null
    h_x_s?: FloatNullableFilter<"inconfort_thermique"> | number | null
    densite_bati?: FloatNullableFilter<"inconfort_thermique"> | number | null
    clc_1_artificialise?: FloatNullableFilter<"inconfort_thermique"> | number | null
    clc_2_agricole?: FloatNullableFilter<"inconfort_thermique"> | number | null
    clc_3_foret_semiNaturel?: FloatNullableFilter<"inconfort_thermique"> | number | null
    clc_4_humide?: FloatNullableFilter<"inconfort_thermique"> | number | null
    clc_5_eau?: FloatNullableFilter<"inconfort_thermique"> | number | null
    superf_choro?: FloatNullableFilter<"inconfort_thermique"> | number | null
  }

  export type inconfort_thermiqueOrderByWithRelationInput = {
    index?: SortOrder
    code_geographique?: SortOrder
    libelle_geographique?: SortOrder
    epci?: SortOrder
    libelle_epci?: SortOrder
    departement?: SortOrder
    region?: SortOrder
    age_bati_post06?: SortOrderInput | SortOrder
    age_bati_91_05?: SortOrderInput | SortOrder
    age_bati_46_90?: SortOrderInput | SortOrder
    age_bati_19_45?: SortOrderInput | SortOrder
    age_bati_pre_19?: SortOrderInput | SortOrder
    under_4_sum_1968?: SortOrderInput | SortOrder
    to_80_sum_1968?: SortOrderInput | SortOrder
    over_80_sum_1968?: SortOrderInput | SortOrder
    under_4_sum_1975?: SortOrderInput | SortOrder
    to_80_sum_1975?: SortOrderInput | SortOrder
    over_80_sum_1975?: SortOrderInput | SortOrder
    under_4_sum_1982?: SortOrderInput | SortOrder
    to_80_sum_1982?: SortOrderInput | SortOrder
    over_80_sum_1982?: SortOrderInput | SortOrder
    under_4_sum_1990?: SortOrderInput | SortOrder
    to_80_sum_1990?: SortOrderInput | SortOrder
    over_80_sum_1990?: SortOrderInput | SortOrder
    under_4_sum_1999?: SortOrderInput | SortOrder
    to_80_sum_1999?: SortOrderInput | SortOrder
    over_80_sum_1999?: SortOrderInput | SortOrder
    under_4_sum_2009?: SortOrderInput | SortOrder
    to_80_sum_2009?: SortOrderInput | SortOrder
    over_80_sum_2009?: SortOrderInput | SortOrder
    under_4_sum_2014?: SortOrderInput | SortOrder
    to_80_sum_2014?: SortOrderInput | SortOrder
    over_80_sum_2014?: SortOrderInput | SortOrder
    under_4_sum_2020?: SortOrderInput | SortOrder
    to_80_sum_2020?: SortOrderInput | SortOrder
    over_80_sum_2020?: SortOrderInput | SortOrder
    P20_POP80P?: SortOrderInput | SortOrder
    P20_POP80P_PSEUL?: SortOrderInput | SortOrder
    P20_POP80P_PSEUL_PERCENT?: SortOrderInput | SortOrder
    tee_log?: SortOrderInput | SortOrder
    tee_mob?: SortOrderInput | SortOrder
    precarite_logement?: SortOrderInput | SortOrder
    NA5AZ_sum?: SortOrderInput | SortOrder
    NA5BE_sum?: SortOrderInput | SortOrder
    NA5FZ_sum?: SortOrderInput | SortOrder
    NA5GU_sum?: SortOrderInput | SortOrder
    NA5OQ_sum?: SortOrderInput | SortOrder
    s_geom_cstr_bati?: SortOrderInput | SortOrder
    hauteur?: SortOrderInput | SortOrder
    h_x_s?: SortOrderInput | SortOrder
    densite_bati?: SortOrderInput | SortOrder
    clc_1_artificialise?: SortOrderInput | SortOrder
    clc_2_agricole?: SortOrderInput | SortOrder
    clc_3_foret_semiNaturel?: SortOrderInput | SortOrder
    clc_4_humide?: SortOrderInput | SortOrder
    clc_5_eau?: SortOrderInput | SortOrder
    superf_choro?: SortOrderInput | SortOrder
  }

  export type inconfort_thermiqueWhereUniqueInput = Prisma.AtLeast<{
    index?: bigint | number
    AND?: inconfort_thermiqueWhereInput | inconfort_thermiqueWhereInput[]
    OR?: inconfort_thermiqueWhereInput[]
    NOT?: inconfort_thermiqueWhereInput | inconfort_thermiqueWhereInput[]
    code_geographique?: StringFilter<"inconfort_thermique"> | string
    libelle_geographique?: StringFilter<"inconfort_thermique"> | string
    epci?: StringFilter<"inconfort_thermique"> | string
    libelle_epci?: StringFilter<"inconfort_thermique"> | string
    departement?: StringFilter<"inconfort_thermique"> | string
    region?: IntFilter<"inconfort_thermique"> | number
    age_bati_post06?: FloatNullableFilter<"inconfort_thermique"> | number | null
    age_bati_91_05?: FloatNullableFilter<"inconfort_thermique"> | number | null
    age_bati_46_90?: FloatNullableFilter<"inconfort_thermique"> | number | null
    age_bati_19_45?: FloatNullableFilter<"inconfort_thermique"> | number | null
    age_bati_pre_19?: FloatNullableFilter<"inconfort_thermique"> | number | null
    under_4_sum_1968?: StringNullableFilter<"inconfort_thermique"> | string | null
    to_80_sum_1968?: StringNullableFilter<"inconfort_thermique"> | string | null
    over_80_sum_1968?: StringNullableFilter<"inconfort_thermique"> | string | null
    under_4_sum_1975?: StringNullableFilter<"inconfort_thermique"> | string | null
    to_80_sum_1975?: StringNullableFilter<"inconfort_thermique"> | string | null
    over_80_sum_1975?: StringNullableFilter<"inconfort_thermique"> | string | null
    under_4_sum_1982?: StringNullableFilter<"inconfort_thermique"> | string | null
    to_80_sum_1982?: StringNullableFilter<"inconfort_thermique"> | string | null
    over_80_sum_1982?: StringNullableFilter<"inconfort_thermique"> | string | null
    under_4_sum_1990?: StringNullableFilter<"inconfort_thermique"> | string | null
    to_80_sum_1990?: StringNullableFilter<"inconfort_thermique"> | string | null
    over_80_sum_1990?: StringNullableFilter<"inconfort_thermique"> | string | null
    under_4_sum_1999?: StringNullableFilter<"inconfort_thermique"> | string | null
    to_80_sum_1999?: StringNullableFilter<"inconfort_thermique"> | string | null
    over_80_sum_1999?: StringNullableFilter<"inconfort_thermique"> | string | null
    under_4_sum_2009?: StringNullableFilter<"inconfort_thermique"> | string | null
    to_80_sum_2009?: StringNullableFilter<"inconfort_thermique"> | string | null
    over_80_sum_2009?: StringNullableFilter<"inconfort_thermique"> | string | null
    under_4_sum_2014?: StringNullableFilter<"inconfort_thermique"> | string | null
    to_80_sum_2014?: StringNullableFilter<"inconfort_thermique"> | string | null
    over_80_sum_2014?: StringNullableFilter<"inconfort_thermique"> | string | null
    under_4_sum_2020?: StringNullableFilter<"inconfort_thermique"> | string | null
    to_80_sum_2020?: StringNullableFilter<"inconfort_thermique"> | string | null
    over_80_sum_2020?: StringNullableFilter<"inconfort_thermique"> | string | null
    P20_POP80P?: StringNullableFilter<"inconfort_thermique"> | string | null
    P20_POP80P_PSEUL?: StringNullableFilter<"inconfort_thermique"> | string | null
    P20_POP80P_PSEUL_PERCENT?: StringNullableFilter<"inconfort_thermique"> | string | null
    tee_log?: FloatNullableFilter<"inconfort_thermique"> | number | null
    tee_mob?: FloatNullableFilter<"inconfort_thermique"> | number | null
    precarite_logement?: FloatNullableFilter<"inconfort_thermique"> | number | null
    NA5AZ_sum?: FloatNullableFilter<"inconfort_thermique"> | number | null
    NA5BE_sum?: FloatNullableFilter<"inconfort_thermique"> | number | null
    NA5FZ_sum?: FloatNullableFilter<"inconfort_thermique"> | number | null
    NA5GU_sum?: FloatNullableFilter<"inconfort_thermique"> | number | null
    NA5OQ_sum?: FloatNullableFilter<"inconfort_thermique"> | number | null
    s_geom_cstr_bati?: FloatNullableFilter<"inconfort_thermique"> | number | null
    hauteur?: FloatNullableFilter<"inconfort_thermique"> | number | null
    h_x_s?: FloatNullableFilter<"inconfort_thermique"> | number | null
    densite_bati?: FloatNullableFilter<"inconfort_thermique"> | number | null
    clc_1_artificialise?: FloatNullableFilter<"inconfort_thermique"> | number | null
    clc_2_agricole?: FloatNullableFilter<"inconfort_thermique"> | number | null
    clc_3_foret_semiNaturel?: FloatNullableFilter<"inconfort_thermique"> | number | null
    clc_4_humide?: FloatNullableFilter<"inconfort_thermique"> | number | null
    clc_5_eau?: FloatNullableFilter<"inconfort_thermique"> | number | null
    superf_choro?: FloatNullableFilter<"inconfort_thermique"> | number | null
  }, "index">

  export type inconfort_thermiqueOrderByWithAggregationInput = {
    index?: SortOrder
    code_geographique?: SortOrder
    libelle_geographique?: SortOrder
    epci?: SortOrder
    libelle_epci?: SortOrder
    departement?: SortOrder
    region?: SortOrder
    age_bati_post06?: SortOrderInput | SortOrder
    age_bati_91_05?: SortOrderInput | SortOrder
    age_bati_46_90?: SortOrderInput | SortOrder
    age_bati_19_45?: SortOrderInput | SortOrder
    age_bati_pre_19?: SortOrderInput | SortOrder
    under_4_sum_1968?: SortOrderInput | SortOrder
    to_80_sum_1968?: SortOrderInput | SortOrder
    over_80_sum_1968?: SortOrderInput | SortOrder
    under_4_sum_1975?: SortOrderInput | SortOrder
    to_80_sum_1975?: SortOrderInput | SortOrder
    over_80_sum_1975?: SortOrderInput | SortOrder
    under_4_sum_1982?: SortOrderInput | SortOrder
    to_80_sum_1982?: SortOrderInput | SortOrder
    over_80_sum_1982?: SortOrderInput | SortOrder
    under_4_sum_1990?: SortOrderInput | SortOrder
    to_80_sum_1990?: SortOrderInput | SortOrder
    over_80_sum_1990?: SortOrderInput | SortOrder
    under_4_sum_1999?: SortOrderInput | SortOrder
    to_80_sum_1999?: SortOrderInput | SortOrder
    over_80_sum_1999?: SortOrderInput | SortOrder
    under_4_sum_2009?: SortOrderInput | SortOrder
    to_80_sum_2009?: SortOrderInput | SortOrder
    over_80_sum_2009?: SortOrderInput | SortOrder
    under_4_sum_2014?: SortOrderInput | SortOrder
    to_80_sum_2014?: SortOrderInput | SortOrder
    over_80_sum_2014?: SortOrderInput | SortOrder
    under_4_sum_2020?: SortOrderInput | SortOrder
    to_80_sum_2020?: SortOrderInput | SortOrder
    over_80_sum_2020?: SortOrderInput | SortOrder
    P20_POP80P?: SortOrderInput | SortOrder
    P20_POP80P_PSEUL?: SortOrderInput | SortOrder
    P20_POP80P_PSEUL_PERCENT?: SortOrderInput | SortOrder
    tee_log?: SortOrderInput | SortOrder
    tee_mob?: SortOrderInput | SortOrder
    precarite_logement?: SortOrderInput | SortOrder
    NA5AZ_sum?: SortOrderInput | SortOrder
    NA5BE_sum?: SortOrderInput | SortOrder
    NA5FZ_sum?: SortOrderInput | SortOrder
    NA5GU_sum?: SortOrderInput | SortOrder
    NA5OQ_sum?: SortOrderInput | SortOrder
    s_geom_cstr_bati?: SortOrderInput | SortOrder
    hauteur?: SortOrderInput | SortOrder
    h_x_s?: SortOrderInput | SortOrder
    densite_bati?: SortOrderInput | SortOrder
    clc_1_artificialise?: SortOrderInput | SortOrder
    clc_2_agricole?: SortOrderInput | SortOrder
    clc_3_foret_semiNaturel?: SortOrderInput | SortOrder
    clc_4_humide?: SortOrderInput | SortOrder
    clc_5_eau?: SortOrderInput | SortOrder
    superf_choro?: SortOrderInput | SortOrder
    _count?: inconfort_thermiqueCountOrderByAggregateInput
    _avg?: inconfort_thermiqueAvgOrderByAggregateInput
    _max?: inconfort_thermiqueMaxOrderByAggregateInput
    _min?: inconfort_thermiqueMinOrderByAggregateInput
    _sum?: inconfort_thermiqueSumOrderByAggregateInput
  }

  export type inconfort_thermiqueScalarWhereWithAggregatesInput = {
    AND?: inconfort_thermiqueScalarWhereWithAggregatesInput | inconfort_thermiqueScalarWhereWithAggregatesInput[]
    OR?: inconfort_thermiqueScalarWhereWithAggregatesInput[]
    NOT?: inconfort_thermiqueScalarWhereWithAggregatesInput | inconfort_thermiqueScalarWhereWithAggregatesInput[]
    index?: BigIntWithAggregatesFilter<"inconfort_thermique"> | bigint | number
    code_geographique?: StringWithAggregatesFilter<"inconfort_thermique"> | string
    libelle_geographique?: StringWithAggregatesFilter<"inconfort_thermique"> | string
    epci?: StringWithAggregatesFilter<"inconfort_thermique"> | string
    libelle_epci?: StringWithAggregatesFilter<"inconfort_thermique"> | string
    departement?: StringWithAggregatesFilter<"inconfort_thermique"> | string
    region?: IntWithAggregatesFilter<"inconfort_thermique"> | number
    age_bati_post06?: FloatNullableWithAggregatesFilter<"inconfort_thermique"> | number | null
    age_bati_91_05?: FloatNullableWithAggregatesFilter<"inconfort_thermique"> | number | null
    age_bati_46_90?: FloatNullableWithAggregatesFilter<"inconfort_thermique"> | number | null
    age_bati_19_45?: FloatNullableWithAggregatesFilter<"inconfort_thermique"> | number | null
    age_bati_pre_19?: FloatNullableWithAggregatesFilter<"inconfort_thermique"> | number | null
    under_4_sum_1968?: StringNullableWithAggregatesFilter<"inconfort_thermique"> | string | null
    to_80_sum_1968?: StringNullableWithAggregatesFilter<"inconfort_thermique"> | string | null
    over_80_sum_1968?: StringNullableWithAggregatesFilter<"inconfort_thermique"> | string | null
    under_4_sum_1975?: StringNullableWithAggregatesFilter<"inconfort_thermique"> | string | null
    to_80_sum_1975?: StringNullableWithAggregatesFilter<"inconfort_thermique"> | string | null
    over_80_sum_1975?: StringNullableWithAggregatesFilter<"inconfort_thermique"> | string | null
    under_4_sum_1982?: StringNullableWithAggregatesFilter<"inconfort_thermique"> | string | null
    to_80_sum_1982?: StringNullableWithAggregatesFilter<"inconfort_thermique"> | string | null
    over_80_sum_1982?: StringNullableWithAggregatesFilter<"inconfort_thermique"> | string | null
    under_4_sum_1990?: StringNullableWithAggregatesFilter<"inconfort_thermique"> | string | null
    to_80_sum_1990?: StringNullableWithAggregatesFilter<"inconfort_thermique"> | string | null
    over_80_sum_1990?: StringNullableWithAggregatesFilter<"inconfort_thermique"> | string | null
    under_4_sum_1999?: StringNullableWithAggregatesFilter<"inconfort_thermique"> | string | null
    to_80_sum_1999?: StringNullableWithAggregatesFilter<"inconfort_thermique"> | string | null
    over_80_sum_1999?: StringNullableWithAggregatesFilter<"inconfort_thermique"> | string | null
    under_4_sum_2009?: StringNullableWithAggregatesFilter<"inconfort_thermique"> | string | null
    to_80_sum_2009?: StringNullableWithAggregatesFilter<"inconfort_thermique"> | string | null
    over_80_sum_2009?: StringNullableWithAggregatesFilter<"inconfort_thermique"> | string | null
    under_4_sum_2014?: StringNullableWithAggregatesFilter<"inconfort_thermique"> | string | null
    to_80_sum_2014?: StringNullableWithAggregatesFilter<"inconfort_thermique"> | string | null
    over_80_sum_2014?: StringNullableWithAggregatesFilter<"inconfort_thermique"> | string | null
    under_4_sum_2020?: StringNullableWithAggregatesFilter<"inconfort_thermique"> | string | null
    to_80_sum_2020?: StringNullableWithAggregatesFilter<"inconfort_thermique"> | string | null
    over_80_sum_2020?: StringNullableWithAggregatesFilter<"inconfort_thermique"> | string | null
    P20_POP80P?: StringNullableWithAggregatesFilter<"inconfort_thermique"> | string | null
    P20_POP80P_PSEUL?: StringNullableWithAggregatesFilter<"inconfort_thermique"> | string | null
    P20_POP80P_PSEUL_PERCENT?: StringNullableWithAggregatesFilter<"inconfort_thermique"> | string | null
    tee_log?: FloatNullableWithAggregatesFilter<"inconfort_thermique"> | number | null
    tee_mob?: FloatNullableWithAggregatesFilter<"inconfort_thermique"> | number | null
    precarite_logement?: FloatNullableWithAggregatesFilter<"inconfort_thermique"> | number | null
    NA5AZ_sum?: FloatNullableWithAggregatesFilter<"inconfort_thermique"> | number | null
    NA5BE_sum?: FloatNullableWithAggregatesFilter<"inconfort_thermique"> | number | null
    NA5FZ_sum?: FloatNullableWithAggregatesFilter<"inconfort_thermique"> | number | null
    NA5GU_sum?: FloatNullableWithAggregatesFilter<"inconfort_thermique"> | number | null
    NA5OQ_sum?: FloatNullableWithAggregatesFilter<"inconfort_thermique"> | number | null
    s_geom_cstr_bati?: FloatNullableWithAggregatesFilter<"inconfort_thermique"> | number | null
    hauteur?: FloatNullableWithAggregatesFilter<"inconfort_thermique"> | number | null
    h_x_s?: FloatNullableWithAggregatesFilter<"inconfort_thermique"> | number | null
    densite_bati?: FloatNullableWithAggregatesFilter<"inconfort_thermique"> | number | null
    clc_1_artificialise?: FloatNullableWithAggregatesFilter<"inconfort_thermique"> | number | null
    clc_2_agricole?: FloatNullableWithAggregatesFilter<"inconfort_thermique"> | number | null
    clc_3_foret_semiNaturel?: FloatNullableWithAggregatesFilter<"inconfort_thermique"> | number | null
    clc_4_humide?: FloatNullableWithAggregatesFilter<"inconfort_thermique"> | number | null
    clc_5_eau?: FloatNullableWithAggregatesFilter<"inconfort_thermique"> | number | null
    superf_choro?: FloatNullableWithAggregatesFilter<"inconfort_thermique"> | number | null
  }

  export type clc_epciWhereInput = {
    AND?: clc_epciWhereInput | clc_epciWhereInput[]
    OR?: clc_epciWhereInput[]
    NOT?: clc_epciWhereInput | clc_epciWhereInput[]
    pk?: IntFilter<"clc_epci"> | number
    legend?: StringNullableFilter<"clc_epci"> | string | null
    epci_code?: IntNullableFilter<"clc_epci"> | number | null
  }

  export type clc_epciOrderByWithRelationInput = {
    pk?: SortOrder
    legend?: SortOrderInput | SortOrder
    epci_code?: SortOrderInput | SortOrder
  }

  export type clc_epciWhereUniqueInput = Prisma.AtLeast<{
    pk?: number
    AND?: clc_epciWhereInput | clc_epciWhereInput[]
    OR?: clc_epciWhereInput[]
    NOT?: clc_epciWhereInput | clc_epciWhereInput[]
    legend?: StringNullableFilter<"clc_epci"> | string | null
    epci_code?: IntNullableFilter<"clc_epci"> | number | null
  }, "pk">

  export type clc_epciOrderByWithAggregationInput = {
    pk?: SortOrder
    legend?: SortOrderInput | SortOrder
    epci_code?: SortOrderInput | SortOrder
    _count?: clc_epciCountOrderByAggregateInput
    _avg?: clc_epciAvgOrderByAggregateInput
    _max?: clc_epciMaxOrderByAggregateInput
    _min?: clc_epciMinOrderByAggregateInput
    _sum?: clc_epciSumOrderByAggregateInput
  }

  export type clc_epciScalarWhereWithAggregatesInput = {
    AND?: clc_epciScalarWhereWithAggregatesInput | clc_epciScalarWhereWithAggregatesInput[]
    OR?: clc_epciScalarWhereWithAggregatesInput[]
    NOT?: clc_epciScalarWhereWithAggregatesInput | clc_epciScalarWhereWithAggregatesInput[]
    pk?: IntWithAggregatesFilter<"clc_epci"> | number
    legend?: StringNullableWithAggregatesFilter<"clc_epci"> | string | null
    epci_code?: IntNullableWithAggregatesFilter<"clc_epci"> | number | null
  }

  export type collectivites_searchbarWhereInput = {
    AND?: collectivites_searchbarWhereInput | collectivites_searchbarWhereInput[]
    OR?: collectivites_searchbarWhereInput[]
    NOT?: collectivites_searchbarWhereInput | collectivites_searchbarWhereInput[]
    index?: BigIntFilter<"collectivites_searchbar"> | bigint | number
    code_commune?: StringNullableFilter<"collectivites_searchbar"> | string | null
    coordinates?: StringNullableFilter<"collectivites_searchbar"> | string | null
    libelle_commune?: StringNullableFilter<"collectivites_searchbar"> | string | null
    code_epci?: StringFilter<"collectivites_searchbar"> | string
    libelle_epci?: StringFilter<"collectivites_searchbar"> | string
    departement?: StringFilter<"collectivites_searchbar"> | string
    region?: StringFilter<"collectivites_searchbar"> | string
    search_code?: StringFilter<"collectivites_searchbar"> | string
    search_libelle?: StringFilter<"collectivites_searchbar"> | string
  }

  export type collectivites_searchbarOrderByWithRelationInput = {
    index?: SortOrder
    code_commune?: SortOrderInput | SortOrder
    coordinates?: SortOrderInput | SortOrder
    libelle_commune?: SortOrderInput | SortOrder
    code_epci?: SortOrder
    libelle_epci?: SortOrder
    departement?: SortOrder
    region?: SortOrder
    search_code?: SortOrder
    search_libelle?: SortOrder
  }

  export type collectivites_searchbarWhereUniqueInput = Prisma.AtLeast<{
    index?: bigint | number
    AND?: collectivites_searchbarWhereInput | collectivites_searchbarWhereInput[]
    OR?: collectivites_searchbarWhereInput[]
    NOT?: collectivites_searchbarWhereInput | collectivites_searchbarWhereInput[]
    code_commune?: StringNullableFilter<"collectivites_searchbar"> | string | null
    coordinates?: StringNullableFilter<"collectivites_searchbar"> | string | null
    libelle_commune?: StringNullableFilter<"collectivites_searchbar"> | string | null
    code_epci?: StringFilter<"collectivites_searchbar"> | string
    libelle_epci?: StringFilter<"collectivites_searchbar"> | string
    departement?: StringFilter<"collectivites_searchbar"> | string
    region?: StringFilter<"collectivites_searchbar"> | string
    search_code?: StringFilter<"collectivites_searchbar"> | string
    search_libelle?: StringFilter<"collectivites_searchbar"> | string
  }, "index">

  export type collectivites_searchbarOrderByWithAggregationInput = {
    index?: SortOrder
    code_commune?: SortOrderInput | SortOrder
    coordinates?: SortOrderInput | SortOrder
    libelle_commune?: SortOrderInput | SortOrder
    code_epci?: SortOrder
    libelle_epci?: SortOrder
    departement?: SortOrder
    region?: SortOrder
    search_code?: SortOrder
    search_libelle?: SortOrder
    _count?: collectivites_searchbarCountOrderByAggregateInput
    _avg?: collectivites_searchbarAvgOrderByAggregateInput
    _max?: collectivites_searchbarMaxOrderByAggregateInput
    _min?: collectivites_searchbarMinOrderByAggregateInput
    _sum?: collectivites_searchbarSumOrderByAggregateInput
  }

  export type collectivites_searchbarScalarWhereWithAggregatesInput = {
    AND?: collectivites_searchbarScalarWhereWithAggregatesInput | collectivites_searchbarScalarWhereWithAggregatesInput[]
    OR?: collectivites_searchbarScalarWhereWithAggregatesInput[]
    NOT?: collectivites_searchbarScalarWhereWithAggregatesInput | collectivites_searchbarScalarWhereWithAggregatesInput[]
    index?: BigIntWithAggregatesFilter<"collectivites_searchbar"> | bigint | number
    code_commune?: StringNullableWithAggregatesFilter<"collectivites_searchbar"> | string | null
    coordinates?: StringNullableWithAggregatesFilter<"collectivites_searchbar"> | string | null
    libelle_commune?: StringNullableWithAggregatesFilter<"collectivites_searchbar"> | string | null
    code_epci?: StringWithAggregatesFilter<"collectivites_searchbar"> | string
    libelle_epci?: StringWithAggregatesFilter<"collectivites_searchbar"> | string
    departement?: StringWithAggregatesFilter<"collectivites_searchbar"> | string
    region?: StringWithAggregatesFilter<"collectivites_searchbar"> | string
    search_code?: StringWithAggregatesFilter<"collectivites_searchbar"> | string
    search_libelle?: StringWithAggregatesFilter<"collectivites_searchbar"> | string
  }

  export type biodiversiteWhereInput = {
    AND?: biodiversiteWhereInput | biodiversiteWhereInput[]
    OR?: biodiversiteWhereInput[]
    NOT?: biodiversiteWhereInput | biodiversiteWhereInput[]
    index?: BigIntFilter<"biodiversite"> | bigint | number
    code_geographique?: StringNullableFilter<"biodiversite"> | string | null
    type_touristique?: StringNullableFilter<"biodiversite"> | string | null
    libelle_geographique?: StringNullableFilter<"biodiversite"> | string | null
    epci?: StringNullableFilter<"biodiversite"> | string | null
    libelle_epci?: StringNullableFilter<"biodiversite"> | string | null
    departement?: StringNullableFilter<"biodiversite"> | string | null
    region?: FloatNullableFilter<"biodiversite"> | number | null
  }

  export type biodiversiteOrderByWithRelationInput = {
    index?: SortOrder
    code_geographique?: SortOrderInput | SortOrder
    type_touristique?: SortOrderInput | SortOrder
    libelle_geographique?: SortOrderInput | SortOrder
    epci?: SortOrderInput | SortOrder
    libelle_epci?: SortOrderInput | SortOrder
    departement?: SortOrderInput | SortOrder
    region?: SortOrderInput | SortOrder
  }

  export type biodiversiteWhereUniqueInput = Prisma.AtLeast<{
    index?: bigint | number
    AND?: biodiversiteWhereInput | biodiversiteWhereInput[]
    OR?: biodiversiteWhereInput[]
    NOT?: biodiversiteWhereInput | biodiversiteWhereInput[]
    code_geographique?: StringNullableFilter<"biodiversite"> | string | null
    type_touristique?: StringNullableFilter<"biodiversite"> | string | null
    libelle_geographique?: StringNullableFilter<"biodiversite"> | string | null
    epci?: StringNullableFilter<"biodiversite"> | string | null
    libelle_epci?: StringNullableFilter<"biodiversite"> | string | null
    departement?: StringNullableFilter<"biodiversite"> | string | null
    region?: FloatNullableFilter<"biodiversite"> | number | null
  }, "index">

  export type biodiversiteOrderByWithAggregationInput = {
    index?: SortOrder
    code_geographique?: SortOrderInput | SortOrder
    type_touristique?: SortOrderInput | SortOrder
    libelle_geographique?: SortOrderInput | SortOrder
    epci?: SortOrderInput | SortOrder
    libelle_epci?: SortOrderInput | SortOrder
    departement?: SortOrderInput | SortOrder
    region?: SortOrderInput | SortOrder
    _count?: biodiversiteCountOrderByAggregateInput
    _avg?: biodiversiteAvgOrderByAggregateInput
    _max?: biodiversiteMaxOrderByAggregateInput
    _min?: biodiversiteMinOrderByAggregateInput
    _sum?: biodiversiteSumOrderByAggregateInput
  }

  export type biodiversiteScalarWhereWithAggregatesInput = {
    AND?: biodiversiteScalarWhereWithAggregatesInput | biodiversiteScalarWhereWithAggregatesInput[]
    OR?: biodiversiteScalarWhereWithAggregatesInput[]
    NOT?: biodiversiteScalarWhereWithAggregatesInput | biodiversiteScalarWhereWithAggregatesInput[]
    index?: BigIntWithAggregatesFilter<"biodiversite"> | bigint | number
    code_geographique?: StringNullableWithAggregatesFilter<"biodiversite"> | string | null
    type_touristique?: StringNullableWithAggregatesFilter<"biodiversite"> | string | null
    libelle_geographique?: StringNullableWithAggregatesFilter<"biodiversite"> | string | null
    epci?: StringNullableWithAggregatesFilter<"biodiversite"> | string | null
    libelle_epci?: StringNullableWithAggregatesFilter<"biodiversite"> | string | null
    departement?: StringNullableWithAggregatesFilter<"biodiversite"> | string | null
    region?: FloatNullableWithAggregatesFilter<"biodiversite"> | number | null
  }

  export type gestion_risquesWhereInput = {
    AND?: gestion_risquesWhereInput | gestion_risquesWhereInput[]
    OR?: gestion_risquesWhereInput[]
    NOT?: gestion_risquesWhereInput | gestion_risquesWhereInput[]
    index?: BigIntFilter<"gestion_risques"> | bigint | number
    code_geographique?: StringNullableFilter<"gestion_risques"> | string | null
    lib_risque_jo?: StringNullableFilter<"gestion_risques"> | string | null
    dat_pub_arrete?: StringNullableFilter<"gestion_risques"> | string | null
    libelle_geographique?: StringNullableFilter<"gestion_risques"> | string | null
    epci?: StringNullableFilter<"gestion_risques"> | string | null
    libelle_epci?: StringNullableFilter<"gestion_risques"> | string | null
    departement?: StringNullableFilter<"gestion_risques"> | string | null
    region?: FloatNullableFilter<"gestion_risques"> | number | null
  }

  export type gestion_risquesOrderByWithRelationInput = {
    index?: SortOrder
    code_geographique?: SortOrderInput | SortOrder
    lib_risque_jo?: SortOrderInput | SortOrder
    dat_pub_arrete?: SortOrderInput | SortOrder
    libelle_geographique?: SortOrderInput | SortOrder
    epci?: SortOrderInput | SortOrder
    libelle_epci?: SortOrderInput | SortOrder
    departement?: SortOrderInput | SortOrder
    region?: SortOrderInput | SortOrder
  }

  export type gestion_risquesWhereUniqueInput = Prisma.AtLeast<{
    index?: bigint | number
    AND?: gestion_risquesWhereInput | gestion_risquesWhereInput[]
    OR?: gestion_risquesWhereInput[]
    NOT?: gestion_risquesWhereInput | gestion_risquesWhereInput[]
    code_geographique?: StringNullableFilter<"gestion_risques"> | string | null
    lib_risque_jo?: StringNullableFilter<"gestion_risques"> | string | null
    dat_pub_arrete?: StringNullableFilter<"gestion_risques"> | string | null
    libelle_geographique?: StringNullableFilter<"gestion_risques"> | string | null
    epci?: StringNullableFilter<"gestion_risques"> | string | null
    libelle_epci?: StringNullableFilter<"gestion_risques"> | string | null
    departement?: StringNullableFilter<"gestion_risques"> | string | null
    region?: FloatNullableFilter<"gestion_risques"> | number | null
  }, "index">

  export type gestion_risquesOrderByWithAggregationInput = {
    index?: SortOrder
    code_geographique?: SortOrderInput | SortOrder
    lib_risque_jo?: SortOrderInput | SortOrder
    dat_pub_arrete?: SortOrderInput | SortOrder
    libelle_geographique?: SortOrderInput | SortOrder
    epci?: SortOrderInput | SortOrder
    libelle_epci?: SortOrderInput | SortOrder
    departement?: SortOrderInput | SortOrder
    region?: SortOrderInput | SortOrder
    _count?: gestion_risquesCountOrderByAggregateInput
    _avg?: gestion_risquesAvgOrderByAggregateInput
    _max?: gestion_risquesMaxOrderByAggregateInput
    _min?: gestion_risquesMinOrderByAggregateInput
    _sum?: gestion_risquesSumOrderByAggregateInput
  }

  export type gestion_risquesScalarWhereWithAggregatesInput = {
    AND?: gestion_risquesScalarWhereWithAggregatesInput | gestion_risquesScalarWhereWithAggregatesInput[]
    OR?: gestion_risquesScalarWhereWithAggregatesInput[]
    NOT?: gestion_risquesScalarWhereWithAggregatesInput | gestion_risquesScalarWhereWithAggregatesInput[]
    index?: BigIntWithAggregatesFilter<"gestion_risques"> | bigint | number
    code_geographique?: StringNullableWithAggregatesFilter<"gestion_risques"> | string | null
    lib_risque_jo?: StringNullableWithAggregatesFilter<"gestion_risques"> | string | null
    dat_pub_arrete?: StringNullableWithAggregatesFilter<"gestion_risques"> | string | null
    libelle_geographique?: StringNullableWithAggregatesFilter<"gestion_risques"> | string | null
    epci?: StringNullableWithAggregatesFilter<"gestion_risques"> | string | null
    libelle_epci?: StringNullableWithAggregatesFilter<"gestion_risques"> | string | null
    departement?: StringNullableWithAggregatesFilter<"gestion_risques"> | string | null
    region?: FloatNullableWithAggregatesFilter<"gestion_risques"> | number | null
  }

  export type communes_dromWhereInput = {
    AND?: communes_dromWhereInput | communes_dromWhereInput[]
    OR?: communes_dromWhereInput[]
    NOT?: communes_dromWhereInput | communes_dromWhereInput[]
    pk?: IntFilter<"communes_drom"> | number
    code_commune?: StringFilter<"communes_drom"> | string
    libelle_commune?: StringFilter<"communes_drom"> | string
    epci?: StringFilter<"communes_drom"> | string
    libelle_epci?: StringFilter<"communes_drom"> | string
    coordinates?: StringFilter<"communes_drom"> | string
    densite_bati?: FloatNullableFilter<"communes_drom"> | number | null
    precarite_logement?: FloatNullableFilter<"communes_drom"> | number | null
    surface?: FloatNullableFilter<"communes_drom"> | number | null
  }

  export type communes_dromOrderByWithRelationInput = {
    pk?: SortOrder
    code_commune?: SortOrder
    libelle_commune?: SortOrder
    epci?: SortOrder
    libelle_epci?: SortOrder
    coordinates?: SortOrder
    densite_bati?: SortOrderInput | SortOrder
    precarite_logement?: SortOrderInput | SortOrder
    surface?: SortOrderInput | SortOrder
  }

  export type communes_dromWhereUniqueInput = Prisma.AtLeast<{
    pk?: number
    AND?: communes_dromWhereInput | communes_dromWhereInput[]
    OR?: communes_dromWhereInput[]
    NOT?: communes_dromWhereInput | communes_dromWhereInput[]
    code_commune?: StringFilter<"communes_drom"> | string
    libelle_commune?: StringFilter<"communes_drom"> | string
    epci?: StringFilter<"communes_drom"> | string
    libelle_epci?: StringFilter<"communes_drom"> | string
    coordinates?: StringFilter<"communes_drom"> | string
    densite_bati?: FloatNullableFilter<"communes_drom"> | number | null
    precarite_logement?: FloatNullableFilter<"communes_drom"> | number | null
    surface?: FloatNullableFilter<"communes_drom"> | number | null
  }, "pk">

  export type communes_dromOrderByWithAggregationInput = {
    pk?: SortOrder
    code_commune?: SortOrder
    libelle_commune?: SortOrder
    epci?: SortOrder
    libelle_epci?: SortOrder
    coordinates?: SortOrder
    densite_bati?: SortOrderInput | SortOrder
    precarite_logement?: SortOrderInput | SortOrder
    surface?: SortOrderInput | SortOrder
    _count?: communes_dromCountOrderByAggregateInput
    _avg?: communes_dromAvgOrderByAggregateInput
    _max?: communes_dromMaxOrderByAggregateInput
    _min?: communes_dromMinOrderByAggregateInput
    _sum?: communes_dromSumOrderByAggregateInput
  }

  export type communes_dromScalarWhereWithAggregatesInput = {
    AND?: communes_dromScalarWhereWithAggregatesInput | communes_dromScalarWhereWithAggregatesInput[]
    OR?: communes_dromScalarWhereWithAggregatesInput[]
    NOT?: communes_dromScalarWhereWithAggregatesInput | communes_dromScalarWhereWithAggregatesInput[]
    pk?: IntWithAggregatesFilter<"communes_drom"> | number
    code_commune?: StringWithAggregatesFilter<"communes_drom"> | string
    libelle_commune?: StringWithAggregatesFilter<"communes_drom"> | string
    epci?: StringWithAggregatesFilter<"communes_drom"> | string
    libelle_epci?: StringWithAggregatesFilter<"communes_drom"> | string
    coordinates?: StringWithAggregatesFilter<"communes_drom"> | string
    densite_bati?: FloatNullableWithAggregatesFilter<"communes_drom"> | number | null
    precarite_logement?: FloatNullableWithAggregatesFilter<"communes_drom"> | number | null
    surface?: FloatNullableWithAggregatesFilter<"communes_drom"> | number | null
  }

  export type ressources_eauWhereInput = {
    AND?: ressources_eauWhereInput | ressources_eauWhereInput[]
    OR?: ressources_eauWhereInput[]
    NOT?: ressources_eauWhereInput | ressources_eauWhereInput[]
    index?: BigIntFilter<"ressources_eau"> | bigint | number
    code_geographique?: StringFilter<"ressources_eau"> | string
    LIBELLE_SOUS_CHAMP?: StringNullableFilter<"ressources_eau"> | string | null
    SOUS_CHAMP?: StringNullableFilter<"ressources_eau"> | string | null
    A2020?: FloatNullableFilter<"ressources_eau"> | number | null
    A2019?: FloatNullableFilter<"ressources_eau"> | number | null
    A2018?: FloatNullableFilter<"ressources_eau"> | number | null
    A2017?: FloatNullableFilter<"ressources_eau"> | number | null
    A2016?: FloatNullableFilter<"ressources_eau"> | number | null
    A2015?: FloatNullableFilter<"ressources_eau"> | number | null
    A2014?: FloatNullableFilter<"ressources_eau"> | number | null
    A2013?: FloatNullableFilter<"ressources_eau"> | number | null
    A2012?: FloatNullableFilter<"ressources_eau"> | number | null
    A2011?: FloatNullableFilter<"ressources_eau"> | number | null
    A2010?: FloatNullableFilter<"ressources_eau"> | number | null
    A2009?: FloatNullableFilter<"ressources_eau"> | number | null
    A2008?: FloatNullableFilter<"ressources_eau"> | number | null
    libelle_geographique?: StringNullableFilter<"ressources_eau"> | string | null
    epci?: StringNullableFilter<"ressources_eau"> | string | null
    libelle_epci?: StringNullableFilter<"ressources_eau"> | string | null
    departement?: StringNullableFilter<"ressources_eau"> | string | null
    region?: FloatNullableFilter<"ressources_eau"> | number | null
  }

  export type ressources_eauOrderByWithRelationInput = {
    index?: SortOrder
    code_geographique?: SortOrder
    LIBELLE_SOUS_CHAMP?: SortOrderInput | SortOrder
    SOUS_CHAMP?: SortOrderInput | SortOrder
    A2020?: SortOrderInput | SortOrder
    A2019?: SortOrderInput | SortOrder
    A2018?: SortOrderInput | SortOrder
    A2017?: SortOrderInput | SortOrder
    A2016?: SortOrderInput | SortOrder
    A2015?: SortOrderInput | SortOrder
    A2014?: SortOrderInput | SortOrder
    A2013?: SortOrderInput | SortOrder
    A2012?: SortOrderInput | SortOrder
    A2011?: SortOrderInput | SortOrder
    A2010?: SortOrderInput | SortOrder
    A2009?: SortOrderInput | SortOrder
    A2008?: SortOrderInput | SortOrder
    libelle_geographique?: SortOrderInput | SortOrder
    epci?: SortOrderInput | SortOrder
    libelle_epci?: SortOrderInput | SortOrder
    departement?: SortOrderInput | SortOrder
    region?: SortOrderInput | SortOrder
  }

  export type ressources_eauWhereUniqueInput = Prisma.AtLeast<{
    index?: bigint | number
    AND?: ressources_eauWhereInput | ressources_eauWhereInput[]
    OR?: ressources_eauWhereInput[]
    NOT?: ressources_eauWhereInput | ressources_eauWhereInput[]
    code_geographique?: StringFilter<"ressources_eau"> | string
    LIBELLE_SOUS_CHAMP?: StringNullableFilter<"ressources_eau"> | string | null
    SOUS_CHAMP?: StringNullableFilter<"ressources_eau"> | string | null
    A2020?: FloatNullableFilter<"ressources_eau"> | number | null
    A2019?: FloatNullableFilter<"ressources_eau"> | number | null
    A2018?: FloatNullableFilter<"ressources_eau"> | number | null
    A2017?: FloatNullableFilter<"ressources_eau"> | number | null
    A2016?: FloatNullableFilter<"ressources_eau"> | number | null
    A2015?: FloatNullableFilter<"ressources_eau"> | number | null
    A2014?: FloatNullableFilter<"ressources_eau"> | number | null
    A2013?: FloatNullableFilter<"ressources_eau"> | number | null
    A2012?: FloatNullableFilter<"ressources_eau"> | number | null
    A2011?: FloatNullableFilter<"ressources_eau"> | number | null
    A2010?: FloatNullableFilter<"ressources_eau"> | number | null
    A2009?: FloatNullableFilter<"ressources_eau"> | number | null
    A2008?: FloatNullableFilter<"ressources_eau"> | number | null
    libelle_geographique?: StringNullableFilter<"ressources_eau"> | string | null
    epci?: StringNullableFilter<"ressources_eau"> | string | null
    libelle_epci?: StringNullableFilter<"ressources_eau"> | string | null
    departement?: StringNullableFilter<"ressources_eau"> | string | null
    region?: FloatNullableFilter<"ressources_eau"> | number | null
  }, "index">

  export type ressources_eauOrderByWithAggregationInput = {
    index?: SortOrder
    code_geographique?: SortOrder
    LIBELLE_SOUS_CHAMP?: SortOrderInput | SortOrder
    SOUS_CHAMP?: SortOrderInput | SortOrder
    A2020?: SortOrderInput | SortOrder
    A2019?: SortOrderInput | SortOrder
    A2018?: SortOrderInput | SortOrder
    A2017?: SortOrderInput | SortOrder
    A2016?: SortOrderInput | SortOrder
    A2015?: SortOrderInput | SortOrder
    A2014?: SortOrderInput | SortOrder
    A2013?: SortOrderInput | SortOrder
    A2012?: SortOrderInput | SortOrder
    A2011?: SortOrderInput | SortOrder
    A2010?: SortOrderInput | SortOrder
    A2009?: SortOrderInput | SortOrder
    A2008?: SortOrderInput | SortOrder
    libelle_geographique?: SortOrderInput | SortOrder
    epci?: SortOrderInput | SortOrder
    libelle_epci?: SortOrderInput | SortOrder
    departement?: SortOrderInput | SortOrder
    region?: SortOrderInput | SortOrder
    _count?: ressources_eauCountOrderByAggregateInput
    _avg?: ressources_eauAvgOrderByAggregateInput
    _max?: ressources_eauMaxOrderByAggregateInput
    _min?: ressources_eauMinOrderByAggregateInput
    _sum?: ressources_eauSumOrderByAggregateInput
  }

  export type ressources_eauScalarWhereWithAggregatesInput = {
    AND?: ressources_eauScalarWhereWithAggregatesInput | ressources_eauScalarWhereWithAggregatesInput[]
    OR?: ressources_eauScalarWhereWithAggregatesInput[]
    NOT?: ressources_eauScalarWhereWithAggregatesInput | ressources_eauScalarWhereWithAggregatesInput[]
    index?: BigIntWithAggregatesFilter<"ressources_eau"> | bigint | number
    code_geographique?: StringWithAggregatesFilter<"ressources_eau"> | string
    LIBELLE_SOUS_CHAMP?: StringNullableWithAggregatesFilter<"ressources_eau"> | string | null
    SOUS_CHAMP?: StringNullableWithAggregatesFilter<"ressources_eau"> | string | null
    A2020?: FloatNullableWithAggregatesFilter<"ressources_eau"> | number | null
    A2019?: FloatNullableWithAggregatesFilter<"ressources_eau"> | number | null
    A2018?: FloatNullableWithAggregatesFilter<"ressources_eau"> | number | null
    A2017?: FloatNullableWithAggregatesFilter<"ressources_eau"> | number | null
    A2016?: FloatNullableWithAggregatesFilter<"ressources_eau"> | number | null
    A2015?: FloatNullableWithAggregatesFilter<"ressources_eau"> | number | null
    A2014?: FloatNullableWithAggregatesFilter<"ressources_eau"> | number | null
    A2013?: FloatNullableWithAggregatesFilter<"ressources_eau"> | number | null
    A2012?: FloatNullableWithAggregatesFilter<"ressources_eau"> | number | null
    A2011?: FloatNullableWithAggregatesFilter<"ressources_eau"> | number | null
    A2010?: FloatNullableWithAggregatesFilter<"ressources_eau"> | number | null
    A2009?: FloatNullableWithAggregatesFilter<"ressources_eau"> | number | null
    A2008?: FloatNullableWithAggregatesFilter<"ressources_eau"> | number | null
    libelle_geographique?: StringNullableWithAggregatesFilter<"ressources_eau"> | string | null
    epci?: StringNullableWithAggregatesFilter<"ressources_eau"> | string | null
    libelle_epci?: StringNullableWithAggregatesFilter<"ressources_eau"> | string | null
    departement?: StringNullableWithAggregatesFilter<"ressources_eau"> | string | null
    region?: FloatNullableWithAggregatesFilter<"ressources_eau"> | number | null
  }

  export type agriculture_bioWhereInput = {
    AND?: agriculture_bioWhereInput | agriculture_bioWhereInput[]
    OR?: agriculture_bioWhereInput[]
    NOT?: agriculture_bioWhereInput | agriculture_bioWhereInput[]
    index?: BigIntFilter<"agriculture_bio"> | bigint | number
    epci?: StringFilter<"agriculture_bio"> | string
    libelle_epci?: StringFilter<"agriculture_bio"> | string
    VARIABLE?: StringFilter<"agriculture_bio"> | string
    LIBELLE_SOUS_CHAMP?: StringNullableFilter<"agriculture_bio"> | string | null
    surface_2022?: FloatFilter<"agriculture_bio"> | number
    surface_2021?: FloatFilter<"agriculture_bio"> | number
    surface_2020?: FloatFilter<"agriculture_bio"> | number
    surface_2019?: FloatFilter<"agriculture_bio"> | number
    nombre_2022?: FloatFilter<"agriculture_bio"> | number
    nombre_2021?: FloatFilter<"agriculture_bio"> | number
    nombre_2020?: FloatFilter<"agriculture_bio"> | number
    nombre_2019?: FloatFilter<"agriculture_bio"> | number
  }

  export type agriculture_bioOrderByWithRelationInput = {
    index?: SortOrder
    epci?: SortOrder
    libelle_epci?: SortOrder
    VARIABLE?: SortOrder
    LIBELLE_SOUS_CHAMP?: SortOrderInput | SortOrder
    surface_2022?: SortOrder
    surface_2021?: SortOrder
    surface_2020?: SortOrder
    surface_2019?: SortOrder
    nombre_2022?: SortOrder
    nombre_2021?: SortOrder
    nombre_2020?: SortOrder
    nombre_2019?: SortOrder
  }

  export type agriculture_bioWhereUniqueInput = Prisma.AtLeast<{
    index?: bigint | number
    AND?: agriculture_bioWhereInput | agriculture_bioWhereInput[]
    OR?: agriculture_bioWhereInput[]
    NOT?: agriculture_bioWhereInput | agriculture_bioWhereInput[]
    epci?: StringFilter<"agriculture_bio"> | string
    libelle_epci?: StringFilter<"agriculture_bio"> | string
    VARIABLE?: StringFilter<"agriculture_bio"> | string
    LIBELLE_SOUS_CHAMP?: StringNullableFilter<"agriculture_bio"> | string | null
    surface_2022?: FloatFilter<"agriculture_bio"> | number
    surface_2021?: FloatFilter<"agriculture_bio"> | number
    surface_2020?: FloatFilter<"agriculture_bio"> | number
    surface_2019?: FloatFilter<"agriculture_bio"> | number
    nombre_2022?: FloatFilter<"agriculture_bio"> | number
    nombre_2021?: FloatFilter<"agriculture_bio"> | number
    nombre_2020?: FloatFilter<"agriculture_bio"> | number
    nombre_2019?: FloatFilter<"agriculture_bio"> | number
  }, "index">

  export type agriculture_bioOrderByWithAggregationInput = {
    index?: SortOrder
    epci?: SortOrder
    libelle_epci?: SortOrder
    VARIABLE?: SortOrder
    LIBELLE_SOUS_CHAMP?: SortOrderInput | SortOrder
    surface_2022?: SortOrder
    surface_2021?: SortOrder
    surface_2020?: SortOrder
    surface_2019?: SortOrder
    nombre_2022?: SortOrder
    nombre_2021?: SortOrder
    nombre_2020?: SortOrder
    nombre_2019?: SortOrder
    _count?: agriculture_bioCountOrderByAggregateInput
    _avg?: agriculture_bioAvgOrderByAggregateInput
    _max?: agriculture_bioMaxOrderByAggregateInput
    _min?: agriculture_bioMinOrderByAggregateInput
    _sum?: agriculture_bioSumOrderByAggregateInput
  }

  export type agriculture_bioScalarWhereWithAggregatesInput = {
    AND?: agriculture_bioScalarWhereWithAggregatesInput | agriculture_bioScalarWhereWithAggregatesInput[]
    OR?: agriculture_bioScalarWhereWithAggregatesInput[]
    NOT?: agriculture_bioScalarWhereWithAggregatesInput | agriculture_bioScalarWhereWithAggregatesInput[]
    index?: BigIntWithAggregatesFilter<"agriculture_bio"> | bigint | number
    epci?: StringWithAggregatesFilter<"agriculture_bio"> | string
    libelle_epci?: StringWithAggregatesFilter<"agriculture_bio"> | string
    VARIABLE?: StringWithAggregatesFilter<"agriculture_bio"> | string
    LIBELLE_SOUS_CHAMP?: StringNullableWithAggregatesFilter<"agriculture_bio"> | string | null
    surface_2022?: FloatWithAggregatesFilter<"agriculture_bio"> | number
    surface_2021?: FloatWithAggregatesFilter<"agriculture_bio"> | number
    surface_2020?: FloatWithAggregatesFilter<"agriculture_bio"> | number
    surface_2019?: FloatWithAggregatesFilter<"agriculture_bio"> | number
    nombre_2022?: FloatWithAggregatesFilter<"agriculture_bio"> | number
    nombre_2021?: FloatWithAggregatesFilter<"agriculture_bio"> | number
    nombre_2020?: FloatWithAggregatesFilter<"agriculture_bio"> | number
    nombre_2019?: FloatWithAggregatesFilter<"agriculture_bio"> | number
  }

  export type erosion_cotiereWhereInput = {
    AND?: erosion_cotiereWhereInput | erosion_cotiereWhereInput[]
    OR?: erosion_cotiereWhereInput[]
    NOT?: erosion_cotiereWhereInput | erosion_cotiereWhereInput[]
    pk?: IntFilter<"erosion_cotiere"> | number
    taux?: FloatFilter<"erosion_cotiere"> | number
    duree?: FloatFilter<"erosion_cotiere"> | number
    tdc_ancien?: BigIntFilter<"erosion_cotiere"> | bigint | number
    tdc_rec?: BigIntFilter<"erosion_cotiere"> | bigint | number
  }

  export type erosion_cotiereOrderByWithRelationInput = {
    pk?: SortOrder
    taux?: SortOrder
    duree?: SortOrder
    tdc_ancien?: SortOrder
    tdc_rec?: SortOrder
  }

  export type erosion_cotiereWhereUniqueInput = Prisma.AtLeast<{
    pk?: number
    AND?: erosion_cotiereWhereInput | erosion_cotiereWhereInput[]
    OR?: erosion_cotiereWhereInput[]
    NOT?: erosion_cotiereWhereInput | erosion_cotiereWhereInput[]
    taux?: FloatFilter<"erosion_cotiere"> | number
    duree?: FloatFilter<"erosion_cotiere"> | number
    tdc_ancien?: BigIntFilter<"erosion_cotiere"> | bigint | number
    tdc_rec?: BigIntFilter<"erosion_cotiere"> | bigint | number
  }, "pk">

  export type erosion_cotiereOrderByWithAggregationInput = {
    pk?: SortOrder
    taux?: SortOrder
    duree?: SortOrder
    tdc_ancien?: SortOrder
    tdc_rec?: SortOrder
    _count?: erosion_cotiereCountOrderByAggregateInput
    _avg?: erosion_cotiereAvgOrderByAggregateInput
    _max?: erosion_cotiereMaxOrderByAggregateInput
    _min?: erosion_cotiereMinOrderByAggregateInput
    _sum?: erosion_cotiereSumOrderByAggregateInput
  }

  export type erosion_cotiereScalarWhereWithAggregatesInput = {
    AND?: erosion_cotiereScalarWhereWithAggregatesInput | erosion_cotiereScalarWhereWithAggregatesInput[]
    OR?: erosion_cotiereScalarWhereWithAggregatesInput[]
    NOT?: erosion_cotiereScalarWhereWithAggregatesInput | erosion_cotiereScalarWhereWithAggregatesInput[]
    pk?: IntWithAggregatesFilter<"erosion_cotiere"> | number
    taux?: FloatWithAggregatesFilter<"erosion_cotiere"> | number
    duree?: FloatWithAggregatesFilter<"erosion_cotiere"> | number
    tdc_ancien?: BigIntWithAggregatesFilter<"erosion_cotiere"> | bigint | number
    tdc_rec?: BigIntWithAggregatesFilter<"erosion_cotiere"> | bigint | number
  }

  export type epciWhereInput = {
    AND?: epciWhereInput | epciWhereInput[]
    OR?: epciWhereInput[]
    NOT?: epciWhereInput | epciWhereInput[]
    pk?: IntFilter<"epci"> | number
    epci_code?: StringFilter<"epci"> | string
  }

  export type epciOrderByWithRelationInput = {
    pk?: SortOrder
    epci_code?: SortOrder
  }

  export type epciWhereUniqueInput = Prisma.AtLeast<{
    pk?: number
    AND?: epciWhereInput | epciWhereInput[]
    OR?: epciWhereInput[]
    NOT?: epciWhereInput | epciWhereInput[]
    epci_code?: StringFilter<"epci"> | string
  }, "pk">

  export type epciOrderByWithAggregationInput = {
    pk?: SortOrder
    epci_code?: SortOrder
    _count?: epciCountOrderByAggregateInput
    _avg?: epciAvgOrderByAggregateInput
    _max?: epciMaxOrderByAggregateInput
    _min?: epciMinOrderByAggregateInput
    _sum?: epciSumOrderByAggregateInput
  }

  export type epciScalarWhereWithAggregatesInput = {
    AND?: epciScalarWhereWithAggregatesInput | epciScalarWhereWithAggregatesInput[]
    OR?: epciScalarWhereWithAggregatesInput[]
    NOT?: epciScalarWhereWithAggregatesInput | epciScalarWhereWithAggregatesInput[]
    pk?: IntWithAggregatesFilter<"epci"> | number
    epci_code?: StringWithAggregatesFilter<"epci"> | string
  }

  export type surfaces_protegeesWhereInput = {
    AND?: surfaces_protegeesWhereInput | surfaces_protegeesWhereInput[]
    OR?: surfaces_protegeesWhereInput[]
    NOT?: surfaces_protegeesWhereInput | surfaces_protegeesWhereInput[]
    index?: BigIntFilter<"surfaces_protegees"> | bigint | number
    code_geographique?: StringFilter<"surfaces_protegees"> | string
    PNC?: StringNullableFilter<"surfaces_protegees"> | string | null
    RAMSAR?: StringNullableFilter<"surfaces_protegees"> | string | null
    PNR?: StringNullableFilter<"surfaces_protegees"> | string | null
    PNP?: StringNullableFilter<"surfaces_protegees"> | string | null
    FOR_PRO?: StringNullableFilter<"surfaces_protegees"> | string | null
    ZZZ?: StringNullableFilter<"surfaces_protegees"> | string | null
    ZNIEFF2?: StringNullableFilter<"surfaces_protegees"> | string | null
    ZNIEFF1?: StringNullableFilter<"surfaces_protegees"> | string | null
    RNR?: StringNullableFilter<"surfaces_protegees"> | string | null
    TOU_PRO?: StringNullableFilter<"surfaces_protegees"> | string | null
    NATURA?: StringNullableFilter<"surfaces_protegees"> | string | null
    ZPS?: StringNullableFilter<"surfaces_protegees"> | string | null
    SIC?: StringNullableFilter<"surfaces_protegees"> | string | null
    CELRL?: StringNullableFilter<"surfaces_protegees"> | string | null
    BIO?: StringNullableFilter<"surfaces_protegees"> | string | null
    APB?: StringNullableFilter<"surfaces_protegees"> | string | null
    RN?: StringNullableFilter<"surfaces_protegees"> | string | null
    RBFD?: StringNullableFilter<"surfaces_protegees"> | string | null
    RNCFS?: StringNullableFilter<"surfaces_protegees"> | string | null
    libelle_geographique?: StringFilter<"surfaces_protegees"> | string
    epci?: StringFilter<"surfaces_protegees"> | string
    libelle_epci?: StringFilter<"surfaces_protegees"> | string
    departement?: StringFilter<"surfaces_protegees"> | string
    region?: FloatFilter<"surfaces_protegees"> | number
  }

  export type surfaces_protegeesOrderByWithRelationInput = {
    index?: SortOrder
    code_geographique?: SortOrder
    PNC?: SortOrderInput | SortOrder
    RAMSAR?: SortOrderInput | SortOrder
    PNR?: SortOrderInput | SortOrder
    PNP?: SortOrderInput | SortOrder
    FOR_PRO?: SortOrderInput | SortOrder
    ZZZ?: SortOrderInput | SortOrder
    ZNIEFF2?: SortOrderInput | SortOrder
    ZNIEFF1?: SortOrderInput | SortOrder
    RNR?: SortOrderInput | SortOrder
    TOU_PRO?: SortOrderInput | SortOrder
    NATURA?: SortOrderInput | SortOrder
    ZPS?: SortOrderInput | SortOrder
    SIC?: SortOrderInput | SortOrder
    CELRL?: SortOrderInput | SortOrder
    BIO?: SortOrderInput | SortOrder
    APB?: SortOrderInput | SortOrder
    RN?: SortOrderInput | SortOrder
    RBFD?: SortOrderInput | SortOrder
    RNCFS?: SortOrderInput | SortOrder
    libelle_geographique?: SortOrder
    epci?: SortOrder
    libelle_epci?: SortOrder
    departement?: SortOrder
    region?: SortOrder
  }

  export type surfaces_protegeesWhereUniqueInput = Prisma.AtLeast<{
    index?: bigint | number
    AND?: surfaces_protegeesWhereInput | surfaces_protegeesWhereInput[]
    OR?: surfaces_protegeesWhereInput[]
    NOT?: surfaces_protegeesWhereInput | surfaces_protegeesWhereInput[]
    code_geographique?: StringFilter<"surfaces_protegees"> | string
    PNC?: StringNullableFilter<"surfaces_protegees"> | string | null
    RAMSAR?: StringNullableFilter<"surfaces_protegees"> | string | null
    PNR?: StringNullableFilter<"surfaces_protegees"> | string | null
    PNP?: StringNullableFilter<"surfaces_protegees"> | string | null
    FOR_PRO?: StringNullableFilter<"surfaces_protegees"> | string | null
    ZZZ?: StringNullableFilter<"surfaces_protegees"> | string | null
    ZNIEFF2?: StringNullableFilter<"surfaces_protegees"> | string | null
    ZNIEFF1?: StringNullableFilter<"surfaces_protegees"> | string | null
    RNR?: StringNullableFilter<"surfaces_protegees"> | string | null
    TOU_PRO?: StringNullableFilter<"surfaces_protegees"> | string | null
    NATURA?: StringNullableFilter<"surfaces_protegees"> | string | null
    ZPS?: StringNullableFilter<"surfaces_protegees"> | string | null
    SIC?: StringNullableFilter<"surfaces_protegees"> | string | null
    CELRL?: StringNullableFilter<"surfaces_protegees"> | string | null
    BIO?: StringNullableFilter<"surfaces_protegees"> | string | null
    APB?: StringNullableFilter<"surfaces_protegees"> | string | null
    RN?: StringNullableFilter<"surfaces_protegees"> | string | null
    RBFD?: StringNullableFilter<"surfaces_protegees"> | string | null
    RNCFS?: StringNullableFilter<"surfaces_protegees"> | string | null
    libelle_geographique?: StringFilter<"surfaces_protegees"> | string
    epci?: StringFilter<"surfaces_protegees"> | string
    libelle_epci?: StringFilter<"surfaces_protegees"> | string
    departement?: StringFilter<"surfaces_protegees"> | string
    region?: FloatFilter<"surfaces_protegees"> | number
  }, "index">

  export type surfaces_protegeesOrderByWithAggregationInput = {
    index?: SortOrder
    code_geographique?: SortOrder
    PNC?: SortOrderInput | SortOrder
    RAMSAR?: SortOrderInput | SortOrder
    PNR?: SortOrderInput | SortOrder
    PNP?: SortOrderInput | SortOrder
    FOR_PRO?: SortOrderInput | SortOrder
    ZZZ?: SortOrderInput | SortOrder
    ZNIEFF2?: SortOrderInput | SortOrder
    ZNIEFF1?: SortOrderInput | SortOrder
    RNR?: SortOrderInput | SortOrder
    TOU_PRO?: SortOrderInput | SortOrder
    NATURA?: SortOrderInput | SortOrder
    ZPS?: SortOrderInput | SortOrder
    SIC?: SortOrderInput | SortOrder
    CELRL?: SortOrderInput | SortOrder
    BIO?: SortOrderInput | SortOrder
    APB?: SortOrderInput | SortOrder
    RN?: SortOrderInput | SortOrder
    RBFD?: SortOrderInput | SortOrder
    RNCFS?: SortOrderInput | SortOrder
    libelle_geographique?: SortOrder
    epci?: SortOrder
    libelle_epci?: SortOrder
    departement?: SortOrder
    region?: SortOrder
    _count?: surfaces_protegeesCountOrderByAggregateInput
    _avg?: surfaces_protegeesAvgOrderByAggregateInput
    _max?: surfaces_protegeesMaxOrderByAggregateInput
    _min?: surfaces_protegeesMinOrderByAggregateInput
    _sum?: surfaces_protegeesSumOrderByAggregateInput
  }

  export type surfaces_protegeesScalarWhereWithAggregatesInput = {
    AND?: surfaces_protegeesScalarWhereWithAggregatesInput | surfaces_protegeesScalarWhereWithAggregatesInput[]
    OR?: surfaces_protegeesScalarWhereWithAggregatesInput[]
    NOT?: surfaces_protegeesScalarWhereWithAggregatesInput | surfaces_protegeesScalarWhereWithAggregatesInput[]
    index?: BigIntWithAggregatesFilter<"surfaces_protegees"> | bigint | number
    code_geographique?: StringWithAggregatesFilter<"surfaces_protegees"> | string
    PNC?: StringNullableWithAggregatesFilter<"surfaces_protegees"> | string | null
    RAMSAR?: StringNullableWithAggregatesFilter<"surfaces_protegees"> | string | null
    PNR?: StringNullableWithAggregatesFilter<"surfaces_protegees"> | string | null
    PNP?: StringNullableWithAggregatesFilter<"surfaces_protegees"> | string | null
    FOR_PRO?: StringNullableWithAggregatesFilter<"surfaces_protegees"> | string | null
    ZZZ?: StringNullableWithAggregatesFilter<"surfaces_protegees"> | string | null
    ZNIEFF2?: StringNullableWithAggregatesFilter<"surfaces_protegees"> | string | null
    ZNIEFF1?: StringNullableWithAggregatesFilter<"surfaces_protegees"> | string | null
    RNR?: StringNullableWithAggregatesFilter<"surfaces_protegees"> | string | null
    TOU_PRO?: StringNullableWithAggregatesFilter<"surfaces_protegees"> | string | null
    NATURA?: StringNullableWithAggregatesFilter<"surfaces_protegees"> | string | null
    ZPS?: StringNullableWithAggregatesFilter<"surfaces_protegees"> | string | null
    SIC?: StringNullableWithAggregatesFilter<"surfaces_protegees"> | string | null
    CELRL?: StringNullableWithAggregatesFilter<"surfaces_protegees"> | string | null
    BIO?: StringNullableWithAggregatesFilter<"surfaces_protegees"> | string | null
    APB?: StringNullableWithAggregatesFilter<"surfaces_protegees"> | string | null
    RN?: StringNullableWithAggregatesFilter<"surfaces_protegees"> | string | null
    RBFD?: StringNullableWithAggregatesFilter<"surfaces_protegees"> | string | null
    RNCFS?: StringNullableWithAggregatesFilter<"surfaces_protegees"> | string | null
    libelle_geographique?: StringWithAggregatesFilter<"surfaces_protegees"> | string
    epci?: StringWithAggregatesFilter<"surfaces_protegees"> | string
    libelle_epci?: StringWithAggregatesFilter<"surfaces_protegees"> | string
    departement?: StringWithAggregatesFilter<"surfaces_protegees"> | string
    region?: FloatWithAggregatesFilter<"surfaces_protegees"> | number
  }

  export type consommation_espaces_nafWhereInput = {
    AND?: consommation_espaces_nafWhereInput | consommation_espaces_nafWhereInput[]
    OR?: consommation_espaces_nafWhereInput[]
    NOT?: consommation_espaces_nafWhereInput | consommation_espaces_nafWhereInput[]
    index?: BigIntFilter<"consommation_espaces_naf"> | bigint | number
    code_geographique?: StringFilter<"consommation_espaces_naf"> | string
    libelle_geographique?: StringFilter<"consommation_espaces_naf"> | string
    epci?: StringFilter<"consommation_espaces_naf"> | string
    libelle_epci?: StringFilter<"consommation_espaces_naf"> | string
    departement?: StringFilter<"consommation_espaces_naf"> | string
    region?: IntFilter<"consommation_espaces_naf"> | number
    naf09art10?: FloatFilter<"consommation_espaces_naf"> | number
    art09act10?: FloatFilter<"consommation_espaces_naf"> | number
    art09hab10?: FloatFilter<"consommation_espaces_naf"> | number
    art09mix10?: FloatFilter<"consommation_espaces_naf"> | number
    art09rou10?: FloatFilter<"consommation_espaces_naf"> | number
    art09fer10?: FloatFilter<"consommation_espaces_naf"> | number
    art09inc10?: FloatFilter<"consommation_espaces_naf"> | number
    naf10art11?: FloatFilter<"consommation_espaces_naf"> | number
    art10act11?: FloatFilter<"consommation_espaces_naf"> | number
    art10hab11?: FloatFilter<"consommation_espaces_naf"> | number
    art10mix11?: FloatFilter<"consommation_espaces_naf"> | number
    art10rou11?: FloatFilter<"consommation_espaces_naf"> | number
    art10fer11?: FloatFilter<"consommation_espaces_naf"> | number
    art10inc11?: FloatFilter<"consommation_espaces_naf"> | number
    naf11art12?: FloatFilter<"consommation_espaces_naf"> | number
    art11act12?: FloatFilter<"consommation_espaces_naf"> | number
    art11hab12?: FloatFilter<"consommation_espaces_naf"> | number
    art11mix12?: FloatFilter<"consommation_espaces_naf"> | number
    art11rou12?: FloatFilter<"consommation_espaces_naf"> | number
    art11fer12?: FloatFilter<"consommation_espaces_naf"> | number
    art11inc12?: FloatFilter<"consommation_espaces_naf"> | number
    naf12art13?: FloatFilter<"consommation_espaces_naf"> | number
    art12act13?: FloatFilter<"consommation_espaces_naf"> | number
    art12hab13?: FloatFilter<"consommation_espaces_naf"> | number
    art12mix13?: FloatFilter<"consommation_espaces_naf"> | number
    art12rou13?: FloatFilter<"consommation_espaces_naf"> | number
    art12fer13?: FloatFilter<"consommation_espaces_naf"> | number
    art12inc13?: FloatFilter<"consommation_espaces_naf"> | number
    naf13art14?: FloatFilter<"consommation_espaces_naf"> | number
    art13act14?: FloatFilter<"consommation_espaces_naf"> | number
    art13hab14?: FloatFilter<"consommation_espaces_naf"> | number
    art13mix14?: FloatFilter<"consommation_espaces_naf"> | number
    art13rou14?: FloatFilter<"consommation_espaces_naf"> | number
    art13fer14?: FloatFilter<"consommation_espaces_naf"> | number
    art13inc14?: FloatFilter<"consommation_espaces_naf"> | number
    naf14art15?: FloatFilter<"consommation_espaces_naf"> | number
    art14act15?: FloatFilter<"consommation_espaces_naf"> | number
    art14hab15?: FloatFilter<"consommation_espaces_naf"> | number
    art14mix15?: FloatFilter<"consommation_espaces_naf"> | number
    art14rou15?: FloatFilter<"consommation_espaces_naf"> | number
    art14fer15?: FloatFilter<"consommation_espaces_naf"> | number
    art14inc15?: FloatFilter<"consommation_espaces_naf"> | number
    naf15art16?: FloatFilter<"consommation_espaces_naf"> | number
    art15act16?: FloatFilter<"consommation_espaces_naf"> | number
    art15hab16?: FloatFilter<"consommation_espaces_naf"> | number
    art15mix16?: FloatFilter<"consommation_espaces_naf"> | number
    art15rou16?: FloatFilter<"consommation_espaces_naf"> | number
    art15fer16?: FloatFilter<"consommation_espaces_naf"> | number
    art15inc16?: FloatFilter<"consommation_espaces_naf"> | number
    naf16art17?: FloatFilter<"consommation_espaces_naf"> | number
    art16act17?: FloatFilter<"consommation_espaces_naf"> | number
    art16hab17?: FloatFilter<"consommation_espaces_naf"> | number
    art16mix17?: FloatFilter<"consommation_espaces_naf"> | number
    art16rou17?: FloatFilter<"consommation_espaces_naf"> | number
    art16fer17?: FloatFilter<"consommation_espaces_naf"> | number
    art16inc17?: FloatFilter<"consommation_espaces_naf"> | number
    naf17art18?: FloatFilter<"consommation_espaces_naf"> | number
    art17act18?: FloatFilter<"consommation_espaces_naf"> | number
    art17hab18?: FloatFilter<"consommation_espaces_naf"> | number
    art17mix18?: FloatFilter<"consommation_espaces_naf"> | number
    art17rou18?: FloatFilter<"consommation_espaces_naf"> | number
    art17fer18?: FloatFilter<"consommation_espaces_naf"> | number
    art17inc18?: FloatFilter<"consommation_espaces_naf"> | number
    naf18art19?: FloatFilter<"consommation_espaces_naf"> | number
    art18act19?: FloatFilter<"consommation_espaces_naf"> | number
    art18hab19?: FloatFilter<"consommation_espaces_naf"> | number
    art18mix19?: FloatFilter<"consommation_espaces_naf"> | number
    art18rou19?: FloatFilter<"consommation_espaces_naf"> | number
    art18fer19?: FloatFilter<"consommation_espaces_naf"> | number
    art18inc19?: FloatFilter<"consommation_espaces_naf"> | number
    naf19art20?: FloatFilter<"consommation_espaces_naf"> | number
    art19act20?: FloatFilter<"consommation_espaces_naf"> | number
    art19hab20?: FloatFilter<"consommation_espaces_naf"> | number
    art19mix20?: FloatFilter<"consommation_espaces_naf"> | number
    art19rou20?: FloatFilter<"consommation_espaces_naf"> | number
    art19fer20?: FloatFilter<"consommation_espaces_naf"> | number
    art19inc20?: FloatFilter<"consommation_espaces_naf"> | number
    naf20art21?: FloatFilter<"consommation_espaces_naf"> | number
    art20act21?: FloatFilter<"consommation_espaces_naf"> | number
    art20hab21?: FloatFilter<"consommation_espaces_naf"> | number
    art20mix21?: FloatFilter<"consommation_espaces_naf"> | number
    art20rou21?: FloatFilter<"consommation_espaces_naf"> | number
    art20fer21?: FloatFilter<"consommation_espaces_naf"> | number
    art20inc21?: FloatFilter<"consommation_espaces_naf"> | number
    naf21art22?: FloatFilter<"consommation_espaces_naf"> | number
    art21act22?: FloatFilter<"consommation_espaces_naf"> | number
    art21hab22?: FloatFilter<"consommation_espaces_naf"> | number
    art21mix22?: FloatFilter<"consommation_espaces_naf"> | number
    art21rou22?: FloatFilter<"consommation_espaces_naf"> | number
    art21fer22?: FloatFilter<"consommation_espaces_naf"> | number
    art21inc22?: FloatFilter<"consommation_espaces_naf"> | number
    naf22art23?: FloatFilter<"consommation_espaces_naf"> | number
    art22act23?: FloatFilter<"consommation_espaces_naf"> | number
    art22hab23?: FloatFilter<"consommation_espaces_naf"> | number
    art22mix23?: FloatFilter<"consommation_espaces_naf"> | number
    art22rou23?: FloatFilter<"consommation_espaces_naf"> | number
    art22fer23?: FloatFilter<"consommation_espaces_naf"> | number
    art22inc23?: FloatFilter<"consommation_espaces_naf"> | number
    naf09art23?: FloatFilter<"consommation_espaces_naf"> | number
    art09act23?: FloatFilter<"consommation_espaces_naf"> | number
    art09hab23?: FloatFilter<"consommation_espaces_naf"> | number
    art09mix23?: FloatFilter<"consommation_espaces_naf"> | number
    art09inc23?: FloatFilter<"consommation_espaces_naf"> | number
    art09rou23?: FloatFilter<"consommation_espaces_naf"> | number
    art09fer23?: FloatFilter<"consommation_espaces_naf"> | number
    artcom0923?: FloatFilter<"consommation_espaces_naf"> | number
    pop14?: FloatFilter<"consommation_espaces_naf"> | number
    pop20?: FloatFilter<"consommation_espaces_naf"> | number
    pop1420?: FloatFilter<"consommation_espaces_naf"> | number
    men14?: FloatFilter<"consommation_espaces_naf"> | number
    men20?: FloatFilter<"consommation_espaces_naf"> | number
    men1420?: FloatFilter<"consommation_espaces_naf"> | number
    emp14?: FloatFilter<"consommation_espaces_naf"> | number
    emp20?: FloatFilter<"consommation_espaces_naf"> | number
    emp1420?: FloatFilter<"consommation_espaces_naf"> | number
    mepart1420?: FloatFilter<"consommation_espaces_naf"> | number
    menhab1420?: FloatFilter<"consommation_espaces_naf"> | number
    artpop1420?: FloatNullableFilter<"consommation_espaces_naf"> | number | null
    surfcom2023?: FloatFilter<"consommation_espaces_naf"> | number
    C10_MEN?: FloatNullableFilter<"consommation_espaces_naf"> | number | null
    C15_MEN?: FloatNullableFilter<"consommation_espaces_naf"> | number | null
    C21_MEN?: FloatNullableFilter<"consommation_espaces_naf"> | number | null
  }

  export type consommation_espaces_nafOrderByWithRelationInput = {
    index?: SortOrder
    code_geographique?: SortOrder
    libelle_geographique?: SortOrder
    epci?: SortOrder
    libelle_epci?: SortOrder
    departement?: SortOrder
    region?: SortOrder
    naf09art10?: SortOrder
    art09act10?: SortOrder
    art09hab10?: SortOrder
    art09mix10?: SortOrder
    art09rou10?: SortOrder
    art09fer10?: SortOrder
    art09inc10?: SortOrder
    naf10art11?: SortOrder
    art10act11?: SortOrder
    art10hab11?: SortOrder
    art10mix11?: SortOrder
    art10rou11?: SortOrder
    art10fer11?: SortOrder
    art10inc11?: SortOrder
    naf11art12?: SortOrder
    art11act12?: SortOrder
    art11hab12?: SortOrder
    art11mix12?: SortOrder
    art11rou12?: SortOrder
    art11fer12?: SortOrder
    art11inc12?: SortOrder
    naf12art13?: SortOrder
    art12act13?: SortOrder
    art12hab13?: SortOrder
    art12mix13?: SortOrder
    art12rou13?: SortOrder
    art12fer13?: SortOrder
    art12inc13?: SortOrder
    naf13art14?: SortOrder
    art13act14?: SortOrder
    art13hab14?: SortOrder
    art13mix14?: SortOrder
    art13rou14?: SortOrder
    art13fer14?: SortOrder
    art13inc14?: SortOrder
    naf14art15?: SortOrder
    art14act15?: SortOrder
    art14hab15?: SortOrder
    art14mix15?: SortOrder
    art14rou15?: SortOrder
    art14fer15?: SortOrder
    art14inc15?: SortOrder
    naf15art16?: SortOrder
    art15act16?: SortOrder
    art15hab16?: SortOrder
    art15mix16?: SortOrder
    art15rou16?: SortOrder
    art15fer16?: SortOrder
    art15inc16?: SortOrder
    naf16art17?: SortOrder
    art16act17?: SortOrder
    art16hab17?: SortOrder
    art16mix17?: SortOrder
    art16rou17?: SortOrder
    art16fer17?: SortOrder
    art16inc17?: SortOrder
    naf17art18?: SortOrder
    art17act18?: SortOrder
    art17hab18?: SortOrder
    art17mix18?: SortOrder
    art17rou18?: SortOrder
    art17fer18?: SortOrder
    art17inc18?: SortOrder
    naf18art19?: SortOrder
    art18act19?: SortOrder
    art18hab19?: SortOrder
    art18mix19?: SortOrder
    art18rou19?: SortOrder
    art18fer19?: SortOrder
    art18inc19?: SortOrder
    naf19art20?: SortOrder
    art19act20?: SortOrder
    art19hab20?: SortOrder
    art19mix20?: SortOrder
    art19rou20?: SortOrder
    art19fer20?: SortOrder
    art19inc20?: SortOrder
    naf20art21?: SortOrder
    art20act21?: SortOrder
    art20hab21?: SortOrder
    art20mix21?: SortOrder
    art20rou21?: SortOrder
    art20fer21?: SortOrder
    art20inc21?: SortOrder
    naf21art22?: SortOrder
    art21act22?: SortOrder
    art21hab22?: SortOrder
    art21mix22?: SortOrder
    art21rou22?: SortOrder
    art21fer22?: SortOrder
    art21inc22?: SortOrder
    naf22art23?: SortOrder
    art22act23?: SortOrder
    art22hab23?: SortOrder
    art22mix23?: SortOrder
    art22rou23?: SortOrder
    art22fer23?: SortOrder
    art22inc23?: SortOrder
    naf09art23?: SortOrder
    art09act23?: SortOrder
    art09hab23?: SortOrder
    art09mix23?: SortOrder
    art09inc23?: SortOrder
    art09rou23?: SortOrder
    art09fer23?: SortOrder
    artcom0923?: SortOrder
    pop14?: SortOrder
    pop20?: SortOrder
    pop1420?: SortOrder
    men14?: SortOrder
    men20?: SortOrder
    men1420?: SortOrder
    emp14?: SortOrder
    emp20?: SortOrder
    emp1420?: SortOrder
    mepart1420?: SortOrder
    menhab1420?: SortOrder
    artpop1420?: SortOrderInput | SortOrder
    surfcom2023?: SortOrder
    C10_MEN?: SortOrderInput | SortOrder
    C15_MEN?: SortOrderInput | SortOrder
    C21_MEN?: SortOrderInput | SortOrder
  }

  export type consommation_espaces_nafWhereUniqueInput = Prisma.AtLeast<{
    index?: bigint | number
    AND?: consommation_espaces_nafWhereInput | consommation_espaces_nafWhereInput[]
    OR?: consommation_espaces_nafWhereInput[]
    NOT?: consommation_espaces_nafWhereInput | consommation_espaces_nafWhereInput[]
    code_geographique?: StringFilter<"consommation_espaces_naf"> | string
    libelle_geographique?: StringFilter<"consommation_espaces_naf"> | string
    epci?: StringFilter<"consommation_espaces_naf"> | string
    libelle_epci?: StringFilter<"consommation_espaces_naf"> | string
    departement?: StringFilter<"consommation_espaces_naf"> | string
    region?: IntFilter<"consommation_espaces_naf"> | number
    naf09art10?: FloatFilter<"consommation_espaces_naf"> | number
    art09act10?: FloatFilter<"consommation_espaces_naf"> | number
    art09hab10?: FloatFilter<"consommation_espaces_naf"> | number
    art09mix10?: FloatFilter<"consommation_espaces_naf"> | number
    art09rou10?: FloatFilter<"consommation_espaces_naf"> | number
    art09fer10?: FloatFilter<"consommation_espaces_naf"> | number
    art09inc10?: FloatFilter<"consommation_espaces_naf"> | number
    naf10art11?: FloatFilter<"consommation_espaces_naf"> | number
    art10act11?: FloatFilter<"consommation_espaces_naf"> | number
    art10hab11?: FloatFilter<"consommation_espaces_naf"> | number
    art10mix11?: FloatFilter<"consommation_espaces_naf"> | number
    art10rou11?: FloatFilter<"consommation_espaces_naf"> | number
    art10fer11?: FloatFilter<"consommation_espaces_naf"> | number
    art10inc11?: FloatFilter<"consommation_espaces_naf"> | number
    naf11art12?: FloatFilter<"consommation_espaces_naf"> | number
    art11act12?: FloatFilter<"consommation_espaces_naf"> | number
    art11hab12?: FloatFilter<"consommation_espaces_naf"> | number
    art11mix12?: FloatFilter<"consommation_espaces_naf"> | number
    art11rou12?: FloatFilter<"consommation_espaces_naf"> | number
    art11fer12?: FloatFilter<"consommation_espaces_naf"> | number
    art11inc12?: FloatFilter<"consommation_espaces_naf"> | number
    naf12art13?: FloatFilter<"consommation_espaces_naf"> | number
    art12act13?: FloatFilter<"consommation_espaces_naf"> | number
    art12hab13?: FloatFilter<"consommation_espaces_naf"> | number
    art12mix13?: FloatFilter<"consommation_espaces_naf"> | number
    art12rou13?: FloatFilter<"consommation_espaces_naf"> | number
    art12fer13?: FloatFilter<"consommation_espaces_naf"> | number
    art12inc13?: FloatFilter<"consommation_espaces_naf"> | number
    naf13art14?: FloatFilter<"consommation_espaces_naf"> | number
    art13act14?: FloatFilter<"consommation_espaces_naf"> | number
    art13hab14?: FloatFilter<"consommation_espaces_naf"> | number
    art13mix14?: FloatFilter<"consommation_espaces_naf"> | number
    art13rou14?: FloatFilter<"consommation_espaces_naf"> | number
    art13fer14?: FloatFilter<"consommation_espaces_naf"> | number
    art13inc14?: FloatFilter<"consommation_espaces_naf"> | number
    naf14art15?: FloatFilter<"consommation_espaces_naf"> | number
    art14act15?: FloatFilter<"consommation_espaces_naf"> | number
    art14hab15?: FloatFilter<"consommation_espaces_naf"> | number
    art14mix15?: FloatFilter<"consommation_espaces_naf"> | number
    art14rou15?: FloatFilter<"consommation_espaces_naf"> | number
    art14fer15?: FloatFilter<"consommation_espaces_naf"> | number
    art14inc15?: FloatFilter<"consommation_espaces_naf"> | number
    naf15art16?: FloatFilter<"consommation_espaces_naf"> | number
    art15act16?: FloatFilter<"consommation_espaces_naf"> | number
    art15hab16?: FloatFilter<"consommation_espaces_naf"> | number
    art15mix16?: FloatFilter<"consommation_espaces_naf"> | number
    art15rou16?: FloatFilter<"consommation_espaces_naf"> | number
    art15fer16?: FloatFilter<"consommation_espaces_naf"> | number
    art15inc16?: FloatFilter<"consommation_espaces_naf"> | number
    naf16art17?: FloatFilter<"consommation_espaces_naf"> | number
    art16act17?: FloatFilter<"consommation_espaces_naf"> | number
    art16hab17?: FloatFilter<"consommation_espaces_naf"> | number
    art16mix17?: FloatFilter<"consommation_espaces_naf"> | number
    art16rou17?: FloatFilter<"consommation_espaces_naf"> | number
    art16fer17?: FloatFilter<"consommation_espaces_naf"> | number
    art16inc17?: FloatFilter<"consommation_espaces_naf"> | number
    naf17art18?: FloatFilter<"consommation_espaces_naf"> | number
    art17act18?: FloatFilter<"consommation_espaces_naf"> | number
    art17hab18?: FloatFilter<"consommation_espaces_naf"> | number
    art17mix18?: FloatFilter<"consommation_espaces_naf"> | number
    art17rou18?: FloatFilter<"consommation_espaces_naf"> | number
    art17fer18?: FloatFilter<"consommation_espaces_naf"> | number
    art17inc18?: FloatFilter<"consommation_espaces_naf"> | number
    naf18art19?: FloatFilter<"consommation_espaces_naf"> | number
    art18act19?: FloatFilter<"consommation_espaces_naf"> | number
    art18hab19?: FloatFilter<"consommation_espaces_naf"> | number
    art18mix19?: FloatFilter<"consommation_espaces_naf"> | number
    art18rou19?: FloatFilter<"consommation_espaces_naf"> | number
    art18fer19?: FloatFilter<"consommation_espaces_naf"> | number
    art18inc19?: FloatFilter<"consommation_espaces_naf"> | number
    naf19art20?: FloatFilter<"consommation_espaces_naf"> | number
    art19act20?: FloatFilter<"consommation_espaces_naf"> | number
    art19hab20?: FloatFilter<"consommation_espaces_naf"> | number
    art19mix20?: FloatFilter<"consommation_espaces_naf"> | number
    art19rou20?: FloatFilter<"consommation_espaces_naf"> | number
    art19fer20?: FloatFilter<"consommation_espaces_naf"> | number
    art19inc20?: FloatFilter<"consommation_espaces_naf"> | number
    naf20art21?: FloatFilter<"consommation_espaces_naf"> | number
    art20act21?: FloatFilter<"consommation_espaces_naf"> | number
    art20hab21?: FloatFilter<"consommation_espaces_naf"> | number
    art20mix21?: FloatFilter<"consommation_espaces_naf"> | number
    art20rou21?: FloatFilter<"consommation_espaces_naf"> | number
    art20fer21?: FloatFilter<"consommation_espaces_naf"> | number
    art20inc21?: FloatFilter<"consommation_espaces_naf"> | number
    naf21art22?: FloatFilter<"consommation_espaces_naf"> | number
    art21act22?: FloatFilter<"consommation_espaces_naf"> | number
    art21hab22?: FloatFilter<"consommation_espaces_naf"> | number
    art21mix22?: FloatFilter<"consommation_espaces_naf"> | number
    art21rou22?: FloatFilter<"consommation_espaces_naf"> | number
    art21fer22?: FloatFilter<"consommation_espaces_naf"> | number
    art21inc22?: FloatFilter<"consommation_espaces_naf"> | number
    naf22art23?: FloatFilter<"consommation_espaces_naf"> | number
    art22act23?: FloatFilter<"consommation_espaces_naf"> | number
    art22hab23?: FloatFilter<"consommation_espaces_naf"> | number
    art22mix23?: FloatFilter<"consommation_espaces_naf"> | number
    art22rou23?: FloatFilter<"consommation_espaces_naf"> | number
    art22fer23?: FloatFilter<"consommation_espaces_naf"> | number
    art22inc23?: FloatFilter<"consommation_espaces_naf"> | number
    naf09art23?: FloatFilter<"consommation_espaces_naf"> | number
    art09act23?: FloatFilter<"consommation_espaces_naf"> | number
    art09hab23?: FloatFilter<"consommation_espaces_naf"> | number
    art09mix23?: FloatFilter<"consommation_espaces_naf"> | number
    art09inc23?: FloatFilter<"consommation_espaces_naf"> | number
    art09rou23?: FloatFilter<"consommation_espaces_naf"> | number
    art09fer23?: FloatFilter<"consommation_espaces_naf"> | number
    artcom0923?: FloatFilter<"consommation_espaces_naf"> | number
    pop14?: FloatFilter<"consommation_espaces_naf"> | number
    pop20?: FloatFilter<"consommation_espaces_naf"> | number
    pop1420?: FloatFilter<"consommation_espaces_naf"> | number
    men14?: FloatFilter<"consommation_espaces_naf"> | number
    men20?: FloatFilter<"consommation_espaces_naf"> | number
    men1420?: FloatFilter<"consommation_espaces_naf"> | number
    emp14?: FloatFilter<"consommation_espaces_naf"> | number
    emp20?: FloatFilter<"consommation_espaces_naf"> | number
    emp1420?: FloatFilter<"consommation_espaces_naf"> | number
    mepart1420?: FloatFilter<"consommation_espaces_naf"> | number
    menhab1420?: FloatFilter<"consommation_espaces_naf"> | number
    artpop1420?: FloatNullableFilter<"consommation_espaces_naf"> | number | null
    surfcom2023?: FloatFilter<"consommation_espaces_naf"> | number
    C10_MEN?: FloatNullableFilter<"consommation_espaces_naf"> | number | null
    C15_MEN?: FloatNullableFilter<"consommation_espaces_naf"> | number | null
    C21_MEN?: FloatNullableFilter<"consommation_espaces_naf"> | number | null
  }, "index">

  export type consommation_espaces_nafOrderByWithAggregationInput = {
    index?: SortOrder
    code_geographique?: SortOrder
    libelle_geographique?: SortOrder
    epci?: SortOrder
    libelle_epci?: SortOrder
    departement?: SortOrder
    region?: SortOrder
    naf09art10?: SortOrder
    art09act10?: SortOrder
    art09hab10?: SortOrder
    art09mix10?: SortOrder
    art09rou10?: SortOrder
    art09fer10?: SortOrder
    art09inc10?: SortOrder
    naf10art11?: SortOrder
    art10act11?: SortOrder
    art10hab11?: SortOrder
    art10mix11?: SortOrder
    art10rou11?: SortOrder
    art10fer11?: SortOrder
    art10inc11?: SortOrder
    naf11art12?: SortOrder
    art11act12?: SortOrder
    art11hab12?: SortOrder
    art11mix12?: SortOrder
    art11rou12?: SortOrder
    art11fer12?: SortOrder
    art11inc12?: SortOrder
    naf12art13?: SortOrder
    art12act13?: SortOrder
    art12hab13?: SortOrder
    art12mix13?: SortOrder
    art12rou13?: SortOrder
    art12fer13?: SortOrder
    art12inc13?: SortOrder
    naf13art14?: SortOrder
    art13act14?: SortOrder
    art13hab14?: SortOrder
    art13mix14?: SortOrder
    art13rou14?: SortOrder
    art13fer14?: SortOrder
    art13inc14?: SortOrder
    naf14art15?: SortOrder
    art14act15?: SortOrder
    art14hab15?: SortOrder
    art14mix15?: SortOrder
    art14rou15?: SortOrder
    art14fer15?: SortOrder
    art14inc15?: SortOrder
    naf15art16?: SortOrder
    art15act16?: SortOrder
    art15hab16?: SortOrder
    art15mix16?: SortOrder
    art15rou16?: SortOrder
    art15fer16?: SortOrder
    art15inc16?: SortOrder
    naf16art17?: SortOrder
    art16act17?: SortOrder
    art16hab17?: SortOrder
    art16mix17?: SortOrder
    art16rou17?: SortOrder
    art16fer17?: SortOrder
    art16inc17?: SortOrder
    naf17art18?: SortOrder
    art17act18?: SortOrder
    art17hab18?: SortOrder
    art17mix18?: SortOrder
    art17rou18?: SortOrder
    art17fer18?: SortOrder
    art17inc18?: SortOrder
    naf18art19?: SortOrder
    art18act19?: SortOrder
    art18hab19?: SortOrder
    art18mix19?: SortOrder
    art18rou19?: SortOrder
    art18fer19?: SortOrder
    art18inc19?: SortOrder
    naf19art20?: SortOrder
    art19act20?: SortOrder
    art19hab20?: SortOrder
    art19mix20?: SortOrder
    art19rou20?: SortOrder
    art19fer20?: SortOrder
    art19inc20?: SortOrder
    naf20art21?: SortOrder
    art20act21?: SortOrder
    art20hab21?: SortOrder
    art20mix21?: SortOrder
    art20rou21?: SortOrder
    art20fer21?: SortOrder
    art20inc21?: SortOrder
    naf21art22?: SortOrder
    art21act22?: SortOrder
    art21hab22?: SortOrder
    art21mix22?: SortOrder
    art21rou22?: SortOrder
    art21fer22?: SortOrder
    art21inc22?: SortOrder
    naf22art23?: SortOrder
    art22act23?: SortOrder
    art22hab23?: SortOrder
    art22mix23?: SortOrder
    art22rou23?: SortOrder
    art22fer23?: SortOrder
    art22inc23?: SortOrder
    naf09art23?: SortOrder
    art09act23?: SortOrder
    art09hab23?: SortOrder
    art09mix23?: SortOrder
    art09inc23?: SortOrder
    art09rou23?: SortOrder
    art09fer23?: SortOrder
    artcom0923?: SortOrder
    pop14?: SortOrder
    pop20?: SortOrder
    pop1420?: SortOrder
    men14?: SortOrder
    men20?: SortOrder
    men1420?: SortOrder
    emp14?: SortOrder
    emp20?: SortOrder
    emp1420?: SortOrder
    mepart1420?: SortOrder
    menhab1420?: SortOrder
    artpop1420?: SortOrderInput | SortOrder
    surfcom2023?: SortOrder
    C10_MEN?: SortOrderInput | SortOrder
    C15_MEN?: SortOrderInput | SortOrder
    C21_MEN?: SortOrderInput | SortOrder
    _count?: consommation_espaces_nafCountOrderByAggregateInput
    _avg?: consommation_espaces_nafAvgOrderByAggregateInput
    _max?: consommation_espaces_nafMaxOrderByAggregateInput
    _min?: consommation_espaces_nafMinOrderByAggregateInput
    _sum?: consommation_espaces_nafSumOrderByAggregateInput
  }

  export type consommation_espaces_nafScalarWhereWithAggregatesInput = {
    AND?: consommation_espaces_nafScalarWhereWithAggregatesInput | consommation_espaces_nafScalarWhereWithAggregatesInput[]
    OR?: consommation_espaces_nafScalarWhereWithAggregatesInput[]
    NOT?: consommation_espaces_nafScalarWhereWithAggregatesInput | consommation_espaces_nafScalarWhereWithAggregatesInput[]
    index?: BigIntWithAggregatesFilter<"consommation_espaces_naf"> | bigint | number
    code_geographique?: StringWithAggregatesFilter<"consommation_espaces_naf"> | string
    libelle_geographique?: StringWithAggregatesFilter<"consommation_espaces_naf"> | string
    epci?: StringWithAggregatesFilter<"consommation_espaces_naf"> | string
    libelle_epci?: StringWithAggregatesFilter<"consommation_espaces_naf"> | string
    departement?: StringWithAggregatesFilter<"consommation_espaces_naf"> | string
    region?: IntWithAggregatesFilter<"consommation_espaces_naf"> | number
    naf09art10?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art09act10?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art09hab10?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art09mix10?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art09rou10?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art09fer10?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art09inc10?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    naf10art11?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art10act11?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art10hab11?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art10mix11?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art10rou11?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art10fer11?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art10inc11?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    naf11art12?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art11act12?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art11hab12?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art11mix12?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art11rou12?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art11fer12?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art11inc12?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    naf12art13?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art12act13?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art12hab13?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art12mix13?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art12rou13?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art12fer13?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art12inc13?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    naf13art14?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art13act14?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art13hab14?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art13mix14?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art13rou14?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art13fer14?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art13inc14?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    naf14art15?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art14act15?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art14hab15?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art14mix15?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art14rou15?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art14fer15?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art14inc15?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    naf15art16?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art15act16?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art15hab16?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art15mix16?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art15rou16?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art15fer16?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art15inc16?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    naf16art17?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art16act17?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art16hab17?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art16mix17?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art16rou17?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art16fer17?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art16inc17?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    naf17art18?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art17act18?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art17hab18?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art17mix18?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art17rou18?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art17fer18?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art17inc18?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    naf18art19?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art18act19?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art18hab19?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art18mix19?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art18rou19?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art18fer19?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art18inc19?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    naf19art20?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art19act20?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art19hab20?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art19mix20?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art19rou20?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art19fer20?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art19inc20?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    naf20art21?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art20act21?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art20hab21?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art20mix21?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art20rou21?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art20fer21?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art20inc21?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    naf21art22?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art21act22?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art21hab22?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art21mix22?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art21rou22?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art21fer22?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art21inc22?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    naf22art23?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art22act23?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art22hab23?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art22mix23?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art22rou23?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art22fer23?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art22inc23?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    naf09art23?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art09act23?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art09hab23?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art09mix23?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art09inc23?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art09rou23?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    art09fer23?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    artcom0923?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    pop14?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    pop20?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    pop1420?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    men14?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    men20?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    men1420?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    emp14?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    emp20?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    emp1420?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    mepart1420?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    menhab1420?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    artpop1420?: FloatNullableWithAggregatesFilter<"consommation_espaces_naf"> | number | null
    surfcom2023?: FloatWithAggregatesFilter<"consommation_espaces_naf"> | number
    C10_MEN?: FloatNullableWithAggregatesFilter<"consommation_espaces_naf"> | number | null
    C15_MEN?: FloatNullableWithAggregatesFilter<"consommation_espaces_naf"> | number | null
    C21_MEN?: FloatNullableWithAggregatesFilter<"consommation_espaces_naf"> | number | null
  }

  export type north_star_metricWhereInput = {
    AND?: north_star_metricWhereInput | north_star_metricWhereInput[]
    OR?: north_star_metricWhereInput[]
    NOT?: north_star_metricWhereInput | north_star_metricWhereInput[]
    pk?: IntFilter<"north_star_metric"> | number
    value?: StringFilter<"north_star_metric"> | string
    date?: DateTimeFilter<"north_star_metric"> | Date | string
  }

  export type north_star_metricOrderByWithRelationInput = {
    pk?: SortOrder
    value?: SortOrder
    date?: SortOrder
  }

  export type north_star_metricWhereUniqueInput = Prisma.AtLeast<{
    pk?: number
    AND?: north_star_metricWhereInput | north_star_metricWhereInput[]
    OR?: north_star_metricWhereInput[]
    NOT?: north_star_metricWhereInput | north_star_metricWhereInput[]
    value?: StringFilter<"north_star_metric"> | string
    date?: DateTimeFilter<"north_star_metric"> | Date | string
  }, "pk">

  export type north_star_metricOrderByWithAggregationInput = {
    pk?: SortOrder
    value?: SortOrder
    date?: SortOrder
    _count?: north_star_metricCountOrderByAggregateInput
    _avg?: north_star_metricAvgOrderByAggregateInput
    _max?: north_star_metricMaxOrderByAggregateInput
    _min?: north_star_metricMinOrderByAggregateInput
    _sum?: north_star_metricSumOrderByAggregateInput
  }

  export type north_star_metricScalarWhereWithAggregatesInput = {
    AND?: north_star_metricScalarWhereWithAggregatesInput | north_star_metricScalarWhereWithAggregatesInput[]
    OR?: north_star_metricScalarWhereWithAggregatesInput[]
    NOT?: north_star_metricScalarWhereWithAggregatesInput | north_star_metricScalarWhereWithAggregatesInput[]
    pk?: IntWithAggregatesFilter<"north_star_metric"> | number
    value?: StringWithAggregatesFilter<"north_star_metric"> | string
    date?: DateTimeWithAggregatesFilter<"north_star_metric"> | Date | string
  }

  export type etat_cours_d_eauWhereInput = {
    AND?: etat_cours_d_eauWhereInput | etat_cours_d_eauWhereInput[]
    OR?: etat_cours_d_eauWhereInput[]
    NOT?: etat_cours_d_eauWhereInput | etat_cours_d_eauWhereInput[]
    pk?: IntFilter<"etat_cours_d_eau"> | number
    name?: StringFilter<"etat_cours_d_eau"> | string
    longueur?: FloatFilter<"etat_cours_d_eau"> | number
    etateco?: StringNullableFilter<"etat_cours_d_eau"> | string | null
  }

  export type etat_cours_d_eauOrderByWithRelationInput = {
    pk?: SortOrder
    name?: SortOrder
    longueur?: SortOrder
    etateco?: SortOrderInput | SortOrder
  }

  export type etat_cours_d_eauWhereUniqueInput = Prisma.AtLeast<{
    pk?: number
    AND?: etat_cours_d_eauWhereInput | etat_cours_d_eauWhereInput[]
    OR?: etat_cours_d_eauWhereInput[]
    NOT?: etat_cours_d_eauWhereInput | etat_cours_d_eauWhereInput[]
    name?: StringFilter<"etat_cours_d_eau"> | string
    longueur?: FloatFilter<"etat_cours_d_eau"> | number
    etateco?: StringNullableFilter<"etat_cours_d_eau"> | string | null
  }, "pk">

  export type etat_cours_d_eauOrderByWithAggregationInput = {
    pk?: SortOrder
    name?: SortOrder
    longueur?: SortOrder
    etateco?: SortOrderInput | SortOrder
    _count?: etat_cours_d_eauCountOrderByAggregateInput
    _avg?: etat_cours_d_eauAvgOrderByAggregateInput
    _max?: etat_cours_d_eauMaxOrderByAggregateInput
    _min?: etat_cours_d_eauMinOrderByAggregateInput
    _sum?: etat_cours_d_eauSumOrderByAggregateInput
  }

  export type etat_cours_d_eauScalarWhereWithAggregatesInput = {
    AND?: etat_cours_d_eauScalarWhereWithAggregatesInput | etat_cours_d_eauScalarWhereWithAggregatesInput[]
    OR?: etat_cours_d_eauScalarWhereWithAggregatesInput[]
    NOT?: etat_cours_d_eauScalarWhereWithAggregatesInput | etat_cours_d_eauScalarWhereWithAggregatesInput[]
    pk?: IntWithAggregatesFilter<"etat_cours_d_eau"> | number
    name?: StringWithAggregatesFilter<"etat_cours_d_eau"> | string
    longueur?: FloatWithAggregatesFilter<"etat_cours_d_eau"> | number
    etateco?: StringNullableWithAggregatesFilter<"etat_cours_d_eau"> | string | null
  }

  export type aot_40WhereInput = {
    AND?: aot_40WhereInput | aot_40WhereInput[]
    OR?: aot_40WhereInput[]
    NOT?: aot_40WhereInput | aot_40WhereInput[]
    index?: BigIntFilter<"aot_40"> | bigint | number
    nom_site?: StringFilter<"aot_40"> | string
    type_d_implantation?: StringFilter<"aot_40"> | string
    valeur_brute?: FloatFilter<"aot_40"> | number
    Latitude?: FloatFilter<"aot_40"> | number
    Longitude?: FloatFilter<"aot_40"> | number
  }

  export type aot_40OrderByWithRelationInput = {
    index?: SortOrder
    nom_site?: SortOrder
    type_d_implantation?: SortOrder
    valeur_brute?: SortOrder
    Latitude?: SortOrder
    Longitude?: SortOrder
  }

  export type aot_40WhereUniqueInput = Prisma.AtLeast<{
    index?: bigint | number
    AND?: aot_40WhereInput | aot_40WhereInput[]
    OR?: aot_40WhereInput[]
    NOT?: aot_40WhereInput | aot_40WhereInput[]
    nom_site?: StringFilter<"aot_40"> | string
    type_d_implantation?: StringFilter<"aot_40"> | string
    valeur_brute?: FloatFilter<"aot_40"> | number
    Latitude?: FloatFilter<"aot_40"> | number
    Longitude?: FloatFilter<"aot_40"> | number
  }, "index">

  export type aot_40OrderByWithAggregationInput = {
    index?: SortOrder
    nom_site?: SortOrder
    type_d_implantation?: SortOrder
    valeur_brute?: SortOrder
    Latitude?: SortOrder
    Longitude?: SortOrder
    _count?: aot_40CountOrderByAggregateInput
    _avg?: aot_40AvgOrderByAggregateInput
    _max?: aot_40MaxOrderByAggregateInput
    _min?: aot_40MinOrderByAggregateInput
    _sum?: aot_40SumOrderByAggregateInput
  }

  export type aot_40ScalarWhereWithAggregatesInput = {
    AND?: aot_40ScalarWhereWithAggregatesInput | aot_40ScalarWhereWithAggregatesInput[]
    OR?: aot_40ScalarWhereWithAggregatesInput[]
    NOT?: aot_40ScalarWhereWithAggregatesInput | aot_40ScalarWhereWithAggregatesInput[]
    index?: BigIntWithAggregatesFilter<"aot_40"> | bigint | number
    nom_site?: StringWithAggregatesFilter<"aot_40"> | string
    type_d_implantation?: StringWithAggregatesFilter<"aot_40"> | string
    valeur_brute?: FloatWithAggregatesFilter<"aot_40"> | number
    Latitude?: FloatWithAggregatesFilter<"aot_40"> | number
    Longitude?: FloatWithAggregatesFilter<"aot_40"> | number
  }

  export type qualite_sites_baignadeWhereInput = {
    AND?: qualite_sites_baignadeWhereInput | qualite_sites_baignadeWhereInput[]
    OR?: qualite_sites_baignadeWhereInput[]
    NOT?: qualite_sites_baignadeWhereInput | qualite_sites_baignadeWhereInput[]
    index?: BigIntFilter<"qualite_sites_baignade"> | bigint | number
    DEP_NOM?: StringFilter<"qualite_sites_baignade"> | string
    DEP_NUM?: StringFilter<"qualite_sites_baignade"> | string
    TYPE?: StringFilter<"qualite_sites_baignade"> | string
    COMMUNE?: StringFilter<"qualite_sites_baignade"> | string
    POINT?: StringFilter<"qualite_sites_baignade"> | string
    LONG?: FloatFilter<"qualite_sites_baignade"> | number
    LAT?: FloatFilter<"qualite_sites_baignade"> | number
    QEB_2013?: StringNullableFilter<"qualite_sites_baignade"> | string | null
    QEB_2014?: StringNullableFilter<"qualite_sites_baignade"> | string | null
    QEB_2015?: StringNullableFilter<"qualite_sites_baignade"> | string | null
    QEB_2016?: StringNullableFilter<"qualite_sites_baignade"> | string | null
    QEB_2017?: StringNullableFilter<"qualite_sites_baignade"> | string | null
    QEB_2018?: StringNullableFilter<"qualite_sites_baignade"> | string | null
    QEB_2019?: StringNullableFilter<"qualite_sites_baignade"> | string | null
    QEB_2020?: StringNullableFilter<"qualite_sites_baignade"> | string | null
  }

  export type qualite_sites_baignadeOrderByWithRelationInput = {
    index?: SortOrder
    DEP_NOM?: SortOrder
    DEP_NUM?: SortOrder
    TYPE?: SortOrder
    COMMUNE?: SortOrder
    POINT?: SortOrder
    LONG?: SortOrder
    LAT?: SortOrder
    QEB_2013?: SortOrderInput | SortOrder
    QEB_2014?: SortOrderInput | SortOrder
    QEB_2015?: SortOrderInput | SortOrder
    QEB_2016?: SortOrderInput | SortOrder
    QEB_2017?: SortOrderInput | SortOrder
    QEB_2018?: SortOrderInput | SortOrder
    QEB_2019?: SortOrderInput | SortOrder
    QEB_2020?: SortOrderInput | SortOrder
  }

  export type qualite_sites_baignadeWhereUniqueInput = Prisma.AtLeast<{
    index?: bigint | number
    AND?: qualite_sites_baignadeWhereInput | qualite_sites_baignadeWhereInput[]
    OR?: qualite_sites_baignadeWhereInput[]
    NOT?: qualite_sites_baignadeWhereInput | qualite_sites_baignadeWhereInput[]
    DEP_NOM?: StringFilter<"qualite_sites_baignade"> | string
    DEP_NUM?: StringFilter<"qualite_sites_baignade"> | string
    TYPE?: StringFilter<"qualite_sites_baignade"> | string
    COMMUNE?: StringFilter<"qualite_sites_baignade"> | string
    POINT?: StringFilter<"qualite_sites_baignade"> | string
    LONG?: FloatFilter<"qualite_sites_baignade"> | number
    LAT?: FloatFilter<"qualite_sites_baignade"> | number
    QEB_2013?: StringNullableFilter<"qualite_sites_baignade"> | string | null
    QEB_2014?: StringNullableFilter<"qualite_sites_baignade"> | string | null
    QEB_2015?: StringNullableFilter<"qualite_sites_baignade"> | string | null
    QEB_2016?: StringNullableFilter<"qualite_sites_baignade"> | string | null
    QEB_2017?: StringNullableFilter<"qualite_sites_baignade"> | string | null
    QEB_2018?: StringNullableFilter<"qualite_sites_baignade"> | string | null
    QEB_2019?: StringNullableFilter<"qualite_sites_baignade"> | string | null
    QEB_2020?: StringNullableFilter<"qualite_sites_baignade"> | string | null
  }, "index">

  export type qualite_sites_baignadeOrderByWithAggregationInput = {
    index?: SortOrder
    DEP_NOM?: SortOrder
    DEP_NUM?: SortOrder
    TYPE?: SortOrder
    COMMUNE?: SortOrder
    POINT?: SortOrder
    LONG?: SortOrder
    LAT?: SortOrder
    QEB_2013?: SortOrderInput | SortOrder
    QEB_2014?: SortOrderInput | SortOrder
    QEB_2015?: SortOrderInput | SortOrder
    QEB_2016?: SortOrderInput | SortOrder
    QEB_2017?: SortOrderInput | SortOrder
    QEB_2018?: SortOrderInput | SortOrder
    QEB_2019?: SortOrderInput | SortOrder
    QEB_2020?: SortOrderInput | SortOrder
    _count?: qualite_sites_baignadeCountOrderByAggregateInput
    _avg?: qualite_sites_baignadeAvgOrderByAggregateInput
    _max?: qualite_sites_baignadeMaxOrderByAggregateInput
    _min?: qualite_sites_baignadeMinOrderByAggregateInput
    _sum?: qualite_sites_baignadeSumOrderByAggregateInput
  }

  export type qualite_sites_baignadeScalarWhereWithAggregatesInput = {
    AND?: qualite_sites_baignadeScalarWhereWithAggregatesInput | qualite_sites_baignadeScalarWhereWithAggregatesInput[]
    OR?: qualite_sites_baignadeScalarWhereWithAggregatesInput[]
    NOT?: qualite_sites_baignadeScalarWhereWithAggregatesInput | qualite_sites_baignadeScalarWhereWithAggregatesInput[]
    index?: BigIntWithAggregatesFilter<"qualite_sites_baignade"> | bigint | number
    DEP_NOM?: StringWithAggregatesFilter<"qualite_sites_baignade"> | string
    DEP_NUM?: StringWithAggregatesFilter<"qualite_sites_baignade"> | string
    TYPE?: StringWithAggregatesFilter<"qualite_sites_baignade"> | string
    COMMUNE?: StringWithAggregatesFilter<"qualite_sites_baignade"> | string
    POINT?: StringWithAggregatesFilter<"qualite_sites_baignade"> | string
    LONG?: FloatWithAggregatesFilter<"qualite_sites_baignade"> | number
    LAT?: FloatWithAggregatesFilter<"qualite_sites_baignade"> | number
    QEB_2013?: StringNullableWithAggregatesFilter<"qualite_sites_baignade"> | string | null
    QEB_2014?: StringNullableWithAggregatesFilter<"qualite_sites_baignade"> | string | null
    QEB_2015?: StringNullableWithAggregatesFilter<"qualite_sites_baignade"> | string | null
    QEB_2016?: StringNullableWithAggregatesFilter<"qualite_sites_baignade"> | string | null
    QEB_2017?: StringNullableWithAggregatesFilter<"qualite_sites_baignade"> | string | null
    QEB_2018?: StringNullableWithAggregatesFilter<"qualite_sites_baignade"> | string | null
    QEB_2019?: StringNullableWithAggregatesFilter<"qualite_sites_baignade"> | string | null
    QEB_2020?: StringNullableWithAggregatesFilter<"qualite_sites_baignade"> | string | null
  }

  export type communesWhereInput = {
    AND?: communesWhereInput | communesWhereInput[]
    OR?: communesWhereInput[]
    NOT?: communesWhereInput | communesWhereInput[]
    pk?: IntFilter<"communes"> | number
    code_commune?: StringNullableFilter<"communes"> | string | null
    libelle_commune?: StringNullableFilter<"communes"> | string | null
    epci?: StringNullableFilter<"communes"> | string | null
    libelle_epci?: StringNullableFilter<"communes"> | string | null
    libgeo?: StringNullableFilter<"communes"> | string | null
    coordinates?: StringNullableFilter<"communes"> | string | null
    densite_bati?: FloatNullableFilter<"communes"> | number | null
    precarite_logement?: FloatNullableFilter<"communes"> | number | null
  }

  export type communesOrderByWithRelationInput = {
    pk?: SortOrder
    code_commune?: SortOrderInput | SortOrder
    libelle_commune?: SortOrderInput | SortOrder
    epci?: SortOrderInput | SortOrder
    libelle_epci?: SortOrderInput | SortOrder
    libgeo?: SortOrderInput | SortOrder
    coordinates?: SortOrderInput | SortOrder
    densite_bati?: SortOrderInput | SortOrder
    precarite_logement?: SortOrderInput | SortOrder
  }

  export type communesWhereUniqueInput = Prisma.AtLeast<{
    pk?: number
    AND?: communesWhereInput | communesWhereInput[]
    OR?: communesWhereInput[]
    NOT?: communesWhereInput | communesWhereInput[]
    code_commune?: StringNullableFilter<"communes"> | string | null
    libelle_commune?: StringNullableFilter<"communes"> | string | null
    epci?: StringNullableFilter<"communes"> | string | null
    libelle_epci?: StringNullableFilter<"communes"> | string | null
    libgeo?: StringNullableFilter<"communes"> | string | null
    coordinates?: StringNullableFilter<"communes"> | string | null
    densite_bati?: FloatNullableFilter<"communes"> | number | null
    precarite_logement?: FloatNullableFilter<"communes"> | number | null
  }, "pk">

  export type communesOrderByWithAggregationInput = {
    pk?: SortOrder
    code_commune?: SortOrderInput | SortOrder
    libelle_commune?: SortOrderInput | SortOrder
    epci?: SortOrderInput | SortOrder
    libelle_epci?: SortOrderInput | SortOrder
    libgeo?: SortOrderInput | SortOrder
    coordinates?: SortOrderInput | SortOrder
    densite_bati?: SortOrderInput | SortOrder
    precarite_logement?: SortOrderInput | SortOrder
    _count?: communesCountOrderByAggregateInput
    _avg?: communesAvgOrderByAggregateInput
    _max?: communesMaxOrderByAggregateInput
    _min?: communesMinOrderByAggregateInput
    _sum?: communesSumOrderByAggregateInput
  }

  export type communesScalarWhereWithAggregatesInput = {
    AND?: communesScalarWhereWithAggregatesInput | communesScalarWhereWithAggregatesInput[]
    OR?: communesScalarWhereWithAggregatesInput[]
    NOT?: communesScalarWhereWithAggregatesInput | communesScalarWhereWithAggregatesInput[]
    pk?: IntWithAggregatesFilter<"communes"> | number
    code_commune?: StringNullableWithAggregatesFilter<"communes"> | string | null
    libelle_commune?: StringNullableWithAggregatesFilter<"communes"> | string | null
    epci?: StringNullableWithAggregatesFilter<"communes"> | string | null
    libelle_epci?: StringNullableWithAggregatesFilter<"communes"> | string | null
    libgeo?: StringNullableWithAggregatesFilter<"communes"> | string | null
    coordinates?: StringNullableWithAggregatesFilter<"communes"> | string | null
    densite_bati?: FloatNullableWithAggregatesFilter<"communes"> | number | null
    precarite_logement?: FloatNullableWithAggregatesFilter<"communes"> | number | null
  }

  export type patch4cWhereInput = {
    AND?: patch4cWhereInput | patch4cWhereInput[]
    OR?: patch4cWhereInput[]
    NOT?: patch4cWhereInput | patch4cWhereInput[]
    index?: BigIntFilter<"patch4c"> | bigint | number
    code_geographique?: StringFilter<"patch4c"> | string
    niveaux_marins?: FloatNullableFilter<"patch4c"> | number | null
    feux_foret?: FloatFilter<"patch4c"> | number
    secheresse_sols?: FloatFilter<"patch4c"> | number
    fortes_precipitations?: FloatFilter<"patch4c"> | number
    fortes_chaleurs?: FloatFilter<"patch4c"> | number
  }

  export type patch4cOrderByWithRelationInput = {
    index?: SortOrder
    code_geographique?: SortOrder
    niveaux_marins?: SortOrderInput | SortOrder
    feux_foret?: SortOrder
    secheresse_sols?: SortOrder
    fortes_precipitations?: SortOrder
    fortes_chaleurs?: SortOrder
  }

  export type patch4cWhereUniqueInput = Prisma.AtLeast<{
    index?: bigint | number
    AND?: patch4cWhereInput | patch4cWhereInput[]
    OR?: patch4cWhereInput[]
    NOT?: patch4cWhereInput | patch4cWhereInput[]
    code_geographique?: StringFilter<"patch4c"> | string
    niveaux_marins?: FloatNullableFilter<"patch4c"> | number | null
    feux_foret?: FloatFilter<"patch4c"> | number
    secheresse_sols?: FloatFilter<"patch4c"> | number
    fortes_precipitations?: FloatFilter<"patch4c"> | number
    fortes_chaleurs?: FloatFilter<"patch4c"> | number
  }, "index">

  export type patch4cOrderByWithAggregationInput = {
    index?: SortOrder
    code_geographique?: SortOrder
    niveaux_marins?: SortOrderInput | SortOrder
    feux_foret?: SortOrder
    secheresse_sols?: SortOrder
    fortes_precipitations?: SortOrder
    fortes_chaleurs?: SortOrder
    _count?: patch4cCountOrderByAggregateInput
    _avg?: patch4cAvgOrderByAggregateInput
    _max?: patch4cMaxOrderByAggregateInput
    _min?: patch4cMinOrderByAggregateInput
    _sum?: patch4cSumOrderByAggregateInput
  }

  export type patch4cScalarWhereWithAggregatesInput = {
    AND?: patch4cScalarWhereWithAggregatesInput | patch4cScalarWhereWithAggregatesInput[]
    OR?: patch4cScalarWhereWithAggregatesInput[]
    NOT?: patch4cScalarWhereWithAggregatesInput | patch4cScalarWhereWithAggregatesInput[]
    index?: BigIntWithAggregatesFilter<"patch4c"> | bigint | number
    code_geographique?: StringWithAggregatesFilter<"patch4c"> | string
    niveaux_marins?: FloatNullableWithAggregatesFilter<"patch4c"> | number | null
    feux_foret?: FloatWithAggregatesFilter<"patch4c"> | number
    secheresse_sols?: FloatWithAggregatesFilter<"patch4c"> | number
    fortes_precipitations?: FloatWithAggregatesFilter<"patch4c"> | number
    fortes_chaleurs?: FloatWithAggregatesFilter<"patch4c"> | number
  }

  export type agricultureWhereInput = {
    AND?: agricultureWhereInput | agricultureWhereInput[]
    OR?: agricultureWhereInput[]
    NOT?: agricultureWhereInput | agricultureWhereInput[]
    index?: BigIntFilter<"agriculture"> | bigint | number
    CODGEO?: StringFilter<"agriculture"> | string
    LIBGEO?: StringFilter<"agriculture"> | string
    EPCI?: StringFilter<"agriculture"> | string
    LIBEPCI?: StringFilter<"agriculture"> | string
    DEP?: StringFilter<"agriculture"> | string
    REG?: FloatFilter<"agriculture"> | number
    part_irr_SAU_2020?: FloatNullableFilter<"agriculture"> | number | null
    part_over_55?: FloatNullableFilter<"agriculture"> | number | null
  }

  export type agricultureOrderByWithRelationInput = {
    index?: SortOrder
    CODGEO?: SortOrder
    LIBGEO?: SortOrder
    EPCI?: SortOrder
    LIBEPCI?: SortOrder
    DEP?: SortOrder
    REG?: SortOrder
    part_irr_SAU_2020?: SortOrderInput | SortOrder
    part_over_55?: SortOrderInput | SortOrder
  }

  export type agricultureWhereUniqueInput = Prisma.AtLeast<{
    index?: bigint | number
    AND?: agricultureWhereInput | agricultureWhereInput[]
    OR?: agricultureWhereInput[]
    NOT?: agricultureWhereInput | agricultureWhereInput[]
    CODGEO?: StringFilter<"agriculture"> | string
    LIBGEO?: StringFilter<"agriculture"> | string
    EPCI?: StringFilter<"agriculture"> | string
    LIBEPCI?: StringFilter<"agriculture"> | string
    DEP?: StringFilter<"agriculture"> | string
    REG?: FloatFilter<"agriculture"> | number
    part_irr_SAU_2020?: FloatNullableFilter<"agriculture"> | number | null
    part_over_55?: FloatNullableFilter<"agriculture"> | number | null
  }, "index">

  export type agricultureOrderByWithAggregationInput = {
    index?: SortOrder
    CODGEO?: SortOrder
    LIBGEO?: SortOrder
    EPCI?: SortOrder
    LIBEPCI?: SortOrder
    DEP?: SortOrder
    REG?: SortOrder
    part_irr_SAU_2020?: SortOrderInput | SortOrder
    part_over_55?: SortOrderInput | SortOrder
    _count?: agricultureCountOrderByAggregateInput
    _avg?: agricultureAvgOrderByAggregateInput
    _max?: agricultureMaxOrderByAggregateInput
    _min?: agricultureMinOrderByAggregateInput
    _sum?: agricultureSumOrderByAggregateInput
  }

  export type agricultureScalarWhereWithAggregatesInput = {
    AND?: agricultureScalarWhereWithAggregatesInput | agricultureScalarWhereWithAggregatesInput[]
    OR?: agricultureScalarWhereWithAggregatesInput[]
    NOT?: agricultureScalarWhereWithAggregatesInput | agricultureScalarWhereWithAggregatesInput[]
    index?: BigIntWithAggregatesFilter<"agriculture"> | bigint | number
    CODGEO?: StringWithAggregatesFilter<"agriculture"> | string
    LIBGEO?: StringWithAggregatesFilter<"agriculture"> | string
    EPCI?: StringWithAggregatesFilter<"agriculture"> | string
    LIBEPCI?: StringWithAggregatesFilter<"agriculture"> | string
    DEP?: StringWithAggregatesFilter<"agriculture"> | string
    REG?: FloatWithAggregatesFilter<"agriculture"> | number
    part_irr_SAU_2020?: FloatNullableWithAggregatesFilter<"agriculture"> | number | null
    part_over_55?: FloatNullableWithAggregatesFilter<"agriculture"> | number | null
  }

  export type incendies_foretWhereInput = {
    AND?: incendies_foretWhereInput | incendies_foretWhereInput[]
    OR?: incendies_foretWhereInput[]
    NOT?: incendies_foretWhereInput | incendies_foretWhereInput[]
    index?: BigIntFilter<"incendies_foret"> | bigint | number
    code_geographique?: StringFilter<"incendies_foret"> | string
    libelle_geographique?: StringFilter<"incendies_foret"> | string
    epci?: StringFilter<"incendies_foret"> | string
    libelle_epci?: StringFilter<"incendies_foret"> | string
    departement?: StringFilter<"incendies_foret"> | string
    region?: FloatFilter<"incendies_foret"> | number
    nature?: StringNullableFilter<"incendies_foret"> | string | null
    annee?: IntFilter<"incendies_foret"> | number
    surface_parcourue?: FloatFilter<"incendies_foret"> | number
    surface_foret?: FloatNullableFilter<"incendies_foret"> | number | null
    surface_maquis_garrigues?: FloatNullableFilter<"incendies_foret"> | number | null
    autres_surfaces_naturelles_hors_foret?: FloatNullableFilter<"incendies_foret"> | number | null
    surfaces_agricoles?: FloatNullableFilter<"incendies_foret"> | number | null
    surfaces_non_boisees?: FloatNullableFilter<"incendies_foret"> | number | null
    surfaces_non_boisees_artificialisees?: FloatNullableFilter<"incendies_foret"> | number | null
    surfaces_non_boisees_naturelles?: FloatNullableFilter<"incendies_foret"> | number | null
    surface_autres_terres_boisees?: FloatNullableFilter<"incendies_foret"> | number | null
    autres_surfaces?: FloatNullableFilter<"incendies_foret"> | number | null
  }

  export type incendies_foretOrderByWithRelationInput = {
    index?: SortOrder
    code_geographique?: SortOrder
    libelle_geographique?: SortOrder
    epci?: SortOrder
    libelle_epci?: SortOrder
    departement?: SortOrder
    region?: SortOrder
    nature?: SortOrderInput | SortOrder
    annee?: SortOrder
    surface_parcourue?: SortOrder
    surface_foret?: SortOrderInput | SortOrder
    surface_maquis_garrigues?: SortOrderInput | SortOrder
    autres_surfaces_naturelles_hors_foret?: SortOrderInput | SortOrder
    surfaces_agricoles?: SortOrderInput | SortOrder
    surfaces_non_boisees?: SortOrderInput | SortOrder
    surfaces_non_boisees_artificialisees?: SortOrderInput | SortOrder
    surfaces_non_boisees_naturelles?: SortOrderInput | SortOrder
    surface_autres_terres_boisees?: SortOrderInput | SortOrder
    autres_surfaces?: SortOrderInput | SortOrder
  }

  export type incendies_foretWhereUniqueInput = Prisma.AtLeast<{
    index?: bigint | number
    AND?: incendies_foretWhereInput | incendies_foretWhereInput[]
    OR?: incendies_foretWhereInput[]
    NOT?: incendies_foretWhereInput | incendies_foretWhereInput[]
    code_geographique?: StringFilter<"incendies_foret"> | string
    libelle_geographique?: StringFilter<"incendies_foret"> | string
    epci?: StringFilter<"incendies_foret"> | string
    libelle_epci?: StringFilter<"incendies_foret"> | string
    departement?: StringFilter<"incendies_foret"> | string
    region?: FloatFilter<"incendies_foret"> | number
    nature?: StringNullableFilter<"incendies_foret"> | string | null
    annee?: IntFilter<"incendies_foret"> | number
    surface_parcourue?: FloatFilter<"incendies_foret"> | number
    surface_foret?: FloatNullableFilter<"incendies_foret"> | number | null
    surface_maquis_garrigues?: FloatNullableFilter<"incendies_foret"> | number | null
    autres_surfaces_naturelles_hors_foret?: FloatNullableFilter<"incendies_foret"> | number | null
    surfaces_agricoles?: FloatNullableFilter<"incendies_foret"> | number | null
    surfaces_non_boisees?: FloatNullableFilter<"incendies_foret"> | number | null
    surfaces_non_boisees_artificialisees?: FloatNullableFilter<"incendies_foret"> | number | null
    surfaces_non_boisees_naturelles?: FloatNullableFilter<"incendies_foret"> | number | null
    surface_autres_terres_boisees?: FloatNullableFilter<"incendies_foret"> | number | null
    autres_surfaces?: FloatNullableFilter<"incendies_foret"> | number | null
  }, "index">

  export type incendies_foretOrderByWithAggregationInput = {
    index?: SortOrder
    code_geographique?: SortOrder
    libelle_geographique?: SortOrder
    epci?: SortOrder
    libelle_epci?: SortOrder
    departement?: SortOrder
    region?: SortOrder
    nature?: SortOrderInput | SortOrder
    annee?: SortOrder
    surface_parcourue?: SortOrder
    surface_foret?: SortOrderInput | SortOrder
    surface_maquis_garrigues?: SortOrderInput | SortOrder
    autres_surfaces_naturelles_hors_foret?: SortOrderInput | SortOrder
    surfaces_agricoles?: SortOrderInput | SortOrder
    surfaces_non_boisees?: SortOrderInput | SortOrder
    surfaces_non_boisees_artificialisees?: SortOrderInput | SortOrder
    surfaces_non_boisees_naturelles?: SortOrderInput | SortOrder
    surface_autres_terres_boisees?: SortOrderInput | SortOrder
    autres_surfaces?: SortOrderInput | SortOrder
    _count?: incendies_foretCountOrderByAggregateInput
    _avg?: incendies_foretAvgOrderByAggregateInput
    _max?: incendies_foretMaxOrderByAggregateInput
    _min?: incendies_foretMinOrderByAggregateInput
    _sum?: incendies_foretSumOrderByAggregateInput
  }

  export type incendies_foretScalarWhereWithAggregatesInput = {
    AND?: incendies_foretScalarWhereWithAggregatesInput | incendies_foretScalarWhereWithAggregatesInput[]
    OR?: incendies_foretScalarWhereWithAggregatesInput[]
    NOT?: incendies_foretScalarWhereWithAggregatesInput | incendies_foretScalarWhereWithAggregatesInput[]
    index?: BigIntWithAggregatesFilter<"incendies_foret"> | bigint | number
    code_geographique?: StringWithAggregatesFilter<"incendies_foret"> | string
    libelle_geographique?: StringWithAggregatesFilter<"incendies_foret"> | string
    epci?: StringWithAggregatesFilter<"incendies_foret"> | string
    libelle_epci?: StringWithAggregatesFilter<"incendies_foret"> | string
    departement?: StringWithAggregatesFilter<"incendies_foret"> | string
    region?: FloatWithAggregatesFilter<"incendies_foret"> | number
    nature?: StringNullableWithAggregatesFilter<"incendies_foret"> | string | null
    annee?: IntWithAggregatesFilter<"incendies_foret"> | number
    surface_parcourue?: FloatWithAggregatesFilter<"incendies_foret"> | number
    surface_foret?: FloatNullableWithAggregatesFilter<"incendies_foret"> | number | null
    surface_maquis_garrigues?: FloatNullableWithAggregatesFilter<"incendies_foret"> | number | null
    autres_surfaces_naturelles_hors_foret?: FloatNullableWithAggregatesFilter<"incendies_foret"> | number | null
    surfaces_agricoles?: FloatNullableWithAggregatesFilter<"incendies_foret"> | number | null
    surfaces_non_boisees?: FloatNullableWithAggregatesFilter<"incendies_foret"> | number | null
    surfaces_non_boisees_artificialisees?: FloatNullableWithAggregatesFilter<"incendies_foret"> | number | null
    surfaces_non_boisees_naturelles?: FloatNullableWithAggregatesFilter<"incendies_foret"> | number | null
    surface_autres_terres_boisees?: FloatNullableWithAggregatesFilter<"incendies_foret"> | number | null
    autres_surfaces?: FloatNullableWithAggregatesFilter<"incendies_foret"> | number | null
  }

  export type inconfort_thermiqueCreateInput = {
    index: bigint | number
    code_geographique: string
    libelle_geographique: string
    epci: string
    libelle_epci: string
    departement: string
    region: number
    age_bati_post06?: number | null
    age_bati_91_05?: number | null
    age_bati_46_90?: number | null
    age_bati_19_45?: number | null
    age_bati_pre_19?: number | null
    under_4_sum_1968?: string | null
    to_80_sum_1968?: string | null
    over_80_sum_1968?: string | null
    under_4_sum_1975?: string | null
    to_80_sum_1975?: string | null
    over_80_sum_1975?: string | null
    under_4_sum_1982?: string | null
    to_80_sum_1982?: string | null
    over_80_sum_1982?: string | null
    under_4_sum_1990?: string | null
    to_80_sum_1990?: string | null
    over_80_sum_1990?: string | null
    under_4_sum_1999?: string | null
    to_80_sum_1999?: string | null
    over_80_sum_1999?: string | null
    under_4_sum_2009?: string | null
    to_80_sum_2009?: string | null
    over_80_sum_2009?: string | null
    under_4_sum_2014?: string | null
    to_80_sum_2014?: string | null
    over_80_sum_2014?: string | null
    under_4_sum_2020?: string | null
    to_80_sum_2020?: string | null
    over_80_sum_2020?: string | null
    P20_POP80P?: string | null
    P20_POP80P_PSEUL?: string | null
    P20_POP80P_PSEUL_PERCENT?: string | null
    tee_log?: number | null
    tee_mob?: number | null
    precarite_logement?: number | null
    NA5AZ_sum?: number | null
    NA5BE_sum?: number | null
    NA5FZ_sum?: number | null
    NA5GU_sum?: number | null
    NA5OQ_sum?: number | null
    s_geom_cstr_bati?: number | null
    hauteur?: number | null
    h_x_s?: number | null
    densite_bati?: number | null
    clc_1_artificialise?: number | null
    clc_2_agricole?: number | null
    clc_3_foret_semiNaturel?: number | null
    clc_4_humide?: number | null
    clc_5_eau?: number | null
    superf_choro?: number | null
  }

  export type inconfort_thermiqueUncheckedCreateInput = {
    index: bigint | number
    code_geographique: string
    libelle_geographique: string
    epci: string
    libelle_epci: string
    departement: string
    region: number
    age_bati_post06?: number | null
    age_bati_91_05?: number | null
    age_bati_46_90?: number | null
    age_bati_19_45?: number | null
    age_bati_pre_19?: number | null
    under_4_sum_1968?: string | null
    to_80_sum_1968?: string | null
    over_80_sum_1968?: string | null
    under_4_sum_1975?: string | null
    to_80_sum_1975?: string | null
    over_80_sum_1975?: string | null
    under_4_sum_1982?: string | null
    to_80_sum_1982?: string | null
    over_80_sum_1982?: string | null
    under_4_sum_1990?: string | null
    to_80_sum_1990?: string | null
    over_80_sum_1990?: string | null
    under_4_sum_1999?: string | null
    to_80_sum_1999?: string | null
    over_80_sum_1999?: string | null
    under_4_sum_2009?: string | null
    to_80_sum_2009?: string | null
    over_80_sum_2009?: string | null
    under_4_sum_2014?: string | null
    to_80_sum_2014?: string | null
    over_80_sum_2014?: string | null
    under_4_sum_2020?: string | null
    to_80_sum_2020?: string | null
    over_80_sum_2020?: string | null
    P20_POP80P?: string | null
    P20_POP80P_PSEUL?: string | null
    P20_POP80P_PSEUL_PERCENT?: string | null
    tee_log?: number | null
    tee_mob?: number | null
    precarite_logement?: number | null
    NA5AZ_sum?: number | null
    NA5BE_sum?: number | null
    NA5FZ_sum?: number | null
    NA5GU_sum?: number | null
    NA5OQ_sum?: number | null
    s_geom_cstr_bati?: number | null
    hauteur?: number | null
    h_x_s?: number | null
    densite_bati?: number | null
    clc_1_artificialise?: number | null
    clc_2_agricole?: number | null
    clc_3_foret_semiNaturel?: number | null
    clc_4_humide?: number | null
    clc_5_eau?: number | null
    superf_choro?: number | null
  }

  export type inconfort_thermiqueUpdateInput = {
    index?: BigIntFieldUpdateOperationsInput | bigint | number
    code_geographique?: StringFieldUpdateOperationsInput | string
    libelle_geographique?: StringFieldUpdateOperationsInput | string
    epci?: StringFieldUpdateOperationsInput | string
    libelle_epci?: StringFieldUpdateOperationsInput | string
    departement?: StringFieldUpdateOperationsInput | string
    region?: IntFieldUpdateOperationsInput | number
    age_bati_post06?: NullableFloatFieldUpdateOperationsInput | number | null
    age_bati_91_05?: NullableFloatFieldUpdateOperationsInput | number | null
    age_bati_46_90?: NullableFloatFieldUpdateOperationsInput | number | null
    age_bati_19_45?: NullableFloatFieldUpdateOperationsInput | number | null
    age_bati_pre_19?: NullableFloatFieldUpdateOperationsInput | number | null
    under_4_sum_1968?: NullableStringFieldUpdateOperationsInput | string | null
    to_80_sum_1968?: NullableStringFieldUpdateOperationsInput | string | null
    over_80_sum_1968?: NullableStringFieldUpdateOperationsInput | string | null
    under_4_sum_1975?: NullableStringFieldUpdateOperationsInput | string | null
    to_80_sum_1975?: NullableStringFieldUpdateOperationsInput | string | null
    over_80_sum_1975?: NullableStringFieldUpdateOperationsInput | string | null
    under_4_sum_1982?: NullableStringFieldUpdateOperationsInput | string | null
    to_80_sum_1982?: NullableStringFieldUpdateOperationsInput | string | null
    over_80_sum_1982?: NullableStringFieldUpdateOperationsInput | string | null
    under_4_sum_1990?: NullableStringFieldUpdateOperationsInput | string | null
    to_80_sum_1990?: NullableStringFieldUpdateOperationsInput | string | null
    over_80_sum_1990?: NullableStringFieldUpdateOperationsInput | string | null
    under_4_sum_1999?: NullableStringFieldUpdateOperationsInput | string | null
    to_80_sum_1999?: NullableStringFieldUpdateOperationsInput | string | null
    over_80_sum_1999?: NullableStringFieldUpdateOperationsInput | string | null
    under_4_sum_2009?: NullableStringFieldUpdateOperationsInput | string | null
    to_80_sum_2009?: NullableStringFieldUpdateOperationsInput | string | null
    over_80_sum_2009?: NullableStringFieldUpdateOperationsInput | string | null
    under_4_sum_2014?: NullableStringFieldUpdateOperationsInput | string | null
    to_80_sum_2014?: NullableStringFieldUpdateOperationsInput | string | null
    over_80_sum_2014?: NullableStringFieldUpdateOperationsInput | string | null
    under_4_sum_2020?: NullableStringFieldUpdateOperationsInput | string | null
    to_80_sum_2020?: NullableStringFieldUpdateOperationsInput | string | null
    over_80_sum_2020?: NullableStringFieldUpdateOperationsInput | string | null
    P20_POP80P?: NullableStringFieldUpdateOperationsInput | string | null
    P20_POP80P_PSEUL?: NullableStringFieldUpdateOperationsInput | string | null
    P20_POP80P_PSEUL_PERCENT?: NullableStringFieldUpdateOperationsInput | string | null
    tee_log?: NullableFloatFieldUpdateOperationsInput | number | null
    tee_mob?: NullableFloatFieldUpdateOperationsInput | number | null
    precarite_logement?: NullableFloatFieldUpdateOperationsInput | number | null
    NA5AZ_sum?: NullableFloatFieldUpdateOperationsInput | number | null
    NA5BE_sum?: NullableFloatFieldUpdateOperationsInput | number | null
    NA5FZ_sum?: NullableFloatFieldUpdateOperationsInput | number | null
    NA5GU_sum?: NullableFloatFieldUpdateOperationsInput | number | null
    NA5OQ_sum?: NullableFloatFieldUpdateOperationsInput | number | null
    s_geom_cstr_bati?: NullableFloatFieldUpdateOperationsInput | number | null
    hauteur?: NullableFloatFieldUpdateOperationsInput | number | null
    h_x_s?: NullableFloatFieldUpdateOperationsInput | number | null
    densite_bati?: NullableFloatFieldUpdateOperationsInput | number | null
    clc_1_artificialise?: NullableFloatFieldUpdateOperationsInput | number | null
    clc_2_agricole?: NullableFloatFieldUpdateOperationsInput | number | null
    clc_3_foret_semiNaturel?: NullableFloatFieldUpdateOperationsInput | number | null
    clc_4_humide?: NullableFloatFieldUpdateOperationsInput | number | null
    clc_5_eau?: NullableFloatFieldUpdateOperationsInput | number | null
    superf_choro?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type inconfort_thermiqueUncheckedUpdateInput = {
    index?: BigIntFieldUpdateOperationsInput | bigint | number
    code_geographique?: StringFieldUpdateOperationsInput | string
    libelle_geographique?: StringFieldUpdateOperationsInput | string
    epci?: StringFieldUpdateOperationsInput | string
    libelle_epci?: StringFieldUpdateOperationsInput | string
    departement?: StringFieldUpdateOperationsInput | string
    region?: IntFieldUpdateOperationsInput | number
    age_bati_post06?: NullableFloatFieldUpdateOperationsInput | number | null
    age_bati_91_05?: NullableFloatFieldUpdateOperationsInput | number | null
    age_bati_46_90?: NullableFloatFieldUpdateOperationsInput | number | null
    age_bati_19_45?: NullableFloatFieldUpdateOperationsInput | number | null
    age_bati_pre_19?: NullableFloatFieldUpdateOperationsInput | number | null
    under_4_sum_1968?: NullableStringFieldUpdateOperationsInput | string | null
    to_80_sum_1968?: NullableStringFieldUpdateOperationsInput | string | null
    over_80_sum_1968?: NullableStringFieldUpdateOperationsInput | string | null
    under_4_sum_1975?: NullableStringFieldUpdateOperationsInput | string | null
    to_80_sum_1975?: NullableStringFieldUpdateOperationsInput | string | null
    over_80_sum_1975?: NullableStringFieldUpdateOperationsInput | string | null
    under_4_sum_1982?: NullableStringFieldUpdateOperationsInput | string | null
    to_80_sum_1982?: NullableStringFieldUpdateOperationsInput | string | null
    over_80_sum_1982?: NullableStringFieldUpdateOperationsInput | string | null
    under_4_sum_1990?: NullableStringFieldUpdateOperationsInput | string | null
    to_80_sum_1990?: NullableStringFieldUpdateOperationsInput | string | null
    over_80_sum_1990?: NullableStringFieldUpdateOperationsInput | string | null
    under_4_sum_1999?: NullableStringFieldUpdateOperationsInput | string | null
    to_80_sum_1999?: NullableStringFieldUpdateOperationsInput | string | null
    over_80_sum_1999?: NullableStringFieldUpdateOperationsInput | string | null
    under_4_sum_2009?: NullableStringFieldUpdateOperationsInput | string | null
    to_80_sum_2009?: NullableStringFieldUpdateOperationsInput | string | null
    over_80_sum_2009?: NullableStringFieldUpdateOperationsInput | string | null
    under_4_sum_2014?: NullableStringFieldUpdateOperationsInput | string | null
    to_80_sum_2014?: NullableStringFieldUpdateOperationsInput | string | null
    over_80_sum_2014?: NullableStringFieldUpdateOperationsInput | string | null
    under_4_sum_2020?: NullableStringFieldUpdateOperationsInput | string | null
    to_80_sum_2020?: NullableStringFieldUpdateOperationsInput | string | null
    over_80_sum_2020?: NullableStringFieldUpdateOperationsInput | string | null
    P20_POP80P?: NullableStringFieldUpdateOperationsInput | string | null
    P20_POP80P_PSEUL?: NullableStringFieldUpdateOperationsInput | string | null
    P20_POP80P_PSEUL_PERCENT?: NullableStringFieldUpdateOperationsInput | string | null
    tee_log?: NullableFloatFieldUpdateOperationsInput | number | null
    tee_mob?: NullableFloatFieldUpdateOperationsInput | number | null
    precarite_logement?: NullableFloatFieldUpdateOperationsInput | number | null
    NA5AZ_sum?: NullableFloatFieldUpdateOperationsInput | number | null
    NA5BE_sum?: NullableFloatFieldUpdateOperationsInput | number | null
    NA5FZ_sum?: NullableFloatFieldUpdateOperationsInput | number | null
    NA5GU_sum?: NullableFloatFieldUpdateOperationsInput | number | null
    NA5OQ_sum?: NullableFloatFieldUpdateOperationsInput | number | null
    s_geom_cstr_bati?: NullableFloatFieldUpdateOperationsInput | number | null
    hauteur?: NullableFloatFieldUpdateOperationsInput | number | null
    h_x_s?: NullableFloatFieldUpdateOperationsInput | number | null
    densite_bati?: NullableFloatFieldUpdateOperationsInput | number | null
    clc_1_artificialise?: NullableFloatFieldUpdateOperationsInput | number | null
    clc_2_agricole?: NullableFloatFieldUpdateOperationsInput | number | null
    clc_3_foret_semiNaturel?: NullableFloatFieldUpdateOperationsInput | number | null
    clc_4_humide?: NullableFloatFieldUpdateOperationsInput | number | null
    clc_5_eau?: NullableFloatFieldUpdateOperationsInput | number | null
    superf_choro?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type inconfort_thermiqueCreateManyInput = {
    index: bigint | number
    code_geographique: string
    libelle_geographique: string
    epci: string
    libelle_epci: string
    departement: string
    region: number
    age_bati_post06?: number | null
    age_bati_91_05?: number | null
    age_bati_46_90?: number | null
    age_bati_19_45?: number | null
    age_bati_pre_19?: number | null
    under_4_sum_1968?: string | null
    to_80_sum_1968?: string | null
    over_80_sum_1968?: string | null
    under_4_sum_1975?: string | null
    to_80_sum_1975?: string | null
    over_80_sum_1975?: string | null
    under_4_sum_1982?: string | null
    to_80_sum_1982?: string | null
    over_80_sum_1982?: string | null
    under_4_sum_1990?: string | null
    to_80_sum_1990?: string | null
    over_80_sum_1990?: string | null
    under_4_sum_1999?: string | null
    to_80_sum_1999?: string | null
    over_80_sum_1999?: string | null
    under_4_sum_2009?: string | null
    to_80_sum_2009?: string | null
    over_80_sum_2009?: string | null
    under_4_sum_2014?: string | null
    to_80_sum_2014?: string | null
    over_80_sum_2014?: string | null
    under_4_sum_2020?: string | null
    to_80_sum_2020?: string | null
    over_80_sum_2020?: string | null
    P20_POP80P?: string | null
    P20_POP80P_PSEUL?: string | null
    P20_POP80P_PSEUL_PERCENT?: string | null
    tee_log?: number | null
    tee_mob?: number | null
    precarite_logement?: number | null
    NA5AZ_sum?: number | null
    NA5BE_sum?: number | null
    NA5FZ_sum?: number | null
    NA5GU_sum?: number | null
    NA5OQ_sum?: number | null
    s_geom_cstr_bati?: number | null
    hauteur?: number | null
    h_x_s?: number | null
    densite_bati?: number | null
    clc_1_artificialise?: number | null
    clc_2_agricole?: number | null
    clc_3_foret_semiNaturel?: number | null
    clc_4_humide?: number | null
    clc_5_eau?: number | null
    superf_choro?: number | null
  }

  export type inconfort_thermiqueUpdateManyMutationInput = {
    index?: BigIntFieldUpdateOperationsInput | bigint | number
    code_geographique?: StringFieldUpdateOperationsInput | string
    libelle_geographique?: StringFieldUpdateOperationsInput | string
    epci?: StringFieldUpdateOperationsInput | string
    libelle_epci?: StringFieldUpdateOperationsInput | string
    departement?: StringFieldUpdateOperationsInput | string
    region?: IntFieldUpdateOperationsInput | number
    age_bati_post06?: NullableFloatFieldUpdateOperationsInput | number | null
    age_bati_91_05?: NullableFloatFieldUpdateOperationsInput | number | null
    age_bati_46_90?: NullableFloatFieldUpdateOperationsInput | number | null
    age_bati_19_45?: NullableFloatFieldUpdateOperationsInput | number | null
    age_bati_pre_19?: NullableFloatFieldUpdateOperationsInput | number | null
    under_4_sum_1968?: NullableStringFieldUpdateOperationsInput | string | null
    to_80_sum_1968?: NullableStringFieldUpdateOperationsInput | string | null
    over_80_sum_1968?: NullableStringFieldUpdateOperationsInput | string | null
    under_4_sum_1975?: NullableStringFieldUpdateOperationsInput | string | null
    to_80_sum_1975?: NullableStringFieldUpdateOperationsInput | string | null
    over_80_sum_1975?: NullableStringFieldUpdateOperationsInput | string | null
    under_4_sum_1982?: NullableStringFieldUpdateOperationsInput | string | null
    to_80_sum_1982?: NullableStringFieldUpdateOperationsInput | string | null
    over_80_sum_1982?: NullableStringFieldUpdateOperationsInput | string | null
    under_4_sum_1990?: NullableStringFieldUpdateOperationsInput | string | null
    to_80_sum_1990?: NullableStringFieldUpdateOperationsInput | string | null
    over_80_sum_1990?: NullableStringFieldUpdateOperationsInput | string | null
    under_4_sum_1999?: NullableStringFieldUpdateOperationsInput | string | null
    to_80_sum_1999?: NullableStringFieldUpdateOperationsInput | string | null
    over_80_sum_1999?: NullableStringFieldUpdateOperationsInput | string | null
    under_4_sum_2009?: NullableStringFieldUpdateOperationsInput | string | null
    to_80_sum_2009?: NullableStringFieldUpdateOperationsInput | string | null
    over_80_sum_2009?: NullableStringFieldUpdateOperationsInput | string | null
    under_4_sum_2014?: NullableStringFieldUpdateOperationsInput | string | null
    to_80_sum_2014?: NullableStringFieldUpdateOperationsInput | string | null
    over_80_sum_2014?: NullableStringFieldUpdateOperationsInput | string | null
    under_4_sum_2020?: NullableStringFieldUpdateOperationsInput | string | null
    to_80_sum_2020?: NullableStringFieldUpdateOperationsInput | string | null
    over_80_sum_2020?: NullableStringFieldUpdateOperationsInput | string | null
    P20_POP80P?: NullableStringFieldUpdateOperationsInput | string | null
    P20_POP80P_PSEUL?: NullableStringFieldUpdateOperationsInput | string | null
    P20_POP80P_PSEUL_PERCENT?: NullableStringFieldUpdateOperationsInput | string | null
    tee_log?: NullableFloatFieldUpdateOperationsInput | number | null
    tee_mob?: NullableFloatFieldUpdateOperationsInput | number | null
    precarite_logement?: NullableFloatFieldUpdateOperationsInput | number | null
    NA5AZ_sum?: NullableFloatFieldUpdateOperationsInput | number | null
    NA5BE_sum?: NullableFloatFieldUpdateOperationsInput | number | null
    NA5FZ_sum?: NullableFloatFieldUpdateOperationsInput | number | null
    NA5GU_sum?: NullableFloatFieldUpdateOperationsInput | number | null
    NA5OQ_sum?: NullableFloatFieldUpdateOperationsInput | number | null
    s_geom_cstr_bati?: NullableFloatFieldUpdateOperationsInput | number | null
    hauteur?: NullableFloatFieldUpdateOperationsInput | number | null
    h_x_s?: NullableFloatFieldUpdateOperationsInput | number | null
    densite_bati?: NullableFloatFieldUpdateOperationsInput | number | null
    clc_1_artificialise?: NullableFloatFieldUpdateOperationsInput | number | null
    clc_2_agricole?: NullableFloatFieldUpdateOperationsInput | number | null
    clc_3_foret_semiNaturel?: NullableFloatFieldUpdateOperationsInput | number | null
    clc_4_humide?: NullableFloatFieldUpdateOperationsInput | number | null
    clc_5_eau?: NullableFloatFieldUpdateOperationsInput | number | null
    superf_choro?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type inconfort_thermiqueUncheckedUpdateManyInput = {
    index?: BigIntFieldUpdateOperationsInput | bigint | number
    code_geographique?: StringFieldUpdateOperationsInput | string
    libelle_geographique?: StringFieldUpdateOperationsInput | string
    epci?: StringFieldUpdateOperationsInput | string
    libelle_epci?: StringFieldUpdateOperationsInput | string
    departement?: StringFieldUpdateOperationsInput | string
    region?: IntFieldUpdateOperationsInput | number
    age_bati_post06?: NullableFloatFieldUpdateOperationsInput | number | null
    age_bati_91_05?: NullableFloatFieldUpdateOperationsInput | number | null
    age_bati_46_90?: NullableFloatFieldUpdateOperationsInput | number | null
    age_bati_19_45?: NullableFloatFieldUpdateOperationsInput | number | null
    age_bati_pre_19?: NullableFloatFieldUpdateOperationsInput | number | null
    under_4_sum_1968?: NullableStringFieldUpdateOperationsInput | string | null
    to_80_sum_1968?: NullableStringFieldUpdateOperationsInput | string | null
    over_80_sum_1968?: NullableStringFieldUpdateOperationsInput | string | null
    under_4_sum_1975?: NullableStringFieldUpdateOperationsInput | string | null
    to_80_sum_1975?: NullableStringFieldUpdateOperationsInput | string | null
    over_80_sum_1975?: NullableStringFieldUpdateOperationsInput | string | null
    under_4_sum_1982?: NullableStringFieldUpdateOperationsInput | string | null
    to_80_sum_1982?: NullableStringFieldUpdateOperationsInput | string | null
    over_80_sum_1982?: NullableStringFieldUpdateOperationsInput | string | null
    under_4_sum_1990?: NullableStringFieldUpdateOperationsInput | string | null
    to_80_sum_1990?: NullableStringFieldUpdateOperationsInput | string | null
    over_80_sum_1990?: NullableStringFieldUpdateOperationsInput | string | null
    under_4_sum_1999?: NullableStringFieldUpdateOperationsInput | string | null
    to_80_sum_1999?: NullableStringFieldUpdateOperationsInput | string | null
    over_80_sum_1999?: NullableStringFieldUpdateOperationsInput | string | null
    under_4_sum_2009?: NullableStringFieldUpdateOperationsInput | string | null
    to_80_sum_2009?: NullableStringFieldUpdateOperationsInput | string | null
    over_80_sum_2009?: NullableStringFieldUpdateOperationsInput | string | null
    under_4_sum_2014?: NullableStringFieldUpdateOperationsInput | string | null
    to_80_sum_2014?: NullableStringFieldUpdateOperationsInput | string | null
    over_80_sum_2014?: NullableStringFieldUpdateOperationsInput | string | null
    under_4_sum_2020?: NullableStringFieldUpdateOperationsInput | string | null
    to_80_sum_2020?: NullableStringFieldUpdateOperationsInput | string | null
    over_80_sum_2020?: NullableStringFieldUpdateOperationsInput | string | null
    P20_POP80P?: NullableStringFieldUpdateOperationsInput | string | null
    P20_POP80P_PSEUL?: NullableStringFieldUpdateOperationsInput | string | null
    P20_POP80P_PSEUL_PERCENT?: NullableStringFieldUpdateOperationsInput | string | null
    tee_log?: NullableFloatFieldUpdateOperationsInput | number | null
    tee_mob?: NullableFloatFieldUpdateOperationsInput | number | null
    precarite_logement?: NullableFloatFieldUpdateOperationsInput | number | null
    NA5AZ_sum?: NullableFloatFieldUpdateOperationsInput | number | null
    NA5BE_sum?: NullableFloatFieldUpdateOperationsInput | number | null
    NA5FZ_sum?: NullableFloatFieldUpdateOperationsInput | number | null
    NA5GU_sum?: NullableFloatFieldUpdateOperationsInput | number | null
    NA5OQ_sum?: NullableFloatFieldUpdateOperationsInput | number | null
    s_geom_cstr_bati?: NullableFloatFieldUpdateOperationsInput | number | null
    hauteur?: NullableFloatFieldUpdateOperationsInput | number | null
    h_x_s?: NullableFloatFieldUpdateOperationsInput | number | null
    densite_bati?: NullableFloatFieldUpdateOperationsInput | number | null
    clc_1_artificialise?: NullableFloatFieldUpdateOperationsInput | number | null
    clc_2_agricole?: NullableFloatFieldUpdateOperationsInput | number | null
    clc_3_foret_semiNaturel?: NullableFloatFieldUpdateOperationsInput | number | null
    clc_4_humide?: NullableFloatFieldUpdateOperationsInput | number | null
    clc_5_eau?: NullableFloatFieldUpdateOperationsInput | number | null
    superf_choro?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type clc_epciCreateInput = {
    legend?: string | null
    epci_code?: number | null
  }

  export type clc_epciUncheckedCreateInput = {
    pk?: number
    legend?: string | null
    epci_code?: number | null
  }

  export type clc_epciUpdateInput = {
    legend?: NullableStringFieldUpdateOperationsInput | string | null
    epci_code?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type clc_epciUncheckedUpdateInput = {
    pk?: IntFieldUpdateOperationsInput | number
    legend?: NullableStringFieldUpdateOperationsInput | string | null
    epci_code?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type clc_epciCreateManyInput = {
    pk?: number
    legend?: string | null
    epci_code?: number | null
  }

  export type clc_epciUpdateManyMutationInput = {
    legend?: NullableStringFieldUpdateOperationsInput | string | null
    epci_code?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type clc_epciUncheckedUpdateManyInput = {
    pk?: IntFieldUpdateOperationsInput | number
    legend?: NullableStringFieldUpdateOperationsInput | string | null
    epci_code?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type collectivites_searchbarCreateInput = {
    index: bigint | number
    code_commune?: string | null
    coordinates?: string | null
    libelle_commune?: string | null
    code_epci: string
    libelle_epci: string
    departement: string
    region: string
    search_code: string
    search_libelle: string
  }

  export type collectivites_searchbarUncheckedCreateInput = {
    index: bigint | number
    code_commune?: string | null
    coordinates?: string | null
    libelle_commune?: string | null
    code_epci: string
    libelle_epci: string
    departement: string
    region: string
    search_code: string
    search_libelle: string
  }

  export type collectivites_searchbarUpdateInput = {
    index?: BigIntFieldUpdateOperationsInput | bigint | number
    code_commune?: NullableStringFieldUpdateOperationsInput | string | null
    coordinates?: NullableStringFieldUpdateOperationsInput | string | null
    libelle_commune?: NullableStringFieldUpdateOperationsInput | string | null
    code_epci?: StringFieldUpdateOperationsInput | string
    libelle_epci?: StringFieldUpdateOperationsInput | string
    departement?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    search_code?: StringFieldUpdateOperationsInput | string
    search_libelle?: StringFieldUpdateOperationsInput | string
  }

  export type collectivites_searchbarUncheckedUpdateInput = {
    index?: BigIntFieldUpdateOperationsInput | bigint | number
    code_commune?: NullableStringFieldUpdateOperationsInput | string | null
    coordinates?: NullableStringFieldUpdateOperationsInput | string | null
    libelle_commune?: NullableStringFieldUpdateOperationsInput | string | null
    code_epci?: StringFieldUpdateOperationsInput | string
    libelle_epci?: StringFieldUpdateOperationsInput | string
    departement?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    search_code?: StringFieldUpdateOperationsInput | string
    search_libelle?: StringFieldUpdateOperationsInput | string
  }

  export type collectivites_searchbarCreateManyInput = {
    index: bigint | number
    code_commune?: string | null
    coordinates?: string | null
    libelle_commune?: string | null
    code_epci: string
    libelle_epci: string
    departement: string
    region: string
    search_code: string
    search_libelle: string
  }

  export type collectivites_searchbarUpdateManyMutationInput = {
    index?: BigIntFieldUpdateOperationsInput | bigint | number
    code_commune?: NullableStringFieldUpdateOperationsInput | string | null
    coordinates?: NullableStringFieldUpdateOperationsInput | string | null
    libelle_commune?: NullableStringFieldUpdateOperationsInput | string | null
    code_epci?: StringFieldUpdateOperationsInput | string
    libelle_epci?: StringFieldUpdateOperationsInput | string
    departement?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    search_code?: StringFieldUpdateOperationsInput | string
    search_libelle?: StringFieldUpdateOperationsInput | string
  }

  export type collectivites_searchbarUncheckedUpdateManyInput = {
    index?: BigIntFieldUpdateOperationsInput | bigint | number
    code_commune?: NullableStringFieldUpdateOperationsInput | string | null
    coordinates?: NullableStringFieldUpdateOperationsInput | string | null
    libelle_commune?: NullableStringFieldUpdateOperationsInput | string | null
    code_epci?: StringFieldUpdateOperationsInput | string
    libelle_epci?: StringFieldUpdateOperationsInput | string
    departement?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    search_code?: StringFieldUpdateOperationsInput | string
    search_libelle?: StringFieldUpdateOperationsInput | string
  }

  export type biodiversiteCreateInput = {
    index: bigint | number
    code_geographique?: string | null
    type_touristique?: string | null
    libelle_geographique?: string | null
    epci?: string | null
    libelle_epci?: string | null
    departement?: string | null
    region?: number | null
  }

  export type biodiversiteUncheckedCreateInput = {
    index: bigint | number
    code_geographique?: string | null
    type_touristique?: string | null
    libelle_geographique?: string | null
    epci?: string | null
    libelle_epci?: string | null
    departement?: string | null
    region?: number | null
  }

  export type biodiversiteUpdateInput = {
    index?: BigIntFieldUpdateOperationsInput | bigint | number
    code_geographique?: NullableStringFieldUpdateOperationsInput | string | null
    type_touristique?: NullableStringFieldUpdateOperationsInput | string | null
    libelle_geographique?: NullableStringFieldUpdateOperationsInput | string | null
    epci?: NullableStringFieldUpdateOperationsInput | string | null
    libelle_epci?: NullableStringFieldUpdateOperationsInput | string | null
    departement?: NullableStringFieldUpdateOperationsInput | string | null
    region?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type biodiversiteUncheckedUpdateInput = {
    index?: BigIntFieldUpdateOperationsInput | bigint | number
    code_geographique?: NullableStringFieldUpdateOperationsInput | string | null
    type_touristique?: NullableStringFieldUpdateOperationsInput | string | null
    libelle_geographique?: NullableStringFieldUpdateOperationsInput | string | null
    epci?: NullableStringFieldUpdateOperationsInput | string | null
    libelle_epci?: NullableStringFieldUpdateOperationsInput | string | null
    departement?: NullableStringFieldUpdateOperationsInput | string | null
    region?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type biodiversiteCreateManyInput = {
    index: bigint | number
    code_geographique?: string | null
    type_touristique?: string | null
    libelle_geographique?: string | null
    epci?: string | null
    libelle_epci?: string | null
    departement?: string | null
    region?: number | null
  }

  export type biodiversiteUpdateManyMutationInput = {
    index?: BigIntFieldUpdateOperationsInput | bigint | number
    code_geographique?: NullableStringFieldUpdateOperationsInput | string | null
    type_touristique?: NullableStringFieldUpdateOperationsInput | string | null
    libelle_geographique?: NullableStringFieldUpdateOperationsInput | string | null
    epci?: NullableStringFieldUpdateOperationsInput | string | null
    libelle_epci?: NullableStringFieldUpdateOperationsInput | string | null
    departement?: NullableStringFieldUpdateOperationsInput | string | null
    region?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type biodiversiteUncheckedUpdateManyInput = {
    index?: BigIntFieldUpdateOperationsInput | bigint | number
    code_geographique?: NullableStringFieldUpdateOperationsInput | string | null
    type_touristique?: NullableStringFieldUpdateOperationsInput | string | null
    libelle_geographique?: NullableStringFieldUpdateOperationsInput | string | null
    epci?: NullableStringFieldUpdateOperationsInput | string | null
    libelle_epci?: NullableStringFieldUpdateOperationsInput | string | null
    departement?: NullableStringFieldUpdateOperationsInput | string | null
    region?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type gestion_risquesCreateInput = {
    index: bigint | number
    code_geographique?: string | null
    lib_risque_jo?: string | null
    dat_pub_arrete?: string | null
    libelle_geographique?: string | null
    epci?: string | null
    libelle_epci?: string | null
    departement?: string | null
    region?: number | null
  }

  export type gestion_risquesUncheckedCreateInput = {
    index: bigint | number
    code_geographique?: string | null
    lib_risque_jo?: string | null
    dat_pub_arrete?: string | null
    libelle_geographique?: string | null
    epci?: string | null
    libelle_epci?: string | null
    departement?: string | null
    region?: number | null
  }

  export type gestion_risquesUpdateInput = {
    index?: BigIntFieldUpdateOperationsInput | bigint | number
    code_geographique?: NullableStringFieldUpdateOperationsInput | string | null
    lib_risque_jo?: NullableStringFieldUpdateOperationsInput | string | null
    dat_pub_arrete?: NullableStringFieldUpdateOperationsInput | string | null
    libelle_geographique?: NullableStringFieldUpdateOperationsInput | string | null
    epci?: NullableStringFieldUpdateOperationsInput | string | null
    libelle_epci?: NullableStringFieldUpdateOperationsInput | string | null
    departement?: NullableStringFieldUpdateOperationsInput | string | null
    region?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type gestion_risquesUncheckedUpdateInput = {
    index?: BigIntFieldUpdateOperationsInput | bigint | number
    code_geographique?: NullableStringFieldUpdateOperationsInput | string | null
    lib_risque_jo?: NullableStringFieldUpdateOperationsInput | string | null
    dat_pub_arrete?: NullableStringFieldUpdateOperationsInput | string | null
    libelle_geographique?: NullableStringFieldUpdateOperationsInput | string | null
    epci?: NullableStringFieldUpdateOperationsInput | string | null
    libelle_epci?: NullableStringFieldUpdateOperationsInput | string | null
    departement?: NullableStringFieldUpdateOperationsInput | string | null
    region?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type gestion_risquesCreateManyInput = {
    index: bigint | number
    code_geographique?: string | null
    lib_risque_jo?: string | null
    dat_pub_arrete?: string | null
    libelle_geographique?: string | null
    epci?: string | null
    libelle_epci?: string | null
    departement?: string | null
    region?: number | null
  }

  export type gestion_risquesUpdateManyMutationInput = {
    index?: BigIntFieldUpdateOperationsInput | bigint | number
    code_geographique?: NullableStringFieldUpdateOperationsInput | string | null
    lib_risque_jo?: NullableStringFieldUpdateOperationsInput | string | null
    dat_pub_arrete?: NullableStringFieldUpdateOperationsInput | string | null
    libelle_geographique?: NullableStringFieldUpdateOperationsInput | string | null
    epci?: NullableStringFieldUpdateOperationsInput | string | null
    libelle_epci?: NullableStringFieldUpdateOperationsInput | string | null
    departement?: NullableStringFieldUpdateOperationsInput | string | null
    region?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type gestion_risquesUncheckedUpdateManyInput = {
    index?: BigIntFieldUpdateOperationsInput | bigint | number
    code_geographique?: NullableStringFieldUpdateOperationsInput | string | null
    lib_risque_jo?: NullableStringFieldUpdateOperationsInput | string | null
    dat_pub_arrete?: NullableStringFieldUpdateOperationsInput | string | null
    libelle_geographique?: NullableStringFieldUpdateOperationsInput | string | null
    epci?: NullableStringFieldUpdateOperationsInput | string | null
    libelle_epci?: NullableStringFieldUpdateOperationsInput | string | null
    departement?: NullableStringFieldUpdateOperationsInput | string | null
    region?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type communes_dromUpdateInput = {
    code_commune?: StringFieldUpdateOperationsInput | string
    libelle_commune?: StringFieldUpdateOperationsInput | string
    epci?: StringFieldUpdateOperationsInput | string
    libelle_epci?: StringFieldUpdateOperationsInput | string
    coordinates?: StringFieldUpdateOperationsInput | string
    densite_bati?: NullableFloatFieldUpdateOperationsInput | number | null
    precarite_logement?: NullableFloatFieldUpdateOperationsInput | number | null
    surface?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type communes_dromUncheckedUpdateInput = {
    pk?: IntFieldUpdateOperationsInput | number
    code_commune?: StringFieldUpdateOperationsInput | string
    libelle_commune?: StringFieldUpdateOperationsInput | string
    epci?: StringFieldUpdateOperationsInput | string
    libelle_epci?: StringFieldUpdateOperationsInput | string
    coordinates?: StringFieldUpdateOperationsInput | string
    densite_bati?: NullableFloatFieldUpdateOperationsInput | number | null
    precarite_logement?: NullableFloatFieldUpdateOperationsInput | number | null
    surface?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type communes_dromUpdateManyMutationInput = {
    code_commune?: StringFieldUpdateOperationsInput | string
    libelle_commune?: StringFieldUpdateOperationsInput | string
    epci?: StringFieldUpdateOperationsInput | string
    libelle_epci?: StringFieldUpdateOperationsInput | string
    coordinates?: StringFieldUpdateOperationsInput | string
    densite_bati?: NullableFloatFieldUpdateOperationsInput | number | null
    precarite_logement?: NullableFloatFieldUpdateOperationsInput | number | null
    surface?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type communes_dromUncheckedUpdateManyInput = {
    pk?: IntFieldUpdateOperationsInput | number
    code_commune?: StringFieldUpdateOperationsInput | string
    libelle_commune?: StringFieldUpdateOperationsInput | string
    epci?: StringFieldUpdateOperationsInput | string
    libelle_epci?: StringFieldUpdateOperationsInput | string
    coordinates?: StringFieldUpdateOperationsInput | string
    densite_bati?: NullableFloatFieldUpdateOperationsInput | number | null
    precarite_logement?: NullableFloatFieldUpdateOperationsInput | number | null
    surface?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type ressources_eauCreateInput = {
    index: bigint | number
    code_geographique: string
    LIBELLE_SOUS_CHAMP?: string | null
    SOUS_CHAMP?: string | null
    A2020?: number | null
    A2019?: number | null
    A2018?: number | null
    A2017?: number | null
    A2016?: number | null
    A2015?: number | null
    A2014?: number | null
    A2013?: number | null
    A2012?: number | null
    A2011?: number | null
    A2010?: number | null
    A2009?: number | null
    A2008?: number | null
    libelle_geographique?: string | null
    epci?: string | null
    libelle_epci?: string | null
    departement?: string | null
    region?: number | null
  }

  export type ressources_eauUncheckedCreateInput = {
    index: bigint | number
    code_geographique: string
    LIBELLE_SOUS_CHAMP?: string | null
    SOUS_CHAMP?: string | null
    A2020?: number | null
    A2019?: number | null
    A2018?: number | null
    A2017?: number | null
    A2016?: number | null
    A2015?: number | null
    A2014?: number | null
    A2013?: number | null
    A2012?: number | null
    A2011?: number | null
    A2010?: number | null
    A2009?: number | null
    A2008?: number | null
    libelle_geographique?: string | null
    epci?: string | null
    libelle_epci?: string | null
    departement?: string | null
    region?: number | null
  }

  export type ressources_eauUpdateInput = {
    index?: BigIntFieldUpdateOperationsInput | bigint | number
    code_geographique?: StringFieldUpdateOperationsInput | string
    LIBELLE_SOUS_CHAMP?: NullableStringFieldUpdateOperationsInput | string | null
    SOUS_CHAMP?: NullableStringFieldUpdateOperationsInput | string | null
    A2020?: NullableFloatFieldUpdateOperationsInput | number | null
    A2019?: NullableFloatFieldUpdateOperationsInput | number | null
    A2018?: NullableFloatFieldUpdateOperationsInput | number | null
    A2017?: NullableFloatFieldUpdateOperationsInput | number | null
    A2016?: NullableFloatFieldUpdateOperationsInput | number | null
    A2015?: NullableFloatFieldUpdateOperationsInput | number | null
    A2014?: NullableFloatFieldUpdateOperationsInput | number | null
    A2013?: NullableFloatFieldUpdateOperationsInput | number | null
    A2012?: NullableFloatFieldUpdateOperationsInput | number | null
    A2011?: NullableFloatFieldUpdateOperationsInput | number | null
    A2010?: NullableFloatFieldUpdateOperationsInput | number | null
    A2009?: NullableFloatFieldUpdateOperationsInput | number | null
    A2008?: NullableFloatFieldUpdateOperationsInput | number | null
    libelle_geographique?: NullableStringFieldUpdateOperationsInput | string | null
    epci?: NullableStringFieldUpdateOperationsInput | string | null
    libelle_epci?: NullableStringFieldUpdateOperationsInput | string | null
    departement?: NullableStringFieldUpdateOperationsInput | string | null
    region?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type ressources_eauUncheckedUpdateInput = {
    index?: BigIntFieldUpdateOperationsInput | bigint | number
    code_geographique?: StringFieldUpdateOperationsInput | string
    LIBELLE_SOUS_CHAMP?: NullableStringFieldUpdateOperationsInput | string | null
    SOUS_CHAMP?: NullableStringFieldUpdateOperationsInput | string | null
    A2020?: NullableFloatFieldUpdateOperationsInput | number | null
    A2019?: NullableFloatFieldUpdateOperationsInput | number | null
    A2018?: NullableFloatFieldUpdateOperationsInput | number | null
    A2017?: NullableFloatFieldUpdateOperationsInput | number | null
    A2016?: NullableFloatFieldUpdateOperationsInput | number | null
    A2015?: NullableFloatFieldUpdateOperationsInput | number | null
    A2014?: NullableFloatFieldUpdateOperationsInput | number | null
    A2013?: NullableFloatFieldUpdateOperationsInput | number | null
    A2012?: NullableFloatFieldUpdateOperationsInput | number | null
    A2011?: NullableFloatFieldUpdateOperationsInput | number | null
    A2010?: NullableFloatFieldUpdateOperationsInput | number | null
    A2009?: NullableFloatFieldUpdateOperationsInput | number | null
    A2008?: NullableFloatFieldUpdateOperationsInput | number | null
    libelle_geographique?: NullableStringFieldUpdateOperationsInput | string | null
    epci?: NullableStringFieldUpdateOperationsInput | string | null
    libelle_epci?: NullableStringFieldUpdateOperationsInput | string | null
    departement?: NullableStringFieldUpdateOperationsInput | string | null
    region?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type ressources_eauCreateManyInput = {
    index: bigint | number
    code_geographique: string
    LIBELLE_SOUS_CHAMP?: string | null
    SOUS_CHAMP?: string | null
    A2020?: number | null
    A2019?: number | null
    A2018?: number | null
    A2017?: number | null
    A2016?: number | null
    A2015?: number | null
    A2014?: number | null
    A2013?: number | null
    A2012?: number | null
    A2011?: number | null
    A2010?: number | null
    A2009?: number | null
    A2008?: number | null
    libelle_geographique?: string | null
    epci?: string | null
    libelle_epci?: string | null
    departement?: string | null
    region?: number | null
  }

  export type ressources_eauUpdateManyMutationInput = {
    index?: BigIntFieldUpdateOperationsInput | bigint | number
    code_geographique?: StringFieldUpdateOperationsInput | string
    LIBELLE_SOUS_CHAMP?: NullableStringFieldUpdateOperationsInput | string | null
    SOUS_CHAMP?: NullableStringFieldUpdateOperationsInput | string | null
    A2020?: NullableFloatFieldUpdateOperationsInput | number | null
    A2019?: NullableFloatFieldUpdateOperationsInput | number | null
    A2018?: NullableFloatFieldUpdateOperationsInput | number | null
    A2017?: NullableFloatFieldUpdateOperationsInput | number | null
    A2016?: NullableFloatFieldUpdateOperationsInput | number | null
    A2015?: NullableFloatFieldUpdateOperationsInput | number | null
    A2014?: NullableFloatFieldUpdateOperationsInput | number | null
    A2013?: NullableFloatFieldUpdateOperationsInput | number | null
    A2012?: NullableFloatFieldUpdateOperationsInput | number | null
    A2011?: NullableFloatFieldUpdateOperationsInput | number | null
    A2010?: NullableFloatFieldUpdateOperationsInput | number | null
    A2009?: NullableFloatFieldUpdateOperationsInput | number | null
    A2008?: NullableFloatFieldUpdateOperationsInput | number | null
    libelle_geographique?: NullableStringFieldUpdateOperationsInput | string | null
    epci?: NullableStringFieldUpdateOperationsInput | string | null
    libelle_epci?: NullableStringFieldUpdateOperationsInput | string | null
    departement?: NullableStringFieldUpdateOperationsInput | string | null
    region?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type ressources_eauUncheckedUpdateManyInput = {
    index?: BigIntFieldUpdateOperationsInput | bigint | number
    code_geographique?: StringFieldUpdateOperationsInput | string
    LIBELLE_SOUS_CHAMP?: NullableStringFieldUpdateOperationsInput | string | null
    SOUS_CHAMP?: NullableStringFieldUpdateOperationsInput | string | null
    A2020?: NullableFloatFieldUpdateOperationsInput | number | null
    A2019?: NullableFloatFieldUpdateOperationsInput | number | null
    A2018?: NullableFloatFieldUpdateOperationsInput | number | null
    A2017?: NullableFloatFieldUpdateOperationsInput | number | null
    A2016?: NullableFloatFieldUpdateOperationsInput | number | null
    A2015?: NullableFloatFieldUpdateOperationsInput | number | null
    A2014?: NullableFloatFieldUpdateOperationsInput | number | null
    A2013?: NullableFloatFieldUpdateOperationsInput | number | null
    A2012?: NullableFloatFieldUpdateOperationsInput | number | null
    A2011?: NullableFloatFieldUpdateOperationsInput | number | null
    A2010?: NullableFloatFieldUpdateOperationsInput | number | null
    A2009?: NullableFloatFieldUpdateOperationsInput | number | null
    A2008?: NullableFloatFieldUpdateOperationsInput | number | null
    libelle_geographique?: NullableStringFieldUpdateOperationsInput | string | null
    epci?: NullableStringFieldUpdateOperationsInput | string | null
    libelle_epci?: NullableStringFieldUpdateOperationsInput | string | null
    departement?: NullableStringFieldUpdateOperationsInput | string | null
    region?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type agriculture_bioCreateInput = {
    index: bigint | number
    epci: string
    libelle_epci: string
    VARIABLE: string
    LIBELLE_SOUS_CHAMP?: string | null
    surface_2022: number
    surface_2021: number
    surface_2020: number
    surface_2019: number
    nombre_2022: number
    nombre_2021: number
    nombre_2020: number
    nombre_2019: number
  }

  export type agriculture_bioUncheckedCreateInput = {
    index: bigint | number
    epci: string
    libelle_epci: string
    VARIABLE: string
    LIBELLE_SOUS_CHAMP?: string | null
    surface_2022: number
    surface_2021: number
    surface_2020: number
    surface_2019: number
    nombre_2022: number
    nombre_2021: number
    nombre_2020: number
    nombre_2019: number
  }

  export type agriculture_bioUpdateInput = {
    index?: BigIntFieldUpdateOperationsInput | bigint | number
    epci?: StringFieldUpdateOperationsInput | string
    libelle_epci?: StringFieldUpdateOperationsInput | string
    VARIABLE?: StringFieldUpdateOperationsInput | string
    LIBELLE_SOUS_CHAMP?: NullableStringFieldUpdateOperationsInput | string | null
    surface_2022?: FloatFieldUpdateOperationsInput | number
    surface_2021?: FloatFieldUpdateOperationsInput | number
    surface_2020?: FloatFieldUpdateOperationsInput | number
    surface_2019?: FloatFieldUpdateOperationsInput | number
    nombre_2022?: FloatFieldUpdateOperationsInput | number
    nombre_2021?: FloatFieldUpdateOperationsInput | number
    nombre_2020?: FloatFieldUpdateOperationsInput | number
    nombre_2019?: FloatFieldUpdateOperationsInput | number
  }

  export type agriculture_bioUncheckedUpdateInput = {
    index?: BigIntFieldUpdateOperationsInput | bigint | number
    epci?: StringFieldUpdateOperationsInput | string
    libelle_epci?: StringFieldUpdateOperationsInput | string
    VARIABLE?: StringFieldUpdateOperationsInput | string
    LIBELLE_SOUS_CHAMP?: NullableStringFieldUpdateOperationsInput | string | null
    surface_2022?: FloatFieldUpdateOperationsInput | number
    surface_2021?: FloatFieldUpdateOperationsInput | number
    surface_2020?: FloatFieldUpdateOperationsInput | number
    surface_2019?: FloatFieldUpdateOperationsInput | number
    nombre_2022?: FloatFieldUpdateOperationsInput | number
    nombre_2021?: FloatFieldUpdateOperationsInput | number
    nombre_2020?: FloatFieldUpdateOperationsInput | number
    nombre_2019?: FloatFieldUpdateOperationsInput | number
  }

  export type agriculture_bioCreateManyInput = {
    index: bigint | number
    epci: string
    libelle_epci: string
    VARIABLE: string
    LIBELLE_SOUS_CHAMP?: string | null
    surface_2022: number
    surface_2021: number
    surface_2020: number
    surface_2019: number
    nombre_2022: number
    nombre_2021: number
    nombre_2020: number
    nombre_2019: number
  }

  export type agriculture_bioUpdateManyMutationInput = {
    index?: BigIntFieldUpdateOperationsInput | bigint | number
    epci?: StringFieldUpdateOperationsInput | string
    libelle_epci?: StringFieldUpdateOperationsInput | string
    VARIABLE?: StringFieldUpdateOperationsInput | string
    LIBELLE_SOUS_CHAMP?: NullableStringFieldUpdateOperationsInput | string | null
    surface_2022?: FloatFieldUpdateOperationsInput | number
    surface_2021?: FloatFieldUpdateOperationsInput | number
    surface_2020?: FloatFieldUpdateOperationsInput | number
    surface_2019?: FloatFieldUpdateOperationsInput | number
    nombre_2022?: FloatFieldUpdateOperationsInput | number
    nombre_2021?: FloatFieldUpdateOperationsInput | number
    nombre_2020?: FloatFieldUpdateOperationsInput | number
    nombre_2019?: FloatFieldUpdateOperationsInput | number
  }

  export type agriculture_bioUncheckedUpdateManyInput = {
    index?: BigIntFieldUpdateOperationsInput | bigint | number
    epci?: StringFieldUpdateOperationsInput | string
    libelle_epci?: StringFieldUpdateOperationsInput | string
    VARIABLE?: StringFieldUpdateOperationsInput | string
    LIBELLE_SOUS_CHAMP?: NullableStringFieldUpdateOperationsInput | string | null
    surface_2022?: FloatFieldUpdateOperationsInput | number
    surface_2021?: FloatFieldUpdateOperationsInput | number
    surface_2020?: FloatFieldUpdateOperationsInput | number
    surface_2019?: FloatFieldUpdateOperationsInput | number
    nombre_2022?: FloatFieldUpdateOperationsInput | number
    nombre_2021?: FloatFieldUpdateOperationsInput | number
    nombre_2020?: FloatFieldUpdateOperationsInput | number
    nombre_2019?: FloatFieldUpdateOperationsInput | number
  }

  export type erosion_cotiereUpdateInput = {
    pk?: IntFieldUpdateOperationsInput | number
    taux?: FloatFieldUpdateOperationsInput | number
    duree?: FloatFieldUpdateOperationsInput | number
    tdc_ancien?: BigIntFieldUpdateOperationsInput | bigint | number
    tdc_rec?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type erosion_cotiereUncheckedUpdateInput = {
    pk?: IntFieldUpdateOperationsInput | number
    taux?: FloatFieldUpdateOperationsInput | number
    duree?: FloatFieldUpdateOperationsInput | number
    tdc_ancien?: BigIntFieldUpdateOperationsInput | bigint | number
    tdc_rec?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type erosion_cotiereUpdateManyMutationInput = {
    pk?: IntFieldUpdateOperationsInput | number
    taux?: FloatFieldUpdateOperationsInput | number
    duree?: FloatFieldUpdateOperationsInput | number
    tdc_ancien?: BigIntFieldUpdateOperationsInput | bigint | number
    tdc_rec?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type erosion_cotiereUncheckedUpdateManyInput = {
    pk?: IntFieldUpdateOperationsInput | number
    taux?: FloatFieldUpdateOperationsInput | number
    duree?: FloatFieldUpdateOperationsInput | number
    tdc_ancien?: BigIntFieldUpdateOperationsInput | bigint | number
    tdc_rec?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type epciUpdateInput = {
    epci_code?: StringFieldUpdateOperationsInput | string
  }

  export type epciUncheckedUpdateInput = {
    pk?: IntFieldUpdateOperationsInput | number
    epci_code?: StringFieldUpdateOperationsInput | string
  }

  export type epciUpdateManyMutationInput = {
    epci_code?: StringFieldUpdateOperationsInput | string
  }

  export type epciUncheckedUpdateManyInput = {
    pk?: IntFieldUpdateOperationsInput | number
    epci_code?: StringFieldUpdateOperationsInput | string
  }

  export type surfaces_protegeesCreateInput = {
    index: bigint | number
    code_geographique: string
    PNC?: string | null
    RAMSAR?: string | null
    PNR?: string | null
    PNP?: string | null
    FOR_PRO?: string | null
    ZZZ?: string | null
    ZNIEFF2?: string | null
    ZNIEFF1?: string | null
    RNR?: string | null
    TOU_PRO?: string | null
    NATURA?: string | null
    ZPS?: string | null
    SIC?: string | null
    CELRL?: string | null
    BIO?: string | null
    APB?: string | null
    RN?: string | null
    RBFD?: string | null
    RNCFS?: string | null
    libelle_geographique: string
    epci: string
    libelle_epci: string
    departement: string
    region: number
  }

  export type surfaces_protegeesUncheckedCreateInput = {
    index: bigint | number
    code_geographique: string
    PNC?: string | null
    RAMSAR?: string | null
    PNR?: string | null
    PNP?: string | null
    FOR_PRO?: string | null
    ZZZ?: string | null
    ZNIEFF2?: string | null
    ZNIEFF1?: string | null
    RNR?: string | null
    TOU_PRO?: string | null
    NATURA?: string | null
    ZPS?: string | null
    SIC?: string | null
    CELRL?: string | null
    BIO?: string | null
    APB?: string | null
    RN?: string | null
    RBFD?: string | null
    RNCFS?: string | null
    libelle_geographique: string
    epci: string
    libelle_epci: string
    departement: string
    region: number
  }

  export type surfaces_protegeesUpdateInput = {
    index?: BigIntFieldUpdateOperationsInput | bigint | number
    code_geographique?: StringFieldUpdateOperationsInput | string
    PNC?: NullableStringFieldUpdateOperationsInput | string | null
    RAMSAR?: NullableStringFieldUpdateOperationsInput | string | null
    PNR?: NullableStringFieldUpdateOperationsInput | string | null
    PNP?: NullableStringFieldUpdateOperationsInput | string | null
    FOR_PRO?: NullableStringFieldUpdateOperationsInput | string | null
    ZZZ?: NullableStringFieldUpdateOperationsInput | string | null
    ZNIEFF2?: NullableStringFieldUpdateOperationsInput | string | null
    ZNIEFF1?: NullableStringFieldUpdateOperationsInput | string | null
    RNR?: NullableStringFieldUpdateOperationsInput | string | null
    TOU_PRO?: NullableStringFieldUpdateOperationsInput | string | null
    NATURA?: NullableStringFieldUpdateOperationsInput | string | null
    ZPS?: NullableStringFieldUpdateOperationsInput | string | null
    SIC?: NullableStringFieldUpdateOperationsInput | string | null
    CELRL?: NullableStringFieldUpdateOperationsInput | string | null
    BIO?: NullableStringFieldUpdateOperationsInput | string | null
    APB?: NullableStringFieldUpdateOperationsInput | string | null
    RN?: NullableStringFieldUpdateOperationsInput | string | null
    RBFD?: NullableStringFieldUpdateOperationsInput | string | null
    RNCFS?: NullableStringFieldUpdateOperationsInput | string | null
    libelle_geographique?: StringFieldUpdateOperationsInput | string
    epci?: StringFieldUpdateOperationsInput | string
    libelle_epci?: StringFieldUpdateOperationsInput | string
    departement?: StringFieldUpdateOperationsInput | string
    region?: FloatFieldUpdateOperationsInput | number
  }

  export type surfaces_protegeesUncheckedUpdateInput = {
    index?: BigIntFieldUpdateOperationsInput | bigint | number
    code_geographique?: StringFieldUpdateOperationsInput | string
    PNC?: NullableStringFieldUpdateOperationsInput | string | null
    RAMSAR?: NullableStringFieldUpdateOperationsInput | string | null
    PNR?: NullableStringFieldUpdateOperationsInput | string | null
    PNP?: NullableStringFieldUpdateOperationsInput | string | null
    FOR_PRO?: NullableStringFieldUpdateOperationsInput | string | null
    ZZZ?: NullableStringFieldUpdateOperationsInput | string | null
    ZNIEFF2?: NullableStringFieldUpdateOperationsInput | string | null
    ZNIEFF1?: NullableStringFieldUpdateOperationsInput | string | null
    RNR?: NullableStringFieldUpdateOperationsInput | string | null
    TOU_PRO?: NullableStringFieldUpdateOperationsInput | string | null
    NATURA?: NullableStringFieldUpdateOperationsInput | string | null
    ZPS?: NullableStringFieldUpdateOperationsInput | string | null
    SIC?: NullableStringFieldUpdateOperationsInput | string | null
    CELRL?: NullableStringFieldUpdateOperationsInput | string | null
    BIO?: NullableStringFieldUpdateOperationsInput | string | null
    APB?: NullableStringFieldUpdateOperationsInput | string | null
    RN?: NullableStringFieldUpdateOperationsInput | string | null
    RBFD?: NullableStringFieldUpdateOperationsInput | string | null
    RNCFS?: NullableStringFieldUpdateOperationsInput | string | null
    libelle_geographique?: StringFieldUpdateOperationsInput | string
    epci?: StringFieldUpdateOperationsInput | string
    libelle_epci?: StringFieldUpdateOperationsInput | string
    departement?: StringFieldUpdateOperationsInput | string
    region?: FloatFieldUpdateOperationsInput | number
  }

  export type surfaces_protegeesCreateManyInput = {
    index: bigint | number
    code_geographique: string
    PNC?: string | null
    RAMSAR?: string | null
    PNR?: string | null
    PNP?: string | null
    FOR_PRO?: string | null
    ZZZ?: string | null
    ZNIEFF2?: string | null
    ZNIEFF1?: string | null
    RNR?: string | null
    TOU_PRO?: string | null
    NATURA?: string | null
    ZPS?: string | null
    SIC?: string | null
    CELRL?: string | null
    BIO?: string | null
    APB?: string | null
    RN?: string | null
    RBFD?: string | null
    RNCFS?: string | null
    libelle_geographique: string
    epci: string
    libelle_epci: string
    departement: string
    region: number
  }

  export type surfaces_protegeesUpdateManyMutationInput = {
    index?: BigIntFieldUpdateOperationsInput | bigint | number
    code_geographique?: StringFieldUpdateOperationsInput | string
    PNC?: NullableStringFieldUpdateOperationsInput | string | null
    RAMSAR?: NullableStringFieldUpdateOperationsInput | string | null
    PNR?: NullableStringFieldUpdateOperationsInput | string | null
    PNP?: NullableStringFieldUpdateOperationsInput | string | null
    FOR_PRO?: NullableStringFieldUpdateOperationsInput | string | null
    ZZZ?: NullableStringFieldUpdateOperationsInput | string | null
    ZNIEFF2?: NullableStringFieldUpdateOperationsInput | string | null
    ZNIEFF1?: NullableStringFieldUpdateOperationsInput | string | null
    RNR?: NullableStringFieldUpdateOperationsInput | string | null
    TOU_PRO?: NullableStringFieldUpdateOperationsInput | string | null
    NATURA?: NullableStringFieldUpdateOperationsInput | string | null
    ZPS?: NullableStringFieldUpdateOperationsInput | string | null
    SIC?: NullableStringFieldUpdateOperationsInput | string | null
    CELRL?: NullableStringFieldUpdateOperationsInput | string | null
    BIO?: NullableStringFieldUpdateOperationsInput | string | null
    APB?: NullableStringFieldUpdateOperationsInput | string | null
    RN?: NullableStringFieldUpdateOperationsInput | string | null
    RBFD?: NullableStringFieldUpdateOperationsInput | string | null
    RNCFS?: NullableStringFieldUpdateOperationsInput | string | null
    libelle_geographique?: StringFieldUpdateOperationsInput | string
    epci?: StringFieldUpdateOperationsInput | string
    libelle_epci?: StringFieldUpdateOperationsInput | string
    departement?: StringFieldUpdateOperationsInput | string
    region?: FloatFieldUpdateOperationsInput | number
  }

  export type surfaces_protegeesUncheckedUpdateManyInput = {
    index?: BigIntFieldUpdateOperationsInput | bigint | number
    code_geographique?: StringFieldUpdateOperationsInput | string
    PNC?: NullableStringFieldUpdateOperationsInput | string | null
    RAMSAR?: NullableStringFieldUpdateOperationsInput | string | null
    PNR?: NullableStringFieldUpdateOperationsInput | string | null
    PNP?: NullableStringFieldUpdateOperationsInput | string | null
    FOR_PRO?: NullableStringFieldUpdateOperationsInput | string | null
    ZZZ?: NullableStringFieldUpdateOperationsInput | string | null
    ZNIEFF2?: NullableStringFieldUpdateOperationsInput | string | null
    ZNIEFF1?: NullableStringFieldUpdateOperationsInput | string | null
    RNR?: NullableStringFieldUpdateOperationsInput | string | null
    TOU_PRO?: NullableStringFieldUpdateOperationsInput | string | null
    NATURA?: NullableStringFieldUpdateOperationsInput | string | null
    ZPS?: NullableStringFieldUpdateOperationsInput | string | null
    SIC?: NullableStringFieldUpdateOperationsInput | string | null
    CELRL?: NullableStringFieldUpdateOperationsInput | string | null
    BIO?: NullableStringFieldUpdateOperationsInput | string | null
    APB?: NullableStringFieldUpdateOperationsInput | string | null
    RN?: NullableStringFieldUpdateOperationsInput | string | null
    RBFD?: NullableStringFieldUpdateOperationsInput | string | null
    RNCFS?: NullableStringFieldUpdateOperationsInput | string | null
    libelle_geographique?: StringFieldUpdateOperationsInput | string
    epci?: StringFieldUpdateOperationsInput | string
    libelle_epci?: StringFieldUpdateOperationsInput | string
    departement?: StringFieldUpdateOperationsInput | string
    region?: FloatFieldUpdateOperationsInput | number
  }

  export type consommation_espaces_nafCreateInput = {
    index: bigint | number
    code_geographique: string
    libelle_geographique: string
    epci: string
    libelle_epci: string
    departement: string
    region: number
    naf09art10: number
    art09act10: number
    art09hab10: number
    art09mix10: number
    art09rou10: number
    art09fer10: number
    art09inc10: number
    naf10art11: number
    art10act11: number
    art10hab11: number
    art10mix11: number
    art10rou11: number
    art10fer11: number
    art10inc11: number
    naf11art12: number
    art11act12: number
    art11hab12: number
    art11mix12: number
    art11rou12: number
    art11fer12: number
    art11inc12: number
    naf12art13: number
    art12act13: number
    art12hab13: number
    art12mix13: number
    art12rou13: number
    art12fer13: number
    art12inc13: number
    naf13art14: number
    art13act14: number
    art13hab14: number
    art13mix14: number
    art13rou14: number
    art13fer14: number
    art13inc14: number
    naf14art15: number
    art14act15: number
    art14hab15: number
    art14mix15: number
    art14rou15: number
    art14fer15: number
    art14inc15: number
    naf15art16: number
    art15act16: number
    art15hab16: number
    art15mix16: number
    art15rou16: number
    art15fer16: number
    art15inc16: number
    naf16art17: number
    art16act17: number
    art16hab17: number
    art16mix17: number
    art16rou17: number
    art16fer17: number
    art16inc17: number
    naf17art18: number
    art17act18: number
    art17hab18: number
    art17mix18: number
    art17rou18: number
    art17fer18: number
    art17inc18: number
    naf18art19: number
    art18act19: number
    art18hab19: number
    art18mix19: number
    art18rou19: number
    art18fer19: number
    art18inc19: number
    naf19art20: number
    art19act20: number
    art19hab20: number
    art19mix20: number
    art19rou20: number
    art19fer20: number
    art19inc20: number
    naf20art21: number
    art20act21: number
    art20hab21: number
    art20mix21: number
    art20rou21: number
    art20fer21: number
    art20inc21: number
    naf21art22: number
    art21act22: number
    art21hab22: number
    art21mix22: number
    art21rou22: number
    art21fer22: number
    art21inc22: number
    naf22art23: number
    art22act23: number
    art22hab23: number
    art22mix23: number
    art22rou23: number
    art22fer23: number
    art22inc23: number
    naf09art23: number
    art09act23: number
    art09hab23: number
    art09mix23: number
    art09inc23: number
    art09rou23: number
    art09fer23: number
    artcom0923: number
    pop14: number
    pop20: number
    pop1420: number
    men14: number
    men20: number
    men1420: number
    emp14: number
    emp20: number
    emp1420: number
    mepart1420: number
    menhab1420: number
    artpop1420?: number | null
    surfcom2023: number
    C10_MEN?: number | null
    C15_MEN?: number | null
    C21_MEN?: number | null
  }

  export type consommation_espaces_nafUncheckedCreateInput = {
    index: bigint | number
    code_geographique: string
    libelle_geographique: string
    epci: string
    libelle_epci: string
    departement: string
    region: number
    naf09art10: number
    art09act10: number
    art09hab10: number
    art09mix10: number
    art09rou10: number
    art09fer10: number
    art09inc10: number
    naf10art11: number
    art10act11: number
    art10hab11: number
    art10mix11: number
    art10rou11: number
    art10fer11: number
    art10inc11: number
    naf11art12: number
    art11act12: number
    art11hab12: number
    art11mix12: number
    art11rou12: number
    art11fer12: number
    art11inc12: number
    naf12art13: number
    art12act13: number
    art12hab13: number
    art12mix13: number
    art12rou13: number
    art12fer13: number
    art12inc13: number
    naf13art14: number
    art13act14: number
    art13hab14: number
    art13mix14: number
    art13rou14: number
    art13fer14: number
    art13inc14: number
    naf14art15: number
    art14act15: number
    art14hab15: number
    art14mix15: number
    art14rou15: number
    art14fer15: number
    art14inc15: number
    naf15art16: number
    art15act16: number
    art15hab16: number
    art15mix16: number
    art15rou16: number
    art15fer16: number
    art15inc16: number
    naf16art17: number
    art16act17: number
    art16hab17: number
    art16mix17: number
    art16rou17: number
    art16fer17: number
    art16inc17: number
    naf17art18: number
    art17act18: number
    art17hab18: number
    art17mix18: number
    art17rou18: number
    art17fer18: number
    art17inc18: number
    naf18art19: number
    art18act19: number
    art18hab19: number
    art18mix19: number
    art18rou19: number
    art18fer19: number
    art18inc19: number
    naf19art20: number
    art19act20: number
    art19hab20: number
    art19mix20: number
    art19rou20: number
    art19fer20: number
    art19inc20: number
    naf20art21: number
    art20act21: number
    art20hab21: number
    art20mix21: number
    art20rou21: number
    art20fer21: number
    art20inc21: number
    naf21art22: number
    art21act22: number
    art21hab22: number
    art21mix22: number
    art21rou22: number
    art21fer22: number
    art21inc22: number
    naf22art23: number
    art22act23: number
    art22hab23: number
    art22mix23: number
    art22rou23: number
    art22fer23: number
    art22inc23: number
    naf09art23: number
    art09act23: number
    art09hab23: number
    art09mix23: number
    art09inc23: number
    art09rou23: number
    art09fer23: number
    artcom0923: number
    pop14: number
    pop20: number
    pop1420: number
    men14: number
    men20: number
    men1420: number
    emp14: number
    emp20: number
    emp1420: number
    mepart1420: number
    menhab1420: number
    artpop1420?: number | null
    surfcom2023: number
    C10_MEN?: number | null
    C15_MEN?: number | null
    C21_MEN?: number | null
  }

  export type consommation_espaces_nafUpdateInput = {
    index?: BigIntFieldUpdateOperationsInput | bigint | number
    code_geographique?: StringFieldUpdateOperationsInput | string
    libelle_geographique?: StringFieldUpdateOperationsInput | string
    epci?: StringFieldUpdateOperationsInput | string
    libelle_epci?: StringFieldUpdateOperationsInput | string
    departement?: StringFieldUpdateOperationsInput | string
    region?: IntFieldUpdateOperationsInput | number
    naf09art10?: FloatFieldUpdateOperationsInput | number
    art09act10?: FloatFieldUpdateOperationsInput | number
    art09hab10?: FloatFieldUpdateOperationsInput | number
    art09mix10?: FloatFieldUpdateOperationsInput | number
    art09rou10?: FloatFieldUpdateOperationsInput | number
    art09fer10?: FloatFieldUpdateOperationsInput | number
    art09inc10?: FloatFieldUpdateOperationsInput | number
    naf10art11?: FloatFieldUpdateOperationsInput | number
    art10act11?: FloatFieldUpdateOperationsInput | number
    art10hab11?: FloatFieldUpdateOperationsInput | number
    art10mix11?: FloatFieldUpdateOperationsInput | number
    art10rou11?: FloatFieldUpdateOperationsInput | number
    art10fer11?: FloatFieldUpdateOperationsInput | number
    art10inc11?: FloatFieldUpdateOperationsInput | number
    naf11art12?: FloatFieldUpdateOperationsInput | number
    art11act12?: FloatFieldUpdateOperationsInput | number
    art11hab12?: FloatFieldUpdateOperationsInput | number
    art11mix12?: FloatFieldUpdateOperationsInput | number
    art11rou12?: FloatFieldUpdateOperationsInput | number
    art11fer12?: FloatFieldUpdateOperationsInput | number
    art11inc12?: FloatFieldUpdateOperationsInput | number
    naf12art13?: FloatFieldUpdateOperationsInput | number
    art12act13?: FloatFieldUpdateOperationsInput | number
    art12hab13?: FloatFieldUpdateOperationsInput | number
    art12mix13?: FloatFieldUpdateOperationsInput | number
    art12rou13?: FloatFieldUpdateOperationsInput | number
    art12fer13?: FloatFieldUpdateOperationsInput | number
    art12inc13?: FloatFieldUpdateOperationsInput | number
    naf13art14?: FloatFieldUpdateOperationsInput | number
    art13act14?: FloatFieldUpdateOperationsInput | number
    art13hab14?: FloatFieldUpdateOperationsInput | number
    art13mix14?: FloatFieldUpdateOperationsInput | number
    art13rou14?: FloatFieldUpdateOperationsInput | number
    art13fer14?: FloatFieldUpdateOperationsInput | number
    art13inc14?: FloatFieldUpdateOperationsInput | number
    naf14art15?: FloatFieldUpdateOperationsInput | number
    art14act15?: FloatFieldUpdateOperationsInput | number
    art14hab15?: FloatFieldUpdateOperationsInput | number
    art14mix15?: FloatFieldUpdateOperationsInput | number
    art14rou15?: FloatFieldUpdateOperationsInput | number
    art14fer15?: FloatFieldUpdateOperationsInput | number
    art14inc15?: FloatFieldUpdateOperationsInput | number
    naf15art16?: FloatFieldUpdateOperationsInput | number
    art15act16?: FloatFieldUpdateOperationsInput | number
    art15hab16?: FloatFieldUpdateOperationsInput | number
    art15mix16?: FloatFieldUpdateOperationsInput | number
    art15rou16?: FloatFieldUpdateOperationsInput | number
    art15fer16?: FloatFieldUpdateOperationsInput | number
    art15inc16?: FloatFieldUpdateOperationsInput | number
    naf16art17?: FloatFieldUpdateOperationsInput | number
    art16act17?: FloatFieldUpdateOperationsInput | number
    art16hab17?: FloatFieldUpdateOperationsInput | number
    art16mix17?: FloatFieldUpdateOperationsInput | number
    art16rou17?: FloatFieldUpdateOperationsInput | number
    art16fer17?: FloatFieldUpdateOperationsInput | number
    art16inc17?: FloatFieldUpdateOperationsInput | number
    naf17art18?: FloatFieldUpdateOperationsInput | number
    art17act18?: FloatFieldUpdateOperationsInput | number
    art17hab18?: FloatFieldUpdateOperationsInput | number
    art17mix18?: FloatFieldUpdateOperationsInput | number
    art17rou18?: FloatFieldUpdateOperationsInput | number
    art17fer18?: FloatFieldUpdateOperationsInput | number
    art17inc18?: FloatFieldUpdateOperationsInput | number
    naf18art19?: FloatFieldUpdateOperationsInput | number
    art18act19?: FloatFieldUpdateOperationsInput | number
    art18hab19?: FloatFieldUpdateOperationsInput | number
    art18mix19?: FloatFieldUpdateOperationsInput | number
    art18rou19?: FloatFieldUpdateOperationsInput | number
    art18fer19?: FloatFieldUpdateOperationsInput | number
    art18inc19?: FloatFieldUpdateOperationsInput | number
    naf19art20?: FloatFieldUpdateOperationsInput | number
    art19act20?: FloatFieldUpdateOperationsInput | number
    art19hab20?: FloatFieldUpdateOperationsInput | number
    art19mix20?: FloatFieldUpdateOperationsInput | number
    art19rou20?: FloatFieldUpdateOperationsInput | number
    art19fer20?: FloatFieldUpdateOperationsInput | number
    art19inc20?: FloatFieldUpdateOperationsInput | number
    naf20art21?: FloatFieldUpdateOperationsInput | number
    art20act21?: FloatFieldUpdateOperationsInput | number
    art20hab21?: FloatFieldUpdateOperationsInput | number
    art20mix21?: FloatFieldUpdateOperationsInput | number
    art20rou21?: FloatFieldUpdateOperationsInput | number
    art20fer21?: FloatFieldUpdateOperationsInput | number
    art20inc21?: FloatFieldUpdateOperationsInput | number
    naf21art22?: FloatFieldUpdateOperationsInput | number
    art21act22?: FloatFieldUpdateOperationsInput | number
    art21hab22?: FloatFieldUpdateOperationsInput | number
    art21mix22?: FloatFieldUpdateOperationsInput | number
    art21rou22?: FloatFieldUpdateOperationsInput | number
    art21fer22?: FloatFieldUpdateOperationsInput | number
    art21inc22?: FloatFieldUpdateOperationsInput | number
    naf22art23?: FloatFieldUpdateOperationsInput | number
    art22act23?: FloatFieldUpdateOperationsInput | number
    art22hab23?: FloatFieldUpdateOperationsInput | number
    art22mix23?: FloatFieldUpdateOperationsInput | number
    art22rou23?: FloatFieldUpdateOperationsInput | number
    art22fer23?: FloatFieldUpdateOperationsInput | number
    art22inc23?: FloatFieldUpdateOperationsInput | number
    naf09art23?: FloatFieldUpdateOperationsInput | number
    art09act23?: FloatFieldUpdateOperationsInput | number
    art09hab23?: FloatFieldUpdateOperationsInput | number
    art09mix23?: FloatFieldUpdateOperationsInput | number
    art09inc23?: FloatFieldUpdateOperationsInput | number
    art09rou23?: FloatFieldUpdateOperationsInput | number
    art09fer23?: FloatFieldUpdateOperationsInput | number
    artcom0923?: FloatFieldUpdateOperationsInput | number
    pop14?: FloatFieldUpdateOperationsInput | number
    pop20?: FloatFieldUpdateOperationsInput | number
    pop1420?: FloatFieldUpdateOperationsInput | number
    men14?: FloatFieldUpdateOperationsInput | number
    men20?: FloatFieldUpdateOperationsInput | number
    men1420?: FloatFieldUpdateOperationsInput | number
    emp14?: FloatFieldUpdateOperationsInput | number
    emp20?: FloatFieldUpdateOperationsInput | number
    emp1420?: FloatFieldUpdateOperationsInput | number
    mepart1420?: FloatFieldUpdateOperationsInput | number
    menhab1420?: FloatFieldUpdateOperationsInput | number
    artpop1420?: NullableFloatFieldUpdateOperationsInput | number | null
    surfcom2023?: FloatFieldUpdateOperationsInput | number
    C10_MEN?: NullableFloatFieldUpdateOperationsInput | number | null
    C15_MEN?: NullableFloatFieldUpdateOperationsInput | number | null
    C21_MEN?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type consommation_espaces_nafUncheckedUpdateInput = {
    index?: BigIntFieldUpdateOperationsInput | bigint | number
    code_geographique?: StringFieldUpdateOperationsInput | string
    libelle_geographique?: StringFieldUpdateOperationsInput | string
    epci?: StringFieldUpdateOperationsInput | string
    libelle_epci?: StringFieldUpdateOperationsInput | string
    departement?: StringFieldUpdateOperationsInput | string
    region?: IntFieldUpdateOperationsInput | number
    naf09art10?: FloatFieldUpdateOperationsInput | number
    art09act10?: FloatFieldUpdateOperationsInput | number
    art09hab10?: FloatFieldUpdateOperationsInput | number
    art09mix10?: FloatFieldUpdateOperationsInput | number
    art09rou10?: FloatFieldUpdateOperationsInput | number
    art09fer10?: FloatFieldUpdateOperationsInput | number
    art09inc10?: FloatFieldUpdateOperationsInput | number
    naf10art11?: FloatFieldUpdateOperationsInput | number
    art10act11?: FloatFieldUpdateOperationsInput | number
    art10hab11?: FloatFieldUpdateOperationsInput | number
    art10mix11?: FloatFieldUpdateOperationsInput | number
    art10rou11?: FloatFieldUpdateOperationsInput | number
    art10fer11?: FloatFieldUpdateOperationsInput | number
    art10inc11?: FloatFieldUpdateOperationsInput | number
    naf11art12?: FloatFieldUpdateOperationsInput | number
    art11act12?: FloatFieldUpdateOperationsInput | number
    art11hab12?: FloatFieldUpdateOperationsInput | number
    art11mix12?: FloatFieldUpdateOperationsInput | number
    art11rou12?: FloatFieldUpdateOperationsInput | number
    art11fer12?: FloatFieldUpdateOperationsInput | number
    art11inc12?: FloatFieldUpdateOperationsInput | number
    naf12art13?: FloatFieldUpdateOperationsInput | number
    art12act13?: FloatFieldUpdateOperationsInput | number
    art12hab13?: FloatFieldUpdateOperationsInput | number
    art12mix13?: FloatFieldUpdateOperationsInput | number
    art12rou13?: FloatFieldUpdateOperationsInput | number
    art12fer13?: FloatFieldUpdateOperationsInput | number
    art12inc13?: FloatFieldUpdateOperationsInput | number
    naf13art14?: FloatFieldUpdateOperationsInput | number
    art13act14?: FloatFieldUpdateOperationsInput | number
    art13hab14?: FloatFieldUpdateOperationsInput | number
    art13mix14?: FloatFieldUpdateOperationsInput | number
    art13rou14?: FloatFieldUpdateOperationsInput | number
    art13fer14?: FloatFieldUpdateOperationsInput | number
    art13inc14?: FloatFieldUpdateOperationsInput | number
    naf14art15?: FloatFieldUpdateOperationsInput | number
    art14act15?: FloatFieldUpdateOperationsInput | number
    art14hab15?: FloatFieldUpdateOperationsInput | number
    art14mix15?: FloatFieldUpdateOperationsInput | number
    art14rou15?: FloatFieldUpdateOperationsInput | number
    art14fer15?: FloatFieldUpdateOperationsInput | number
    art14inc15?: FloatFieldUpdateOperationsInput | number
    naf15art16?: FloatFieldUpdateOperationsInput | number
    art15act16?: FloatFieldUpdateOperationsInput | number
    art15hab16?: FloatFieldUpdateOperationsInput | number
    art15mix16?: FloatFieldUpdateOperationsInput | number
    art15rou16?: FloatFieldUpdateOperationsInput | number
    art15fer16?: FloatFieldUpdateOperationsInput | number
    art15inc16?: FloatFieldUpdateOperationsInput | number
    naf16art17?: FloatFieldUpdateOperationsInput | number
    art16act17?: FloatFieldUpdateOperationsInput | number
    art16hab17?: FloatFieldUpdateOperationsInput | number
    art16mix17?: FloatFieldUpdateOperationsInput | number
    art16rou17?: FloatFieldUpdateOperationsInput | number
    art16fer17?: FloatFieldUpdateOperationsInput | number
    art16inc17?: FloatFieldUpdateOperationsInput | number
    naf17art18?: FloatFieldUpdateOperationsInput | number
    art17act18?: FloatFieldUpdateOperationsInput | number
    art17hab18?: FloatFieldUpdateOperationsInput | number
    art17mix18?: FloatFieldUpdateOperationsInput | number
    art17rou18?: FloatFieldUpdateOperationsInput | number
    art17fer18?: FloatFieldUpdateOperationsInput | number
    art17inc18?: FloatFieldUpdateOperationsInput | number
    naf18art19?: FloatFieldUpdateOperationsInput | number
    art18act19?: FloatFieldUpdateOperationsInput | number
    art18hab19?: FloatFieldUpdateOperationsInput | number
    art18mix19?: FloatFieldUpdateOperationsInput | number
    art18rou19?: FloatFieldUpdateOperationsInput | number
    art18fer19?: FloatFieldUpdateOperationsInput | number
    art18inc19?: FloatFieldUpdateOperationsInput | number
    naf19art20?: FloatFieldUpdateOperationsInput | number
    art19act20?: FloatFieldUpdateOperationsInput | number
    art19hab20?: FloatFieldUpdateOperationsInput | number
    art19mix20?: FloatFieldUpdateOperationsInput | number
    art19rou20?: FloatFieldUpdateOperationsInput | number
    art19fer20?: FloatFieldUpdateOperationsInput | number
    art19inc20?: FloatFieldUpdateOperationsInput | number
    naf20art21?: FloatFieldUpdateOperationsInput | number
    art20act21?: FloatFieldUpdateOperationsInput | number
    art20hab21?: FloatFieldUpdateOperationsInput | number
    art20mix21?: FloatFieldUpdateOperationsInput | number
    art20rou21?: FloatFieldUpdateOperationsInput | number
    art20fer21?: FloatFieldUpdateOperationsInput | number
    art20inc21?: FloatFieldUpdateOperationsInput | number
    naf21art22?: FloatFieldUpdateOperationsInput | number
    art21act22?: FloatFieldUpdateOperationsInput | number
    art21hab22?: FloatFieldUpdateOperationsInput | number
    art21mix22?: FloatFieldUpdateOperationsInput | number
    art21rou22?: FloatFieldUpdateOperationsInput | number
    art21fer22?: FloatFieldUpdateOperationsInput | number
    art21inc22?: FloatFieldUpdateOperationsInput | number
    naf22art23?: FloatFieldUpdateOperationsInput | number
    art22act23?: FloatFieldUpdateOperationsInput | number
    art22hab23?: FloatFieldUpdateOperationsInput | number
    art22mix23?: FloatFieldUpdateOperationsInput | number
    art22rou23?: FloatFieldUpdateOperationsInput | number
    art22fer23?: FloatFieldUpdateOperationsInput | number
    art22inc23?: FloatFieldUpdateOperationsInput | number
    naf09art23?: FloatFieldUpdateOperationsInput | number
    art09act23?: FloatFieldUpdateOperationsInput | number
    art09hab23?: FloatFieldUpdateOperationsInput | number
    art09mix23?: FloatFieldUpdateOperationsInput | number
    art09inc23?: FloatFieldUpdateOperationsInput | number
    art09rou23?: FloatFieldUpdateOperationsInput | number
    art09fer23?: FloatFieldUpdateOperationsInput | number
    artcom0923?: FloatFieldUpdateOperationsInput | number
    pop14?: FloatFieldUpdateOperationsInput | number
    pop20?: FloatFieldUpdateOperationsInput | number
    pop1420?: FloatFieldUpdateOperationsInput | number
    men14?: FloatFieldUpdateOperationsInput | number
    men20?: FloatFieldUpdateOperationsInput | number
    men1420?: FloatFieldUpdateOperationsInput | number
    emp14?: FloatFieldUpdateOperationsInput | number
    emp20?: FloatFieldUpdateOperationsInput | number
    emp1420?: FloatFieldUpdateOperationsInput | number
    mepart1420?: FloatFieldUpdateOperationsInput | number
    menhab1420?: FloatFieldUpdateOperationsInput | number
    artpop1420?: NullableFloatFieldUpdateOperationsInput | number | null
    surfcom2023?: FloatFieldUpdateOperationsInput | number
    C10_MEN?: NullableFloatFieldUpdateOperationsInput | number | null
    C15_MEN?: NullableFloatFieldUpdateOperationsInput | number | null
    C21_MEN?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type consommation_espaces_nafCreateManyInput = {
    index: bigint | number
    code_geographique: string
    libelle_geographique: string
    epci: string
    libelle_epci: string
    departement: string
    region: number
    naf09art10: number
    art09act10: number
    art09hab10: number
    art09mix10: number
    art09rou10: number
    art09fer10: number
    art09inc10: number
    naf10art11: number
    art10act11: number
    art10hab11: number
    art10mix11: number
    art10rou11: number
    art10fer11: number
    art10inc11: number
    naf11art12: number
    art11act12: number
    art11hab12: number
    art11mix12: number
    art11rou12: number
    art11fer12: number
    art11inc12: number
    naf12art13: number
    art12act13: number
    art12hab13: number
    art12mix13: number
    art12rou13: number
    art12fer13: number
    art12inc13: number
    naf13art14: number
    art13act14: number
    art13hab14: number
    art13mix14: number
    art13rou14: number
    art13fer14: number
    art13inc14: number
    naf14art15: number
    art14act15: number
    art14hab15: number
    art14mix15: number
    art14rou15: number
    art14fer15: number
    art14inc15: number
    naf15art16: number
    art15act16: number
    art15hab16: number
    art15mix16: number
    art15rou16: number
    art15fer16: number
    art15inc16: number
    naf16art17: number
    art16act17: number
    art16hab17: number
    art16mix17: number
    art16rou17: number
    art16fer17: number
    art16inc17: number
    naf17art18: number
    art17act18: number
    art17hab18: number
    art17mix18: number
    art17rou18: number
    art17fer18: number
    art17inc18: number
    naf18art19: number
    art18act19: number
    art18hab19: number
    art18mix19: number
    art18rou19: number
    art18fer19: number
    art18inc19: number
    naf19art20: number
    art19act20: number
    art19hab20: number
    art19mix20: number
    art19rou20: number
    art19fer20: number
    art19inc20: number
    naf20art21: number
    art20act21: number
    art20hab21: number
    art20mix21: number
    art20rou21: number
    art20fer21: number
    art20inc21: number
    naf21art22: number
    art21act22: number
    art21hab22: number
    art21mix22: number
    art21rou22: number
    art21fer22: number
    art21inc22: number
    naf22art23: number
    art22act23: number
    art22hab23: number
    art22mix23: number
    art22rou23: number
    art22fer23: number
    art22inc23: number
    naf09art23: number
    art09act23: number
    art09hab23: number
    art09mix23: number
    art09inc23: number
    art09rou23: number
    art09fer23: number
    artcom0923: number
    pop14: number
    pop20: number
    pop1420: number
    men14: number
    men20: number
    men1420: number
    emp14: number
    emp20: number
    emp1420: number
    mepart1420: number
    menhab1420: number
    artpop1420?: number | null
    surfcom2023: number
    C10_MEN?: number | null
    C15_MEN?: number | null
    C21_MEN?: number | null
  }

  export type consommation_espaces_nafUpdateManyMutationInput = {
    index?: BigIntFieldUpdateOperationsInput | bigint | number
    code_geographique?: StringFieldUpdateOperationsInput | string
    libelle_geographique?: StringFieldUpdateOperationsInput | string
    epci?: StringFieldUpdateOperationsInput | string
    libelle_epci?: StringFieldUpdateOperationsInput | string
    departement?: StringFieldUpdateOperationsInput | string
    region?: IntFieldUpdateOperationsInput | number
    naf09art10?: FloatFieldUpdateOperationsInput | number
    art09act10?: FloatFieldUpdateOperationsInput | number
    art09hab10?: FloatFieldUpdateOperationsInput | number
    art09mix10?: FloatFieldUpdateOperationsInput | number
    art09rou10?: FloatFieldUpdateOperationsInput | number
    art09fer10?: FloatFieldUpdateOperationsInput | number
    art09inc10?: FloatFieldUpdateOperationsInput | number
    naf10art11?: FloatFieldUpdateOperationsInput | number
    art10act11?: FloatFieldUpdateOperationsInput | number
    art10hab11?: FloatFieldUpdateOperationsInput | number
    art10mix11?: FloatFieldUpdateOperationsInput | number
    art10rou11?: FloatFieldUpdateOperationsInput | number
    art10fer11?: FloatFieldUpdateOperationsInput | number
    art10inc11?: FloatFieldUpdateOperationsInput | number
    naf11art12?: FloatFieldUpdateOperationsInput | number
    art11act12?: FloatFieldUpdateOperationsInput | number
    art11hab12?: FloatFieldUpdateOperationsInput | number
    art11mix12?: FloatFieldUpdateOperationsInput | number
    art11rou12?: FloatFieldUpdateOperationsInput | number
    art11fer12?: FloatFieldUpdateOperationsInput | number
    art11inc12?: FloatFieldUpdateOperationsInput | number
    naf12art13?: FloatFieldUpdateOperationsInput | number
    art12act13?: FloatFieldUpdateOperationsInput | number
    art12hab13?: FloatFieldUpdateOperationsInput | number
    art12mix13?: FloatFieldUpdateOperationsInput | number
    art12rou13?: FloatFieldUpdateOperationsInput | number
    art12fer13?: FloatFieldUpdateOperationsInput | number
    art12inc13?: FloatFieldUpdateOperationsInput | number
    naf13art14?: FloatFieldUpdateOperationsInput | number
    art13act14?: FloatFieldUpdateOperationsInput | number
    art13hab14?: FloatFieldUpdateOperationsInput | number
    art13mix14?: FloatFieldUpdateOperationsInput | number
    art13rou14?: FloatFieldUpdateOperationsInput | number
    art13fer14?: FloatFieldUpdateOperationsInput | number
    art13inc14?: FloatFieldUpdateOperationsInput | number
    naf14art15?: FloatFieldUpdateOperationsInput | number
    art14act15?: FloatFieldUpdateOperationsInput | number
    art14hab15?: FloatFieldUpdateOperationsInput | number
    art14mix15?: FloatFieldUpdateOperationsInput | number
    art14rou15?: FloatFieldUpdateOperationsInput | number
    art14fer15?: FloatFieldUpdateOperationsInput | number
    art14inc15?: FloatFieldUpdateOperationsInput | number
    naf15art16?: FloatFieldUpdateOperationsInput | number
    art15act16?: FloatFieldUpdateOperationsInput | number
    art15hab16?: FloatFieldUpdateOperationsInput | number
    art15mix16?: FloatFieldUpdateOperationsInput | number
    art15rou16?: FloatFieldUpdateOperationsInput | number
    art15fer16?: FloatFieldUpdateOperationsInput | number
    art15inc16?: FloatFieldUpdateOperationsInput | number
    naf16art17?: FloatFieldUpdateOperationsInput | number
    art16act17?: FloatFieldUpdateOperationsInput | number
    art16hab17?: FloatFieldUpdateOperationsInput | number
    art16mix17?: FloatFieldUpdateOperationsInput | number
    art16rou17?: FloatFieldUpdateOperationsInput | number
    art16fer17?: FloatFieldUpdateOperationsInput | number
    art16inc17?: FloatFieldUpdateOperationsInput | number
    naf17art18?: FloatFieldUpdateOperationsInput | number
    art17act18?: FloatFieldUpdateOperationsInput | number
    art17hab18?: FloatFieldUpdateOperationsInput | number
    art17mix18?: FloatFieldUpdateOperationsInput | number
    art17rou18?: FloatFieldUpdateOperationsInput | number
    art17fer18?: FloatFieldUpdateOperationsInput | number
    art17inc18?: FloatFieldUpdateOperationsInput | number
    naf18art19?: FloatFieldUpdateOperationsInput | number
    art18act19?: FloatFieldUpdateOperationsInput | number
    art18hab19?: FloatFieldUpdateOperationsInput | number
    art18mix19?: FloatFieldUpdateOperationsInput | number
    art18rou19?: FloatFieldUpdateOperationsInput | number
    art18fer19?: FloatFieldUpdateOperationsInput | number
    art18inc19?: FloatFieldUpdateOperationsInput | number
    naf19art20?: FloatFieldUpdateOperationsInput | number
    art19act20?: FloatFieldUpdateOperationsInput | number
    art19hab20?: FloatFieldUpdateOperationsInput | number
    art19mix20?: FloatFieldUpdateOperationsInput | number
    art19rou20?: FloatFieldUpdateOperationsInput | number
    art19fer20?: FloatFieldUpdateOperationsInput | number
    art19inc20?: FloatFieldUpdateOperationsInput | number
    naf20art21?: FloatFieldUpdateOperationsInput | number
    art20act21?: FloatFieldUpdateOperationsInput | number
    art20hab21?: FloatFieldUpdateOperationsInput | number
    art20mix21?: FloatFieldUpdateOperationsInput | number
    art20rou21?: FloatFieldUpdateOperationsInput | number
    art20fer21?: FloatFieldUpdateOperationsInput | number
    art20inc21?: FloatFieldUpdateOperationsInput | number
    naf21art22?: FloatFieldUpdateOperationsInput | number
    art21act22?: FloatFieldUpdateOperationsInput | number
    art21hab22?: FloatFieldUpdateOperationsInput | number
    art21mix22?: FloatFieldUpdateOperationsInput | number
    art21rou22?: FloatFieldUpdateOperationsInput | number
    art21fer22?: FloatFieldUpdateOperationsInput | number
    art21inc22?: FloatFieldUpdateOperationsInput | number
    naf22art23?: FloatFieldUpdateOperationsInput | number
    art22act23?: FloatFieldUpdateOperationsInput | number
    art22hab23?: FloatFieldUpdateOperationsInput | number
    art22mix23?: FloatFieldUpdateOperationsInput | number
    art22rou23?: FloatFieldUpdateOperationsInput | number
    art22fer23?: FloatFieldUpdateOperationsInput | number
    art22inc23?: FloatFieldUpdateOperationsInput | number
    naf09art23?: FloatFieldUpdateOperationsInput | number
    art09act23?: FloatFieldUpdateOperationsInput | number
    art09hab23?: FloatFieldUpdateOperationsInput | number
    art09mix23?: FloatFieldUpdateOperationsInput | number
    art09inc23?: FloatFieldUpdateOperationsInput | number
    art09rou23?: FloatFieldUpdateOperationsInput | number
    art09fer23?: FloatFieldUpdateOperationsInput | number
    artcom0923?: FloatFieldUpdateOperationsInput | number
    pop14?: FloatFieldUpdateOperationsInput | number
    pop20?: FloatFieldUpdateOperationsInput | number
    pop1420?: FloatFieldUpdateOperationsInput | number
    men14?: FloatFieldUpdateOperationsInput | number
    men20?: FloatFieldUpdateOperationsInput | number
    men1420?: FloatFieldUpdateOperationsInput | number
    emp14?: FloatFieldUpdateOperationsInput | number
    emp20?: FloatFieldUpdateOperationsInput | number
    emp1420?: FloatFieldUpdateOperationsInput | number
    mepart1420?: FloatFieldUpdateOperationsInput | number
    menhab1420?: FloatFieldUpdateOperationsInput | number
    artpop1420?: NullableFloatFieldUpdateOperationsInput | number | null
    surfcom2023?: FloatFieldUpdateOperationsInput | number
    C10_MEN?: NullableFloatFieldUpdateOperationsInput | number | null
    C15_MEN?: NullableFloatFieldUpdateOperationsInput | number | null
    C21_MEN?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type consommation_espaces_nafUncheckedUpdateManyInput = {
    index?: BigIntFieldUpdateOperationsInput | bigint | number
    code_geographique?: StringFieldUpdateOperationsInput | string
    libelle_geographique?: StringFieldUpdateOperationsInput | string
    epci?: StringFieldUpdateOperationsInput | string
    libelle_epci?: StringFieldUpdateOperationsInput | string
    departement?: StringFieldUpdateOperationsInput | string
    region?: IntFieldUpdateOperationsInput | number
    naf09art10?: FloatFieldUpdateOperationsInput | number
    art09act10?: FloatFieldUpdateOperationsInput | number
    art09hab10?: FloatFieldUpdateOperationsInput | number
    art09mix10?: FloatFieldUpdateOperationsInput | number
    art09rou10?: FloatFieldUpdateOperationsInput | number
    art09fer10?: FloatFieldUpdateOperationsInput | number
    art09inc10?: FloatFieldUpdateOperationsInput | number
    naf10art11?: FloatFieldUpdateOperationsInput | number
    art10act11?: FloatFieldUpdateOperationsInput | number
    art10hab11?: FloatFieldUpdateOperationsInput | number
    art10mix11?: FloatFieldUpdateOperationsInput | number
    art10rou11?: FloatFieldUpdateOperationsInput | number
    art10fer11?: FloatFieldUpdateOperationsInput | number
    art10inc11?: FloatFieldUpdateOperationsInput | number
    naf11art12?: FloatFieldUpdateOperationsInput | number
    art11act12?: FloatFieldUpdateOperationsInput | number
    art11hab12?: FloatFieldUpdateOperationsInput | number
    art11mix12?: FloatFieldUpdateOperationsInput | number
    art11rou12?: FloatFieldUpdateOperationsInput | number
    art11fer12?: FloatFieldUpdateOperationsInput | number
    art11inc12?: FloatFieldUpdateOperationsInput | number
    naf12art13?: FloatFieldUpdateOperationsInput | number
    art12act13?: FloatFieldUpdateOperationsInput | number
    art12hab13?: FloatFieldUpdateOperationsInput | number
    art12mix13?: FloatFieldUpdateOperationsInput | number
    art12rou13?: FloatFieldUpdateOperationsInput | number
    art12fer13?: FloatFieldUpdateOperationsInput | number
    art12inc13?: FloatFieldUpdateOperationsInput | number
    naf13art14?: FloatFieldUpdateOperationsInput | number
    art13act14?: FloatFieldUpdateOperationsInput | number
    art13hab14?: FloatFieldUpdateOperationsInput | number
    art13mix14?: FloatFieldUpdateOperationsInput | number
    art13rou14?: FloatFieldUpdateOperationsInput | number
    art13fer14?: FloatFieldUpdateOperationsInput | number
    art13inc14?: FloatFieldUpdateOperationsInput | number
    naf14art15?: FloatFieldUpdateOperationsInput | number
    art14act15?: FloatFieldUpdateOperationsInput | number
    art14hab15?: FloatFieldUpdateOperationsInput | number
    art14mix15?: FloatFieldUpdateOperationsInput | number
    art14rou15?: FloatFieldUpdateOperationsInput | number
    art14fer15?: FloatFieldUpdateOperationsInput | number
    art14inc15?: FloatFieldUpdateOperationsInput | number
    naf15art16?: FloatFieldUpdateOperationsInput | number
    art15act16?: FloatFieldUpdateOperationsInput | number
    art15hab16?: FloatFieldUpdateOperationsInput | number
    art15mix16?: FloatFieldUpdateOperationsInput | number
    art15rou16?: FloatFieldUpdateOperationsInput | number
    art15fer16?: FloatFieldUpdateOperationsInput | number
    art15inc16?: FloatFieldUpdateOperationsInput | number
    naf16art17?: FloatFieldUpdateOperationsInput | number
    art16act17?: FloatFieldUpdateOperationsInput | number
    art16hab17?: FloatFieldUpdateOperationsInput | number
    art16mix17?: FloatFieldUpdateOperationsInput | number
    art16rou17?: FloatFieldUpdateOperationsInput | number
    art16fer17?: FloatFieldUpdateOperationsInput | number
    art16inc17?: FloatFieldUpdateOperationsInput | number
    naf17art18?: FloatFieldUpdateOperationsInput | number
    art17act18?: FloatFieldUpdateOperationsInput | number
    art17hab18?: FloatFieldUpdateOperationsInput | number
    art17mix18?: FloatFieldUpdateOperationsInput | number
    art17rou18?: FloatFieldUpdateOperationsInput | number
    art17fer18?: FloatFieldUpdateOperationsInput | number
    art17inc18?: FloatFieldUpdateOperationsInput | number
    naf18art19?: FloatFieldUpdateOperationsInput | number
    art18act19?: FloatFieldUpdateOperationsInput | number
    art18hab19?: FloatFieldUpdateOperationsInput | number
    art18mix19?: FloatFieldUpdateOperationsInput | number
    art18rou19?: FloatFieldUpdateOperationsInput | number
    art18fer19?: FloatFieldUpdateOperationsInput | number
    art18inc19?: FloatFieldUpdateOperationsInput | number
    naf19art20?: FloatFieldUpdateOperationsInput | number
    art19act20?: FloatFieldUpdateOperationsInput | number
    art19hab20?: FloatFieldUpdateOperationsInput | number
    art19mix20?: FloatFieldUpdateOperationsInput | number
    art19rou20?: FloatFieldUpdateOperationsInput | number
    art19fer20?: FloatFieldUpdateOperationsInput | number
    art19inc20?: FloatFieldUpdateOperationsInput | number
    naf20art21?: FloatFieldUpdateOperationsInput | number
    art20act21?: FloatFieldUpdateOperationsInput | number
    art20hab21?: FloatFieldUpdateOperationsInput | number
    art20mix21?: FloatFieldUpdateOperationsInput | number
    art20rou21?: FloatFieldUpdateOperationsInput | number
    art20fer21?: FloatFieldUpdateOperationsInput | number
    art20inc21?: FloatFieldUpdateOperationsInput | number
    naf21art22?: FloatFieldUpdateOperationsInput | number
    art21act22?: FloatFieldUpdateOperationsInput | number
    art21hab22?: FloatFieldUpdateOperationsInput | number
    art21mix22?: FloatFieldUpdateOperationsInput | number
    art21rou22?: FloatFieldUpdateOperationsInput | number
    art21fer22?: FloatFieldUpdateOperationsInput | number
    art21inc22?: FloatFieldUpdateOperationsInput | number
    naf22art23?: FloatFieldUpdateOperationsInput | number
    art22act23?: FloatFieldUpdateOperationsInput | number
    art22hab23?: FloatFieldUpdateOperationsInput | number
    art22mix23?: FloatFieldUpdateOperationsInput | number
    art22rou23?: FloatFieldUpdateOperationsInput | number
    art22fer23?: FloatFieldUpdateOperationsInput | number
    art22inc23?: FloatFieldUpdateOperationsInput | number
    naf09art23?: FloatFieldUpdateOperationsInput | number
    art09act23?: FloatFieldUpdateOperationsInput | number
    art09hab23?: FloatFieldUpdateOperationsInput | number
    art09mix23?: FloatFieldUpdateOperationsInput | number
    art09inc23?: FloatFieldUpdateOperationsInput | number
    art09rou23?: FloatFieldUpdateOperationsInput | number
    art09fer23?: FloatFieldUpdateOperationsInput | number
    artcom0923?: FloatFieldUpdateOperationsInput | number
    pop14?: FloatFieldUpdateOperationsInput | number
    pop20?: FloatFieldUpdateOperationsInput | number
    pop1420?: FloatFieldUpdateOperationsInput | number
    men14?: FloatFieldUpdateOperationsInput | number
    men20?: FloatFieldUpdateOperationsInput | number
    men1420?: FloatFieldUpdateOperationsInput | number
    emp14?: FloatFieldUpdateOperationsInput | number
    emp20?: FloatFieldUpdateOperationsInput | number
    emp1420?: FloatFieldUpdateOperationsInput | number
    mepart1420?: FloatFieldUpdateOperationsInput | number
    menhab1420?: FloatFieldUpdateOperationsInput | number
    artpop1420?: NullableFloatFieldUpdateOperationsInput | number | null
    surfcom2023?: FloatFieldUpdateOperationsInput | number
    C10_MEN?: NullableFloatFieldUpdateOperationsInput | number | null
    C15_MEN?: NullableFloatFieldUpdateOperationsInput | number | null
    C21_MEN?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type north_star_metricCreateInput = {
    pk: number
    value: string
    date: Date | string
  }

  export type north_star_metricUncheckedCreateInput = {
    pk: number
    value: string
    date: Date | string
  }

  export type north_star_metricUpdateInput = {
    pk?: IntFieldUpdateOperationsInput | number
    value?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type north_star_metricUncheckedUpdateInput = {
    pk?: IntFieldUpdateOperationsInput | number
    value?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type north_star_metricCreateManyInput = {
    pk: number
    value: string
    date: Date | string
  }

  export type north_star_metricUpdateManyMutationInput = {
    pk?: IntFieldUpdateOperationsInput | number
    value?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type north_star_metricUncheckedUpdateManyInput = {
    pk?: IntFieldUpdateOperationsInput | number
    value?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type etat_cours_d_eauUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    longueur?: FloatFieldUpdateOperationsInput | number
    etateco?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type etat_cours_d_eauUncheckedUpdateInput = {
    pk?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    longueur?: FloatFieldUpdateOperationsInput | number
    etateco?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type etat_cours_d_eauUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    longueur?: FloatFieldUpdateOperationsInput | number
    etateco?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type etat_cours_d_eauUncheckedUpdateManyInput = {
    pk?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    longueur?: FloatFieldUpdateOperationsInput | number
    etateco?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type aot_40CreateInput = {
    index: bigint | number
    nom_site: string
    type_d_implantation: string
    valeur_brute: number
    Latitude: number
    Longitude: number
  }

  export type aot_40UncheckedCreateInput = {
    index: bigint | number
    nom_site: string
    type_d_implantation: string
    valeur_brute: number
    Latitude: number
    Longitude: number
  }

  export type aot_40UpdateInput = {
    index?: BigIntFieldUpdateOperationsInput | bigint | number
    nom_site?: StringFieldUpdateOperationsInput | string
    type_d_implantation?: StringFieldUpdateOperationsInput | string
    valeur_brute?: FloatFieldUpdateOperationsInput | number
    Latitude?: FloatFieldUpdateOperationsInput | number
    Longitude?: FloatFieldUpdateOperationsInput | number
  }

  export type aot_40UncheckedUpdateInput = {
    index?: BigIntFieldUpdateOperationsInput | bigint | number
    nom_site?: StringFieldUpdateOperationsInput | string
    type_d_implantation?: StringFieldUpdateOperationsInput | string
    valeur_brute?: FloatFieldUpdateOperationsInput | number
    Latitude?: FloatFieldUpdateOperationsInput | number
    Longitude?: FloatFieldUpdateOperationsInput | number
  }

  export type aot_40CreateManyInput = {
    index: bigint | number
    nom_site: string
    type_d_implantation: string
    valeur_brute: number
    Latitude: number
    Longitude: number
  }

  export type aot_40UpdateManyMutationInput = {
    index?: BigIntFieldUpdateOperationsInput | bigint | number
    nom_site?: StringFieldUpdateOperationsInput | string
    type_d_implantation?: StringFieldUpdateOperationsInput | string
    valeur_brute?: FloatFieldUpdateOperationsInput | number
    Latitude?: FloatFieldUpdateOperationsInput | number
    Longitude?: FloatFieldUpdateOperationsInput | number
  }

  export type aot_40UncheckedUpdateManyInput = {
    index?: BigIntFieldUpdateOperationsInput | bigint | number
    nom_site?: StringFieldUpdateOperationsInput | string
    type_d_implantation?: StringFieldUpdateOperationsInput | string
    valeur_brute?: FloatFieldUpdateOperationsInput | number
    Latitude?: FloatFieldUpdateOperationsInput | number
    Longitude?: FloatFieldUpdateOperationsInput | number
  }

  export type qualite_sites_baignadeCreateInput = {
    index: bigint | number
    DEP_NOM: string
    DEP_NUM: string
    TYPE: string
    COMMUNE: string
    POINT: string
    LONG: number
    LAT: number
    QEB_2013?: string | null
    QEB_2014?: string | null
    QEB_2015?: string | null
    QEB_2016?: string | null
    QEB_2017?: string | null
    QEB_2018?: string | null
    QEB_2019?: string | null
    QEB_2020?: string | null
  }

  export type qualite_sites_baignadeUncheckedCreateInput = {
    index: bigint | number
    DEP_NOM: string
    DEP_NUM: string
    TYPE: string
    COMMUNE: string
    POINT: string
    LONG: number
    LAT: number
    QEB_2013?: string | null
    QEB_2014?: string | null
    QEB_2015?: string | null
    QEB_2016?: string | null
    QEB_2017?: string | null
    QEB_2018?: string | null
    QEB_2019?: string | null
    QEB_2020?: string | null
  }

  export type qualite_sites_baignadeUpdateInput = {
    index?: BigIntFieldUpdateOperationsInput | bigint | number
    DEP_NOM?: StringFieldUpdateOperationsInput | string
    DEP_NUM?: StringFieldUpdateOperationsInput | string
    TYPE?: StringFieldUpdateOperationsInput | string
    COMMUNE?: StringFieldUpdateOperationsInput | string
    POINT?: StringFieldUpdateOperationsInput | string
    LONG?: FloatFieldUpdateOperationsInput | number
    LAT?: FloatFieldUpdateOperationsInput | number
    QEB_2013?: NullableStringFieldUpdateOperationsInput | string | null
    QEB_2014?: NullableStringFieldUpdateOperationsInput | string | null
    QEB_2015?: NullableStringFieldUpdateOperationsInput | string | null
    QEB_2016?: NullableStringFieldUpdateOperationsInput | string | null
    QEB_2017?: NullableStringFieldUpdateOperationsInput | string | null
    QEB_2018?: NullableStringFieldUpdateOperationsInput | string | null
    QEB_2019?: NullableStringFieldUpdateOperationsInput | string | null
    QEB_2020?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type qualite_sites_baignadeUncheckedUpdateInput = {
    index?: BigIntFieldUpdateOperationsInput | bigint | number
    DEP_NOM?: StringFieldUpdateOperationsInput | string
    DEP_NUM?: StringFieldUpdateOperationsInput | string
    TYPE?: StringFieldUpdateOperationsInput | string
    COMMUNE?: StringFieldUpdateOperationsInput | string
    POINT?: StringFieldUpdateOperationsInput | string
    LONG?: FloatFieldUpdateOperationsInput | number
    LAT?: FloatFieldUpdateOperationsInput | number
    QEB_2013?: NullableStringFieldUpdateOperationsInput | string | null
    QEB_2014?: NullableStringFieldUpdateOperationsInput | string | null
    QEB_2015?: NullableStringFieldUpdateOperationsInput | string | null
    QEB_2016?: NullableStringFieldUpdateOperationsInput | string | null
    QEB_2017?: NullableStringFieldUpdateOperationsInput | string | null
    QEB_2018?: NullableStringFieldUpdateOperationsInput | string | null
    QEB_2019?: NullableStringFieldUpdateOperationsInput | string | null
    QEB_2020?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type qualite_sites_baignadeCreateManyInput = {
    index: bigint | number
    DEP_NOM: string
    DEP_NUM: string
    TYPE: string
    COMMUNE: string
    POINT: string
    LONG: number
    LAT: number
    QEB_2013?: string | null
    QEB_2014?: string | null
    QEB_2015?: string | null
    QEB_2016?: string | null
    QEB_2017?: string | null
    QEB_2018?: string | null
    QEB_2019?: string | null
    QEB_2020?: string | null
  }

  export type qualite_sites_baignadeUpdateManyMutationInput = {
    index?: BigIntFieldUpdateOperationsInput | bigint | number
    DEP_NOM?: StringFieldUpdateOperationsInput | string
    DEP_NUM?: StringFieldUpdateOperationsInput | string
    TYPE?: StringFieldUpdateOperationsInput | string
    COMMUNE?: StringFieldUpdateOperationsInput | string
    POINT?: StringFieldUpdateOperationsInput | string
    LONG?: FloatFieldUpdateOperationsInput | number
    LAT?: FloatFieldUpdateOperationsInput | number
    QEB_2013?: NullableStringFieldUpdateOperationsInput | string | null
    QEB_2014?: NullableStringFieldUpdateOperationsInput | string | null
    QEB_2015?: NullableStringFieldUpdateOperationsInput | string | null
    QEB_2016?: NullableStringFieldUpdateOperationsInput | string | null
    QEB_2017?: NullableStringFieldUpdateOperationsInput | string | null
    QEB_2018?: NullableStringFieldUpdateOperationsInput | string | null
    QEB_2019?: NullableStringFieldUpdateOperationsInput | string | null
    QEB_2020?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type qualite_sites_baignadeUncheckedUpdateManyInput = {
    index?: BigIntFieldUpdateOperationsInput | bigint | number
    DEP_NOM?: StringFieldUpdateOperationsInput | string
    DEP_NUM?: StringFieldUpdateOperationsInput | string
    TYPE?: StringFieldUpdateOperationsInput | string
    COMMUNE?: StringFieldUpdateOperationsInput | string
    POINT?: StringFieldUpdateOperationsInput | string
    LONG?: FloatFieldUpdateOperationsInput | number
    LAT?: FloatFieldUpdateOperationsInput | number
    QEB_2013?: NullableStringFieldUpdateOperationsInput | string | null
    QEB_2014?: NullableStringFieldUpdateOperationsInput | string | null
    QEB_2015?: NullableStringFieldUpdateOperationsInput | string | null
    QEB_2016?: NullableStringFieldUpdateOperationsInput | string | null
    QEB_2017?: NullableStringFieldUpdateOperationsInput | string | null
    QEB_2018?: NullableStringFieldUpdateOperationsInput | string | null
    QEB_2019?: NullableStringFieldUpdateOperationsInput | string | null
    QEB_2020?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type communesCreateInput = {
    code_commune?: string | null
    libelle_commune?: string | null
    epci?: string | null
    libelle_epci?: string | null
    libgeo?: string | null
    coordinates?: string | null
    densite_bati?: number | null
    precarite_logement?: number | null
  }

  export type communesUncheckedCreateInput = {
    pk?: number
    code_commune?: string | null
    libelle_commune?: string | null
    epci?: string | null
    libelle_epci?: string | null
    libgeo?: string | null
    coordinates?: string | null
    densite_bati?: number | null
    precarite_logement?: number | null
  }

  export type communesUpdateInput = {
    code_commune?: NullableStringFieldUpdateOperationsInput | string | null
    libelle_commune?: NullableStringFieldUpdateOperationsInput | string | null
    epci?: NullableStringFieldUpdateOperationsInput | string | null
    libelle_epci?: NullableStringFieldUpdateOperationsInput | string | null
    libgeo?: NullableStringFieldUpdateOperationsInput | string | null
    coordinates?: NullableStringFieldUpdateOperationsInput | string | null
    densite_bati?: NullableFloatFieldUpdateOperationsInput | number | null
    precarite_logement?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type communesUncheckedUpdateInput = {
    pk?: IntFieldUpdateOperationsInput | number
    code_commune?: NullableStringFieldUpdateOperationsInput | string | null
    libelle_commune?: NullableStringFieldUpdateOperationsInput | string | null
    epci?: NullableStringFieldUpdateOperationsInput | string | null
    libelle_epci?: NullableStringFieldUpdateOperationsInput | string | null
    libgeo?: NullableStringFieldUpdateOperationsInput | string | null
    coordinates?: NullableStringFieldUpdateOperationsInput | string | null
    densite_bati?: NullableFloatFieldUpdateOperationsInput | number | null
    precarite_logement?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type communesCreateManyInput = {
    pk?: number
    code_commune?: string | null
    libelle_commune?: string | null
    epci?: string | null
    libelle_epci?: string | null
    libgeo?: string | null
    coordinates?: string | null
    densite_bati?: number | null
    precarite_logement?: number | null
  }

  export type communesUpdateManyMutationInput = {
    code_commune?: NullableStringFieldUpdateOperationsInput | string | null
    libelle_commune?: NullableStringFieldUpdateOperationsInput | string | null
    epci?: NullableStringFieldUpdateOperationsInput | string | null
    libelle_epci?: NullableStringFieldUpdateOperationsInput | string | null
    libgeo?: NullableStringFieldUpdateOperationsInput | string | null
    coordinates?: NullableStringFieldUpdateOperationsInput | string | null
    densite_bati?: NullableFloatFieldUpdateOperationsInput | number | null
    precarite_logement?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type communesUncheckedUpdateManyInput = {
    pk?: IntFieldUpdateOperationsInput | number
    code_commune?: NullableStringFieldUpdateOperationsInput | string | null
    libelle_commune?: NullableStringFieldUpdateOperationsInput | string | null
    epci?: NullableStringFieldUpdateOperationsInput | string | null
    libelle_epci?: NullableStringFieldUpdateOperationsInput | string | null
    libgeo?: NullableStringFieldUpdateOperationsInput | string | null
    coordinates?: NullableStringFieldUpdateOperationsInput | string | null
    densite_bati?: NullableFloatFieldUpdateOperationsInput | number | null
    precarite_logement?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type patch4cCreateInput = {
    index: bigint | number
    code_geographique: string
    niveaux_marins?: number | null
    feux_foret: number
    secheresse_sols: number
    fortes_precipitations: number
    fortes_chaleurs: number
  }

  export type patch4cUncheckedCreateInput = {
    index: bigint | number
    code_geographique: string
    niveaux_marins?: number | null
    feux_foret: number
    secheresse_sols: number
    fortes_precipitations: number
    fortes_chaleurs: number
  }

  export type patch4cUpdateInput = {
    index?: BigIntFieldUpdateOperationsInput | bigint | number
    code_geographique?: StringFieldUpdateOperationsInput | string
    niveaux_marins?: NullableFloatFieldUpdateOperationsInput | number | null
    feux_foret?: FloatFieldUpdateOperationsInput | number
    secheresse_sols?: FloatFieldUpdateOperationsInput | number
    fortes_precipitations?: FloatFieldUpdateOperationsInput | number
    fortes_chaleurs?: FloatFieldUpdateOperationsInput | number
  }

  export type patch4cUncheckedUpdateInput = {
    index?: BigIntFieldUpdateOperationsInput | bigint | number
    code_geographique?: StringFieldUpdateOperationsInput | string
    niveaux_marins?: NullableFloatFieldUpdateOperationsInput | number | null
    feux_foret?: FloatFieldUpdateOperationsInput | number
    secheresse_sols?: FloatFieldUpdateOperationsInput | number
    fortes_precipitations?: FloatFieldUpdateOperationsInput | number
    fortes_chaleurs?: FloatFieldUpdateOperationsInput | number
  }

  export type patch4cCreateManyInput = {
    index: bigint | number
    code_geographique: string
    niveaux_marins?: number | null
    feux_foret: number
    secheresse_sols: number
    fortes_precipitations: number
    fortes_chaleurs: number
  }

  export type patch4cUpdateManyMutationInput = {
    index?: BigIntFieldUpdateOperationsInput | bigint | number
    code_geographique?: StringFieldUpdateOperationsInput | string
    niveaux_marins?: NullableFloatFieldUpdateOperationsInput | number | null
    feux_foret?: FloatFieldUpdateOperationsInput | number
    secheresse_sols?: FloatFieldUpdateOperationsInput | number
    fortes_precipitations?: FloatFieldUpdateOperationsInput | number
    fortes_chaleurs?: FloatFieldUpdateOperationsInput | number
  }

  export type patch4cUncheckedUpdateManyInput = {
    index?: BigIntFieldUpdateOperationsInput | bigint | number
    code_geographique?: StringFieldUpdateOperationsInput | string
    niveaux_marins?: NullableFloatFieldUpdateOperationsInput | number | null
    feux_foret?: FloatFieldUpdateOperationsInput | number
    secheresse_sols?: FloatFieldUpdateOperationsInput | number
    fortes_precipitations?: FloatFieldUpdateOperationsInput | number
    fortes_chaleurs?: FloatFieldUpdateOperationsInput | number
  }

  export type agricultureCreateInput = {
    index: bigint | number
    CODGEO: string
    LIBGEO: string
    EPCI: string
    LIBEPCI: string
    DEP: string
    REG: number
    part_irr_SAU_2020?: number | null
    part_over_55?: number | null
  }

  export type agricultureUncheckedCreateInput = {
    index: bigint | number
    CODGEO: string
    LIBGEO: string
    EPCI: string
    LIBEPCI: string
    DEP: string
    REG: number
    part_irr_SAU_2020?: number | null
    part_over_55?: number | null
  }

  export type agricultureUpdateInput = {
    index?: BigIntFieldUpdateOperationsInput | bigint | number
    CODGEO?: StringFieldUpdateOperationsInput | string
    LIBGEO?: StringFieldUpdateOperationsInput | string
    EPCI?: StringFieldUpdateOperationsInput | string
    LIBEPCI?: StringFieldUpdateOperationsInput | string
    DEP?: StringFieldUpdateOperationsInput | string
    REG?: FloatFieldUpdateOperationsInput | number
    part_irr_SAU_2020?: NullableFloatFieldUpdateOperationsInput | number | null
    part_over_55?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type agricultureUncheckedUpdateInput = {
    index?: BigIntFieldUpdateOperationsInput | bigint | number
    CODGEO?: StringFieldUpdateOperationsInput | string
    LIBGEO?: StringFieldUpdateOperationsInput | string
    EPCI?: StringFieldUpdateOperationsInput | string
    LIBEPCI?: StringFieldUpdateOperationsInput | string
    DEP?: StringFieldUpdateOperationsInput | string
    REG?: FloatFieldUpdateOperationsInput | number
    part_irr_SAU_2020?: NullableFloatFieldUpdateOperationsInput | number | null
    part_over_55?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type agricultureCreateManyInput = {
    index: bigint | number
    CODGEO: string
    LIBGEO: string
    EPCI: string
    LIBEPCI: string
    DEP: string
    REG: number
    part_irr_SAU_2020?: number | null
    part_over_55?: number | null
  }

  export type agricultureUpdateManyMutationInput = {
    index?: BigIntFieldUpdateOperationsInput | bigint | number
    CODGEO?: StringFieldUpdateOperationsInput | string
    LIBGEO?: StringFieldUpdateOperationsInput | string
    EPCI?: StringFieldUpdateOperationsInput | string
    LIBEPCI?: StringFieldUpdateOperationsInput | string
    DEP?: StringFieldUpdateOperationsInput | string
    REG?: FloatFieldUpdateOperationsInput | number
    part_irr_SAU_2020?: NullableFloatFieldUpdateOperationsInput | number | null
    part_over_55?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type agricultureUncheckedUpdateManyInput = {
    index?: BigIntFieldUpdateOperationsInput | bigint | number
    CODGEO?: StringFieldUpdateOperationsInput | string
    LIBGEO?: StringFieldUpdateOperationsInput | string
    EPCI?: StringFieldUpdateOperationsInput | string
    LIBEPCI?: StringFieldUpdateOperationsInput | string
    DEP?: StringFieldUpdateOperationsInput | string
    REG?: FloatFieldUpdateOperationsInput | number
    part_irr_SAU_2020?: NullableFloatFieldUpdateOperationsInput | number | null
    part_over_55?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type incendies_foretCreateInput = {
    index: bigint | number
    code_geographique: string
    libelle_geographique: string
    epci: string
    libelle_epci: string
    departement: string
    region: number
    nature?: string | null
    annee: number
    surface_parcourue: number
    surface_foret?: number | null
    surface_maquis_garrigues?: number | null
    autres_surfaces_naturelles_hors_foret?: number | null
    surfaces_agricoles?: number | null
    surfaces_non_boisees?: number | null
    surfaces_non_boisees_artificialisees?: number | null
    surfaces_non_boisees_naturelles?: number | null
    surface_autres_terres_boisees?: number | null
    autres_surfaces?: number | null
  }

  export type incendies_foretUncheckedCreateInput = {
    index: bigint | number
    code_geographique: string
    libelle_geographique: string
    epci: string
    libelle_epci: string
    departement: string
    region: number
    nature?: string | null
    annee: number
    surface_parcourue: number
    surface_foret?: number | null
    surface_maquis_garrigues?: number | null
    autres_surfaces_naturelles_hors_foret?: number | null
    surfaces_agricoles?: number | null
    surfaces_non_boisees?: number | null
    surfaces_non_boisees_artificialisees?: number | null
    surfaces_non_boisees_naturelles?: number | null
    surface_autres_terres_boisees?: number | null
    autres_surfaces?: number | null
  }

  export type incendies_foretUpdateInput = {
    index?: BigIntFieldUpdateOperationsInput | bigint | number
    code_geographique?: StringFieldUpdateOperationsInput | string
    libelle_geographique?: StringFieldUpdateOperationsInput | string
    epci?: StringFieldUpdateOperationsInput | string
    libelle_epci?: StringFieldUpdateOperationsInput | string
    departement?: StringFieldUpdateOperationsInput | string
    region?: FloatFieldUpdateOperationsInput | number
    nature?: NullableStringFieldUpdateOperationsInput | string | null
    annee?: IntFieldUpdateOperationsInput | number
    surface_parcourue?: FloatFieldUpdateOperationsInput | number
    surface_foret?: NullableFloatFieldUpdateOperationsInput | number | null
    surface_maquis_garrigues?: NullableFloatFieldUpdateOperationsInput | number | null
    autres_surfaces_naturelles_hors_foret?: NullableFloatFieldUpdateOperationsInput | number | null
    surfaces_agricoles?: NullableFloatFieldUpdateOperationsInput | number | null
    surfaces_non_boisees?: NullableFloatFieldUpdateOperationsInput | number | null
    surfaces_non_boisees_artificialisees?: NullableFloatFieldUpdateOperationsInput | number | null
    surfaces_non_boisees_naturelles?: NullableFloatFieldUpdateOperationsInput | number | null
    surface_autres_terres_boisees?: NullableFloatFieldUpdateOperationsInput | number | null
    autres_surfaces?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type incendies_foretUncheckedUpdateInput = {
    index?: BigIntFieldUpdateOperationsInput | bigint | number
    code_geographique?: StringFieldUpdateOperationsInput | string
    libelle_geographique?: StringFieldUpdateOperationsInput | string
    epci?: StringFieldUpdateOperationsInput | string
    libelle_epci?: StringFieldUpdateOperationsInput | string
    departement?: StringFieldUpdateOperationsInput | string
    region?: FloatFieldUpdateOperationsInput | number
    nature?: NullableStringFieldUpdateOperationsInput | string | null
    annee?: IntFieldUpdateOperationsInput | number
    surface_parcourue?: FloatFieldUpdateOperationsInput | number
    surface_foret?: NullableFloatFieldUpdateOperationsInput | number | null
    surface_maquis_garrigues?: NullableFloatFieldUpdateOperationsInput | number | null
    autres_surfaces_naturelles_hors_foret?: NullableFloatFieldUpdateOperationsInput | number | null
    surfaces_agricoles?: NullableFloatFieldUpdateOperationsInput | number | null
    surfaces_non_boisees?: NullableFloatFieldUpdateOperationsInput | number | null
    surfaces_non_boisees_artificialisees?: NullableFloatFieldUpdateOperationsInput | number | null
    surfaces_non_boisees_naturelles?: NullableFloatFieldUpdateOperationsInput | number | null
    surface_autres_terres_boisees?: NullableFloatFieldUpdateOperationsInput | number | null
    autres_surfaces?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type incendies_foretCreateManyInput = {
    index: bigint | number
    code_geographique: string
    libelle_geographique: string
    epci: string
    libelle_epci: string
    departement: string
    region: number
    nature?: string | null
    annee: number
    surface_parcourue: number
    surface_foret?: number | null
    surface_maquis_garrigues?: number | null
    autres_surfaces_naturelles_hors_foret?: number | null
    surfaces_agricoles?: number | null
    surfaces_non_boisees?: number | null
    surfaces_non_boisees_artificialisees?: number | null
    surfaces_non_boisees_naturelles?: number | null
    surface_autres_terres_boisees?: number | null
    autres_surfaces?: number | null
  }

  export type incendies_foretUpdateManyMutationInput = {
    index?: BigIntFieldUpdateOperationsInput | bigint | number
    code_geographique?: StringFieldUpdateOperationsInput | string
    libelle_geographique?: StringFieldUpdateOperationsInput | string
    epci?: StringFieldUpdateOperationsInput | string
    libelle_epci?: StringFieldUpdateOperationsInput | string
    departement?: StringFieldUpdateOperationsInput | string
    region?: FloatFieldUpdateOperationsInput | number
    nature?: NullableStringFieldUpdateOperationsInput | string | null
    annee?: IntFieldUpdateOperationsInput | number
    surface_parcourue?: FloatFieldUpdateOperationsInput | number
    surface_foret?: NullableFloatFieldUpdateOperationsInput | number | null
    surface_maquis_garrigues?: NullableFloatFieldUpdateOperationsInput | number | null
    autres_surfaces_naturelles_hors_foret?: NullableFloatFieldUpdateOperationsInput | number | null
    surfaces_agricoles?: NullableFloatFieldUpdateOperationsInput | number | null
    surfaces_non_boisees?: NullableFloatFieldUpdateOperationsInput | number | null
    surfaces_non_boisees_artificialisees?: NullableFloatFieldUpdateOperationsInput | number | null
    surfaces_non_boisees_naturelles?: NullableFloatFieldUpdateOperationsInput | number | null
    surface_autres_terres_boisees?: NullableFloatFieldUpdateOperationsInput | number | null
    autres_surfaces?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type incendies_foretUncheckedUpdateManyInput = {
    index?: BigIntFieldUpdateOperationsInput | bigint | number
    code_geographique?: StringFieldUpdateOperationsInput | string
    libelle_geographique?: StringFieldUpdateOperationsInput | string
    epci?: StringFieldUpdateOperationsInput | string
    libelle_epci?: StringFieldUpdateOperationsInput | string
    departement?: StringFieldUpdateOperationsInput | string
    region?: FloatFieldUpdateOperationsInput | number
    nature?: NullableStringFieldUpdateOperationsInput | string | null
    annee?: IntFieldUpdateOperationsInput | number
    surface_parcourue?: FloatFieldUpdateOperationsInput | number
    surface_foret?: NullableFloatFieldUpdateOperationsInput | number | null
    surface_maquis_garrigues?: NullableFloatFieldUpdateOperationsInput | number | null
    autres_surfaces_naturelles_hors_foret?: NullableFloatFieldUpdateOperationsInput | number | null
    surfaces_agricoles?: NullableFloatFieldUpdateOperationsInput | number | null
    surfaces_non_boisees?: NullableFloatFieldUpdateOperationsInput | number | null
    surfaces_non_boisees_artificialisees?: NullableFloatFieldUpdateOperationsInput | number | null
    surfaces_non_boisees_naturelles?: NullableFloatFieldUpdateOperationsInput | number | null
    surface_autres_terres_boisees?: NullableFloatFieldUpdateOperationsInput | number | null
    autres_surfaces?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type BigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type inconfort_thermiqueCountOrderByAggregateInput = {
    index?: SortOrder
    code_geographique?: SortOrder
    libelle_geographique?: SortOrder
    epci?: SortOrder
    libelle_epci?: SortOrder
    departement?: SortOrder
    region?: SortOrder
    age_bati_post06?: SortOrder
    age_bati_91_05?: SortOrder
    age_bati_46_90?: SortOrder
    age_bati_19_45?: SortOrder
    age_bati_pre_19?: SortOrder
    under_4_sum_1968?: SortOrder
    to_80_sum_1968?: SortOrder
    over_80_sum_1968?: SortOrder
    under_4_sum_1975?: SortOrder
    to_80_sum_1975?: SortOrder
    over_80_sum_1975?: SortOrder
    under_4_sum_1982?: SortOrder
    to_80_sum_1982?: SortOrder
    over_80_sum_1982?: SortOrder
    under_4_sum_1990?: SortOrder
    to_80_sum_1990?: SortOrder
    over_80_sum_1990?: SortOrder
    under_4_sum_1999?: SortOrder
    to_80_sum_1999?: SortOrder
    over_80_sum_1999?: SortOrder
    under_4_sum_2009?: SortOrder
    to_80_sum_2009?: SortOrder
    over_80_sum_2009?: SortOrder
    under_4_sum_2014?: SortOrder
    to_80_sum_2014?: SortOrder
    over_80_sum_2014?: SortOrder
    under_4_sum_2020?: SortOrder
    to_80_sum_2020?: SortOrder
    over_80_sum_2020?: SortOrder
    P20_POP80P?: SortOrder
    P20_POP80P_PSEUL?: SortOrder
    P20_POP80P_PSEUL_PERCENT?: SortOrder
    tee_log?: SortOrder
    tee_mob?: SortOrder
    precarite_logement?: SortOrder
    NA5AZ_sum?: SortOrder
    NA5BE_sum?: SortOrder
    NA5FZ_sum?: SortOrder
    NA5GU_sum?: SortOrder
    NA5OQ_sum?: SortOrder
    s_geom_cstr_bati?: SortOrder
    hauteur?: SortOrder
    h_x_s?: SortOrder
    densite_bati?: SortOrder
    clc_1_artificialise?: SortOrder
    clc_2_agricole?: SortOrder
    clc_3_foret_semiNaturel?: SortOrder
    clc_4_humide?: SortOrder
    clc_5_eau?: SortOrder
    superf_choro?: SortOrder
  }

  export type inconfort_thermiqueAvgOrderByAggregateInput = {
    index?: SortOrder
    region?: SortOrder
    age_bati_post06?: SortOrder
    age_bati_91_05?: SortOrder
    age_bati_46_90?: SortOrder
    age_bati_19_45?: SortOrder
    age_bati_pre_19?: SortOrder
    tee_log?: SortOrder
    tee_mob?: SortOrder
    precarite_logement?: SortOrder
    NA5AZ_sum?: SortOrder
    NA5BE_sum?: SortOrder
    NA5FZ_sum?: SortOrder
    NA5GU_sum?: SortOrder
    NA5OQ_sum?: SortOrder
    s_geom_cstr_bati?: SortOrder
    hauteur?: SortOrder
    h_x_s?: SortOrder
    densite_bati?: SortOrder
    clc_1_artificialise?: SortOrder
    clc_2_agricole?: SortOrder
    clc_3_foret_semiNaturel?: SortOrder
    clc_4_humide?: SortOrder
    clc_5_eau?: SortOrder
    superf_choro?: SortOrder
  }

  export type inconfort_thermiqueMaxOrderByAggregateInput = {
    index?: SortOrder
    code_geographique?: SortOrder
    libelle_geographique?: SortOrder
    epci?: SortOrder
    libelle_epci?: SortOrder
    departement?: SortOrder
    region?: SortOrder
    age_bati_post06?: SortOrder
    age_bati_91_05?: SortOrder
    age_bati_46_90?: SortOrder
    age_bati_19_45?: SortOrder
    age_bati_pre_19?: SortOrder
    under_4_sum_1968?: SortOrder
    to_80_sum_1968?: SortOrder
    over_80_sum_1968?: SortOrder
    under_4_sum_1975?: SortOrder
    to_80_sum_1975?: SortOrder
    over_80_sum_1975?: SortOrder
    under_4_sum_1982?: SortOrder
    to_80_sum_1982?: SortOrder
    over_80_sum_1982?: SortOrder
    under_4_sum_1990?: SortOrder
    to_80_sum_1990?: SortOrder
    over_80_sum_1990?: SortOrder
    under_4_sum_1999?: SortOrder
    to_80_sum_1999?: SortOrder
    over_80_sum_1999?: SortOrder
    under_4_sum_2009?: SortOrder
    to_80_sum_2009?: SortOrder
    over_80_sum_2009?: SortOrder
    under_4_sum_2014?: SortOrder
    to_80_sum_2014?: SortOrder
    over_80_sum_2014?: SortOrder
    under_4_sum_2020?: SortOrder
    to_80_sum_2020?: SortOrder
    over_80_sum_2020?: SortOrder
    P20_POP80P?: SortOrder
    P20_POP80P_PSEUL?: SortOrder
    P20_POP80P_PSEUL_PERCENT?: SortOrder
    tee_log?: SortOrder
    tee_mob?: SortOrder
    precarite_logement?: SortOrder
    NA5AZ_sum?: SortOrder
    NA5BE_sum?: SortOrder
    NA5FZ_sum?: SortOrder
    NA5GU_sum?: SortOrder
    NA5OQ_sum?: SortOrder
    s_geom_cstr_bati?: SortOrder
    hauteur?: SortOrder
    h_x_s?: SortOrder
    densite_bati?: SortOrder
    clc_1_artificialise?: SortOrder
    clc_2_agricole?: SortOrder
    clc_3_foret_semiNaturel?: SortOrder
    clc_4_humide?: SortOrder
    clc_5_eau?: SortOrder
    superf_choro?: SortOrder
  }

  export type inconfort_thermiqueMinOrderByAggregateInput = {
    index?: SortOrder
    code_geographique?: SortOrder
    libelle_geographique?: SortOrder
    epci?: SortOrder
    libelle_epci?: SortOrder
    departement?: SortOrder
    region?: SortOrder
    age_bati_post06?: SortOrder
    age_bati_91_05?: SortOrder
    age_bati_46_90?: SortOrder
    age_bati_19_45?: SortOrder
    age_bati_pre_19?: SortOrder
    under_4_sum_1968?: SortOrder
    to_80_sum_1968?: SortOrder
    over_80_sum_1968?: SortOrder
    under_4_sum_1975?: SortOrder
    to_80_sum_1975?: SortOrder
    over_80_sum_1975?: SortOrder
    under_4_sum_1982?: SortOrder
    to_80_sum_1982?: SortOrder
    over_80_sum_1982?: SortOrder
    under_4_sum_1990?: SortOrder
    to_80_sum_1990?: SortOrder
    over_80_sum_1990?: SortOrder
    under_4_sum_1999?: SortOrder
    to_80_sum_1999?: SortOrder
    over_80_sum_1999?: SortOrder
    under_4_sum_2009?: SortOrder
    to_80_sum_2009?: SortOrder
    over_80_sum_2009?: SortOrder
    under_4_sum_2014?: SortOrder
    to_80_sum_2014?: SortOrder
    over_80_sum_2014?: SortOrder
    under_4_sum_2020?: SortOrder
    to_80_sum_2020?: SortOrder
    over_80_sum_2020?: SortOrder
    P20_POP80P?: SortOrder
    P20_POP80P_PSEUL?: SortOrder
    P20_POP80P_PSEUL_PERCENT?: SortOrder
    tee_log?: SortOrder
    tee_mob?: SortOrder
    precarite_logement?: SortOrder
    NA5AZ_sum?: SortOrder
    NA5BE_sum?: SortOrder
    NA5FZ_sum?: SortOrder
    NA5GU_sum?: SortOrder
    NA5OQ_sum?: SortOrder
    s_geom_cstr_bati?: SortOrder
    hauteur?: SortOrder
    h_x_s?: SortOrder
    densite_bati?: SortOrder
    clc_1_artificialise?: SortOrder
    clc_2_agricole?: SortOrder
    clc_3_foret_semiNaturel?: SortOrder
    clc_4_humide?: SortOrder
    clc_5_eau?: SortOrder
    superf_choro?: SortOrder
  }

  export type inconfort_thermiqueSumOrderByAggregateInput = {
    index?: SortOrder
    region?: SortOrder
    age_bati_post06?: SortOrder
    age_bati_91_05?: SortOrder
    age_bati_46_90?: SortOrder
    age_bati_19_45?: SortOrder
    age_bati_pre_19?: SortOrder
    tee_log?: SortOrder
    tee_mob?: SortOrder
    precarite_logement?: SortOrder
    NA5AZ_sum?: SortOrder
    NA5BE_sum?: SortOrder
    NA5FZ_sum?: SortOrder
    NA5GU_sum?: SortOrder
    NA5OQ_sum?: SortOrder
    s_geom_cstr_bati?: SortOrder
    hauteur?: SortOrder
    h_x_s?: SortOrder
    densite_bati?: SortOrder
    clc_1_artificialise?: SortOrder
    clc_2_agricole?: SortOrder
    clc_3_foret_semiNaturel?: SortOrder
    clc_4_humide?: SortOrder
    clc_5_eau?: SortOrder
    superf_choro?: SortOrder
  }

  export type BigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type clc_epciCountOrderByAggregateInput = {
    pk?: SortOrder
    legend?: SortOrder
    epci_code?: SortOrder
  }

  export type clc_epciAvgOrderByAggregateInput = {
    pk?: SortOrder
    epci_code?: SortOrder
  }

  export type clc_epciMaxOrderByAggregateInput = {
    pk?: SortOrder
    legend?: SortOrder
    epci_code?: SortOrder
  }

  export type clc_epciMinOrderByAggregateInput = {
    pk?: SortOrder
    legend?: SortOrder
    epci_code?: SortOrder
  }

  export type clc_epciSumOrderByAggregateInput = {
    pk?: SortOrder
    epci_code?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type collectivites_searchbarCountOrderByAggregateInput = {
    index?: SortOrder
    code_commune?: SortOrder
    coordinates?: SortOrder
    libelle_commune?: SortOrder
    code_epci?: SortOrder
    libelle_epci?: SortOrder
    departement?: SortOrder
    region?: SortOrder
    search_code?: SortOrder
    search_libelle?: SortOrder
  }

  export type collectivites_searchbarAvgOrderByAggregateInput = {
    index?: SortOrder
  }

  export type collectivites_searchbarMaxOrderByAggregateInput = {
    index?: SortOrder
    code_commune?: SortOrder
    coordinates?: SortOrder
    libelle_commune?: SortOrder
    code_epci?: SortOrder
    libelle_epci?: SortOrder
    departement?: SortOrder
    region?: SortOrder
    search_code?: SortOrder
    search_libelle?: SortOrder
  }

  export type collectivites_searchbarMinOrderByAggregateInput = {
    index?: SortOrder
    code_commune?: SortOrder
    coordinates?: SortOrder
    libelle_commune?: SortOrder
    code_epci?: SortOrder
    libelle_epci?: SortOrder
    departement?: SortOrder
    region?: SortOrder
    search_code?: SortOrder
    search_libelle?: SortOrder
  }

  export type collectivites_searchbarSumOrderByAggregateInput = {
    index?: SortOrder
  }

  export type biodiversiteCountOrderByAggregateInput = {
    index?: SortOrder
    code_geographique?: SortOrder
    type_touristique?: SortOrder
    libelle_geographique?: SortOrder
    epci?: SortOrder
    libelle_epci?: SortOrder
    departement?: SortOrder
    region?: SortOrder
  }

  export type biodiversiteAvgOrderByAggregateInput = {
    index?: SortOrder
    region?: SortOrder
  }

  export type biodiversiteMaxOrderByAggregateInput = {
    index?: SortOrder
    code_geographique?: SortOrder
    type_touristique?: SortOrder
    libelle_geographique?: SortOrder
    epci?: SortOrder
    libelle_epci?: SortOrder
    departement?: SortOrder
    region?: SortOrder
  }

  export type biodiversiteMinOrderByAggregateInput = {
    index?: SortOrder
    code_geographique?: SortOrder
    type_touristique?: SortOrder
    libelle_geographique?: SortOrder
    epci?: SortOrder
    libelle_epci?: SortOrder
    departement?: SortOrder
    region?: SortOrder
  }

  export type biodiversiteSumOrderByAggregateInput = {
    index?: SortOrder
    region?: SortOrder
  }

  export type gestion_risquesCountOrderByAggregateInput = {
    index?: SortOrder
    code_geographique?: SortOrder
    lib_risque_jo?: SortOrder
    dat_pub_arrete?: SortOrder
    libelle_geographique?: SortOrder
    epci?: SortOrder
    libelle_epci?: SortOrder
    departement?: SortOrder
    region?: SortOrder
  }

  export type gestion_risquesAvgOrderByAggregateInput = {
    index?: SortOrder
    region?: SortOrder
  }

  export type gestion_risquesMaxOrderByAggregateInput = {
    index?: SortOrder
    code_geographique?: SortOrder
    lib_risque_jo?: SortOrder
    dat_pub_arrete?: SortOrder
    libelle_geographique?: SortOrder
    epci?: SortOrder
    libelle_epci?: SortOrder
    departement?: SortOrder
    region?: SortOrder
  }

  export type gestion_risquesMinOrderByAggregateInput = {
    index?: SortOrder
    code_geographique?: SortOrder
    lib_risque_jo?: SortOrder
    dat_pub_arrete?: SortOrder
    libelle_geographique?: SortOrder
    epci?: SortOrder
    libelle_epci?: SortOrder
    departement?: SortOrder
    region?: SortOrder
  }

  export type gestion_risquesSumOrderByAggregateInput = {
    index?: SortOrder
    region?: SortOrder
  }

  export type communes_dromCountOrderByAggregateInput = {
    pk?: SortOrder
    code_commune?: SortOrder
    libelle_commune?: SortOrder
    epci?: SortOrder
    libelle_epci?: SortOrder
    coordinates?: SortOrder
    densite_bati?: SortOrder
    precarite_logement?: SortOrder
    surface?: SortOrder
  }

  export type communes_dromAvgOrderByAggregateInput = {
    pk?: SortOrder
    densite_bati?: SortOrder
    precarite_logement?: SortOrder
    surface?: SortOrder
  }

  export type communes_dromMaxOrderByAggregateInput = {
    pk?: SortOrder
    code_commune?: SortOrder
    libelle_commune?: SortOrder
    epci?: SortOrder
    libelle_epci?: SortOrder
    coordinates?: SortOrder
    densite_bati?: SortOrder
    precarite_logement?: SortOrder
    surface?: SortOrder
  }

  export type communes_dromMinOrderByAggregateInput = {
    pk?: SortOrder
    code_commune?: SortOrder
    libelle_commune?: SortOrder
    epci?: SortOrder
    libelle_epci?: SortOrder
    coordinates?: SortOrder
    densite_bati?: SortOrder
    precarite_logement?: SortOrder
    surface?: SortOrder
  }

  export type communes_dromSumOrderByAggregateInput = {
    pk?: SortOrder
    densite_bati?: SortOrder
    precarite_logement?: SortOrder
    surface?: SortOrder
  }

  export type ressources_eauCountOrderByAggregateInput = {
    index?: SortOrder
    code_geographique?: SortOrder
    LIBELLE_SOUS_CHAMP?: SortOrder
    SOUS_CHAMP?: SortOrder
    A2020?: SortOrder
    A2019?: SortOrder
    A2018?: SortOrder
    A2017?: SortOrder
    A2016?: SortOrder
    A2015?: SortOrder
    A2014?: SortOrder
    A2013?: SortOrder
    A2012?: SortOrder
    A2011?: SortOrder
    A2010?: SortOrder
    A2009?: SortOrder
    A2008?: SortOrder
    libelle_geographique?: SortOrder
    epci?: SortOrder
    libelle_epci?: SortOrder
    departement?: SortOrder
    region?: SortOrder
  }

  export type ressources_eauAvgOrderByAggregateInput = {
    index?: SortOrder
    A2020?: SortOrder
    A2019?: SortOrder
    A2018?: SortOrder
    A2017?: SortOrder
    A2016?: SortOrder
    A2015?: SortOrder
    A2014?: SortOrder
    A2013?: SortOrder
    A2012?: SortOrder
    A2011?: SortOrder
    A2010?: SortOrder
    A2009?: SortOrder
    A2008?: SortOrder
    region?: SortOrder
  }

  export type ressources_eauMaxOrderByAggregateInput = {
    index?: SortOrder
    code_geographique?: SortOrder
    LIBELLE_SOUS_CHAMP?: SortOrder
    SOUS_CHAMP?: SortOrder
    A2020?: SortOrder
    A2019?: SortOrder
    A2018?: SortOrder
    A2017?: SortOrder
    A2016?: SortOrder
    A2015?: SortOrder
    A2014?: SortOrder
    A2013?: SortOrder
    A2012?: SortOrder
    A2011?: SortOrder
    A2010?: SortOrder
    A2009?: SortOrder
    A2008?: SortOrder
    libelle_geographique?: SortOrder
    epci?: SortOrder
    libelle_epci?: SortOrder
    departement?: SortOrder
    region?: SortOrder
  }

  export type ressources_eauMinOrderByAggregateInput = {
    index?: SortOrder
    code_geographique?: SortOrder
    LIBELLE_SOUS_CHAMP?: SortOrder
    SOUS_CHAMP?: SortOrder
    A2020?: SortOrder
    A2019?: SortOrder
    A2018?: SortOrder
    A2017?: SortOrder
    A2016?: SortOrder
    A2015?: SortOrder
    A2014?: SortOrder
    A2013?: SortOrder
    A2012?: SortOrder
    A2011?: SortOrder
    A2010?: SortOrder
    A2009?: SortOrder
    A2008?: SortOrder
    libelle_geographique?: SortOrder
    epci?: SortOrder
    libelle_epci?: SortOrder
    departement?: SortOrder
    region?: SortOrder
  }

  export type ressources_eauSumOrderByAggregateInput = {
    index?: SortOrder
    A2020?: SortOrder
    A2019?: SortOrder
    A2018?: SortOrder
    A2017?: SortOrder
    A2016?: SortOrder
    A2015?: SortOrder
    A2014?: SortOrder
    A2013?: SortOrder
    A2012?: SortOrder
    A2011?: SortOrder
    A2010?: SortOrder
    A2009?: SortOrder
    A2008?: SortOrder
    region?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type agriculture_bioCountOrderByAggregateInput = {
    index?: SortOrder
    epci?: SortOrder
    libelle_epci?: SortOrder
    VARIABLE?: SortOrder
    LIBELLE_SOUS_CHAMP?: SortOrder
    surface_2022?: SortOrder
    surface_2021?: SortOrder
    surface_2020?: SortOrder
    surface_2019?: SortOrder
    nombre_2022?: SortOrder
    nombre_2021?: SortOrder
    nombre_2020?: SortOrder
    nombre_2019?: SortOrder
  }

  export type agriculture_bioAvgOrderByAggregateInput = {
    index?: SortOrder
    surface_2022?: SortOrder
    surface_2021?: SortOrder
    surface_2020?: SortOrder
    surface_2019?: SortOrder
    nombre_2022?: SortOrder
    nombre_2021?: SortOrder
    nombre_2020?: SortOrder
    nombre_2019?: SortOrder
  }

  export type agriculture_bioMaxOrderByAggregateInput = {
    index?: SortOrder
    epci?: SortOrder
    libelle_epci?: SortOrder
    VARIABLE?: SortOrder
    LIBELLE_SOUS_CHAMP?: SortOrder
    surface_2022?: SortOrder
    surface_2021?: SortOrder
    surface_2020?: SortOrder
    surface_2019?: SortOrder
    nombre_2022?: SortOrder
    nombre_2021?: SortOrder
    nombre_2020?: SortOrder
    nombre_2019?: SortOrder
  }

  export type agriculture_bioMinOrderByAggregateInput = {
    index?: SortOrder
    epci?: SortOrder
    libelle_epci?: SortOrder
    VARIABLE?: SortOrder
    LIBELLE_SOUS_CHAMP?: SortOrder
    surface_2022?: SortOrder
    surface_2021?: SortOrder
    surface_2020?: SortOrder
    surface_2019?: SortOrder
    nombre_2022?: SortOrder
    nombre_2021?: SortOrder
    nombre_2020?: SortOrder
    nombre_2019?: SortOrder
  }

  export type agriculture_bioSumOrderByAggregateInput = {
    index?: SortOrder
    surface_2022?: SortOrder
    surface_2021?: SortOrder
    surface_2020?: SortOrder
    surface_2019?: SortOrder
    nombre_2022?: SortOrder
    nombre_2021?: SortOrder
    nombre_2020?: SortOrder
    nombre_2019?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type erosion_cotiereCountOrderByAggregateInput = {
    pk?: SortOrder
    taux?: SortOrder
    duree?: SortOrder
    tdc_ancien?: SortOrder
    tdc_rec?: SortOrder
  }

  export type erosion_cotiereAvgOrderByAggregateInput = {
    pk?: SortOrder
    taux?: SortOrder
    duree?: SortOrder
    tdc_ancien?: SortOrder
    tdc_rec?: SortOrder
  }

  export type erosion_cotiereMaxOrderByAggregateInput = {
    pk?: SortOrder
    taux?: SortOrder
    duree?: SortOrder
    tdc_ancien?: SortOrder
    tdc_rec?: SortOrder
  }

  export type erosion_cotiereMinOrderByAggregateInput = {
    pk?: SortOrder
    taux?: SortOrder
    duree?: SortOrder
    tdc_ancien?: SortOrder
    tdc_rec?: SortOrder
  }

  export type erosion_cotiereSumOrderByAggregateInput = {
    pk?: SortOrder
    taux?: SortOrder
    duree?: SortOrder
    tdc_ancien?: SortOrder
    tdc_rec?: SortOrder
  }

  export type epciCountOrderByAggregateInput = {
    pk?: SortOrder
    epci_code?: SortOrder
  }

  export type epciAvgOrderByAggregateInput = {
    pk?: SortOrder
  }

  export type epciMaxOrderByAggregateInput = {
    pk?: SortOrder
    epci_code?: SortOrder
  }

  export type epciMinOrderByAggregateInput = {
    pk?: SortOrder
    epci_code?: SortOrder
  }

  export type epciSumOrderByAggregateInput = {
    pk?: SortOrder
  }

  export type surfaces_protegeesCountOrderByAggregateInput = {
    index?: SortOrder
    code_geographique?: SortOrder
    PNC?: SortOrder
    RAMSAR?: SortOrder
    PNR?: SortOrder
    PNP?: SortOrder
    FOR_PRO?: SortOrder
    ZZZ?: SortOrder
    ZNIEFF2?: SortOrder
    ZNIEFF1?: SortOrder
    RNR?: SortOrder
    TOU_PRO?: SortOrder
    NATURA?: SortOrder
    ZPS?: SortOrder
    SIC?: SortOrder
    CELRL?: SortOrder
    BIO?: SortOrder
    APB?: SortOrder
    RN?: SortOrder
    RBFD?: SortOrder
    RNCFS?: SortOrder
    libelle_geographique?: SortOrder
    epci?: SortOrder
    libelle_epci?: SortOrder
    departement?: SortOrder
    region?: SortOrder
  }

  export type surfaces_protegeesAvgOrderByAggregateInput = {
    index?: SortOrder
    region?: SortOrder
  }

  export type surfaces_protegeesMaxOrderByAggregateInput = {
    index?: SortOrder
    code_geographique?: SortOrder
    PNC?: SortOrder
    RAMSAR?: SortOrder
    PNR?: SortOrder
    PNP?: SortOrder
    FOR_PRO?: SortOrder
    ZZZ?: SortOrder
    ZNIEFF2?: SortOrder
    ZNIEFF1?: SortOrder
    RNR?: SortOrder
    TOU_PRO?: SortOrder
    NATURA?: SortOrder
    ZPS?: SortOrder
    SIC?: SortOrder
    CELRL?: SortOrder
    BIO?: SortOrder
    APB?: SortOrder
    RN?: SortOrder
    RBFD?: SortOrder
    RNCFS?: SortOrder
    libelle_geographique?: SortOrder
    epci?: SortOrder
    libelle_epci?: SortOrder
    departement?: SortOrder
    region?: SortOrder
  }

  export type surfaces_protegeesMinOrderByAggregateInput = {
    index?: SortOrder
    code_geographique?: SortOrder
    PNC?: SortOrder
    RAMSAR?: SortOrder
    PNR?: SortOrder
    PNP?: SortOrder
    FOR_PRO?: SortOrder
    ZZZ?: SortOrder
    ZNIEFF2?: SortOrder
    ZNIEFF1?: SortOrder
    RNR?: SortOrder
    TOU_PRO?: SortOrder
    NATURA?: SortOrder
    ZPS?: SortOrder
    SIC?: SortOrder
    CELRL?: SortOrder
    BIO?: SortOrder
    APB?: SortOrder
    RN?: SortOrder
    RBFD?: SortOrder
    RNCFS?: SortOrder
    libelle_geographique?: SortOrder
    epci?: SortOrder
    libelle_epci?: SortOrder
    departement?: SortOrder
    region?: SortOrder
  }

  export type surfaces_protegeesSumOrderByAggregateInput = {
    index?: SortOrder
    region?: SortOrder
  }

  export type consommation_espaces_nafCountOrderByAggregateInput = {
    index?: SortOrder
    code_geographique?: SortOrder
    libelle_geographique?: SortOrder
    epci?: SortOrder
    libelle_epci?: SortOrder
    departement?: SortOrder
    region?: SortOrder
    naf09art10?: SortOrder
    art09act10?: SortOrder
    art09hab10?: SortOrder
    art09mix10?: SortOrder
    art09rou10?: SortOrder
    art09fer10?: SortOrder
    art09inc10?: SortOrder
    naf10art11?: SortOrder
    art10act11?: SortOrder
    art10hab11?: SortOrder
    art10mix11?: SortOrder
    art10rou11?: SortOrder
    art10fer11?: SortOrder
    art10inc11?: SortOrder
    naf11art12?: SortOrder
    art11act12?: SortOrder
    art11hab12?: SortOrder
    art11mix12?: SortOrder
    art11rou12?: SortOrder
    art11fer12?: SortOrder
    art11inc12?: SortOrder
    naf12art13?: SortOrder
    art12act13?: SortOrder
    art12hab13?: SortOrder
    art12mix13?: SortOrder
    art12rou13?: SortOrder
    art12fer13?: SortOrder
    art12inc13?: SortOrder
    naf13art14?: SortOrder
    art13act14?: SortOrder
    art13hab14?: SortOrder
    art13mix14?: SortOrder
    art13rou14?: SortOrder
    art13fer14?: SortOrder
    art13inc14?: SortOrder
    naf14art15?: SortOrder
    art14act15?: SortOrder
    art14hab15?: SortOrder
    art14mix15?: SortOrder
    art14rou15?: SortOrder
    art14fer15?: SortOrder
    art14inc15?: SortOrder
    naf15art16?: SortOrder
    art15act16?: SortOrder
    art15hab16?: SortOrder
    art15mix16?: SortOrder
    art15rou16?: SortOrder
    art15fer16?: SortOrder
    art15inc16?: SortOrder
    naf16art17?: SortOrder
    art16act17?: SortOrder
    art16hab17?: SortOrder
    art16mix17?: SortOrder
    art16rou17?: SortOrder
    art16fer17?: SortOrder
    art16inc17?: SortOrder
    naf17art18?: SortOrder
    art17act18?: SortOrder
    art17hab18?: SortOrder
    art17mix18?: SortOrder
    art17rou18?: SortOrder
    art17fer18?: SortOrder
    art17inc18?: SortOrder
    naf18art19?: SortOrder
    art18act19?: SortOrder
    art18hab19?: SortOrder
    art18mix19?: SortOrder
    art18rou19?: SortOrder
    art18fer19?: SortOrder
    art18inc19?: SortOrder
    naf19art20?: SortOrder
    art19act20?: SortOrder
    art19hab20?: SortOrder
    art19mix20?: SortOrder
    art19rou20?: SortOrder
    art19fer20?: SortOrder
    art19inc20?: SortOrder
    naf20art21?: SortOrder
    art20act21?: SortOrder
    art20hab21?: SortOrder
    art20mix21?: SortOrder
    art20rou21?: SortOrder
    art20fer21?: SortOrder
    art20inc21?: SortOrder
    naf21art22?: SortOrder
    art21act22?: SortOrder
    art21hab22?: SortOrder
    art21mix22?: SortOrder
    art21rou22?: SortOrder
    art21fer22?: SortOrder
    art21inc22?: SortOrder
    naf22art23?: SortOrder
    art22act23?: SortOrder
    art22hab23?: SortOrder
    art22mix23?: SortOrder
    art22rou23?: SortOrder
    art22fer23?: SortOrder
    art22inc23?: SortOrder
    naf09art23?: SortOrder
    art09act23?: SortOrder
    art09hab23?: SortOrder
    art09mix23?: SortOrder
    art09inc23?: SortOrder
    art09rou23?: SortOrder
    art09fer23?: SortOrder
    artcom0923?: SortOrder
    pop14?: SortOrder
    pop20?: SortOrder
    pop1420?: SortOrder
    men14?: SortOrder
    men20?: SortOrder
    men1420?: SortOrder
    emp14?: SortOrder
    emp20?: SortOrder
    emp1420?: SortOrder
    mepart1420?: SortOrder
    menhab1420?: SortOrder
    artpop1420?: SortOrder
    surfcom2023?: SortOrder
    C10_MEN?: SortOrder
    C15_MEN?: SortOrder
    C21_MEN?: SortOrder
  }

  export type consommation_espaces_nafAvgOrderByAggregateInput = {
    index?: SortOrder
    region?: SortOrder
    naf09art10?: SortOrder
    art09act10?: SortOrder
    art09hab10?: SortOrder
    art09mix10?: SortOrder
    art09rou10?: SortOrder
    art09fer10?: SortOrder
    art09inc10?: SortOrder
    naf10art11?: SortOrder
    art10act11?: SortOrder
    art10hab11?: SortOrder
    art10mix11?: SortOrder
    art10rou11?: SortOrder
    art10fer11?: SortOrder
    art10inc11?: SortOrder
    naf11art12?: SortOrder
    art11act12?: SortOrder
    art11hab12?: SortOrder
    art11mix12?: SortOrder
    art11rou12?: SortOrder
    art11fer12?: SortOrder
    art11inc12?: SortOrder
    naf12art13?: SortOrder
    art12act13?: SortOrder
    art12hab13?: SortOrder
    art12mix13?: SortOrder
    art12rou13?: SortOrder
    art12fer13?: SortOrder
    art12inc13?: SortOrder
    naf13art14?: SortOrder
    art13act14?: SortOrder
    art13hab14?: SortOrder
    art13mix14?: SortOrder
    art13rou14?: SortOrder
    art13fer14?: SortOrder
    art13inc14?: SortOrder
    naf14art15?: SortOrder
    art14act15?: SortOrder
    art14hab15?: SortOrder
    art14mix15?: SortOrder
    art14rou15?: SortOrder
    art14fer15?: SortOrder
    art14inc15?: SortOrder
    naf15art16?: SortOrder
    art15act16?: SortOrder
    art15hab16?: SortOrder
    art15mix16?: SortOrder
    art15rou16?: SortOrder
    art15fer16?: SortOrder
    art15inc16?: SortOrder
    naf16art17?: SortOrder
    art16act17?: SortOrder
    art16hab17?: SortOrder
    art16mix17?: SortOrder
    art16rou17?: SortOrder
    art16fer17?: SortOrder
    art16inc17?: SortOrder
    naf17art18?: SortOrder
    art17act18?: SortOrder
    art17hab18?: SortOrder
    art17mix18?: SortOrder
    art17rou18?: SortOrder
    art17fer18?: SortOrder
    art17inc18?: SortOrder
    naf18art19?: SortOrder
    art18act19?: SortOrder
    art18hab19?: SortOrder
    art18mix19?: SortOrder
    art18rou19?: SortOrder
    art18fer19?: SortOrder
    art18inc19?: SortOrder
    naf19art20?: SortOrder
    art19act20?: SortOrder
    art19hab20?: SortOrder
    art19mix20?: SortOrder
    art19rou20?: SortOrder
    art19fer20?: SortOrder
    art19inc20?: SortOrder
    naf20art21?: SortOrder
    art20act21?: SortOrder
    art20hab21?: SortOrder
    art20mix21?: SortOrder
    art20rou21?: SortOrder
    art20fer21?: SortOrder
    art20inc21?: SortOrder
    naf21art22?: SortOrder
    art21act22?: SortOrder
    art21hab22?: SortOrder
    art21mix22?: SortOrder
    art21rou22?: SortOrder
    art21fer22?: SortOrder
    art21inc22?: SortOrder
    naf22art23?: SortOrder
    art22act23?: SortOrder
    art22hab23?: SortOrder
    art22mix23?: SortOrder
    art22rou23?: SortOrder
    art22fer23?: SortOrder
    art22inc23?: SortOrder
    naf09art23?: SortOrder
    art09act23?: SortOrder
    art09hab23?: SortOrder
    art09mix23?: SortOrder
    art09inc23?: SortOrder
    art09rou23?: SortOrder
    art09fer23?: SortOrder
    artcom0923?: SortOrder
    pop14?: SortOrder
    pop20?: SortOrder
    pop1420?: SortOrder
    men14?: SortOrder
    men20?: SortOrder
    men1420?: SortOrder
    emp14?: SortOrder
    emp20?: SortOrder
    emp1420?: SortOrder
    mepart1420?: SortOrder
    menhab1420?: SortOrder
    artpop1420?: SortOrder
    surfcom2023?: SortOrder
    C10_MEN?: SortOrder
    C15_MEN?: SortOrder
    C21_MEN?: SortOrder
  }

  export type consommation_espaces_nafMaxOrderByAggregateInput = {
    index?: SortOrder
    code_geographique?: SortOrder
    libelle_geographique?: SortOrder
    epci?: SortOrder
    libelle_epci?: SortOrder
    departement?: SortOrder
    region?: SortOrder
    naf09art10?: SortOrder
    art09act10?: SortOrder
    art09hab10?: SortOrder
    art09mix10?: SortOrder
    art09rou10?: SortOrder
    art09fer10?: SortOrder
    art09inc10?: SortOrder
    naf10art11?: SortOrder
    art10act11?: SortOrder
    art10hab11?: SortOrder
    art10mix11?: SortOrder
    art10rou11?: SortOrder
    art10fer11?: SortOrder
    art10inc11?: SortOrder
    naf11art12?: SortOrder
    art11act12?: SortOrder
    art11hab12?: SortOrder
    art11mix12?: SortOrder
    art11rou12?: SortOrder
    art11fer12?: SortOrder
    art11inc12?: SortOrder
    naf12art13?: SortOrder
    art12act13?: SortOrder
    art12hab13?: SortOrder
    art12mix13?: SortOrder
    art12rou13?: SortOrder
    art12fer13?: SortOrder
    art12inc13?: SortOrder
    naf13art14?: SortOrder
    art13act14?: SortOrder
    art13hab14?: SortOrder
    art13mix14?: SortOrder
    art13rou14?: SortOrder
    art13fer14?: SortOrder
    art13inc14?: SortOrder
    naf14art15?: SortOrder
    art14act15?: SortOrder
    art14hab15?: SortOrder
    art14mix15?: SortOrder
    art14rou15?: SortOrder
    art14fer15?: SortOrder
    art14inc15?: SortOrder
    naf15art16?: SortOrder
    art15act16?: SortOrder
    art15hab16?: SortOrder
    art15mix16?: SortOrder
    art15rou16?: SortOrder
    art15fer16?: SortOrder
    art15inc16?: SortOrder
    naf16art17?: SortOrder
    art16act17?: SortOrder
    art16hab17?: SortOrder
    art16mix17?: SortOrder
    art16rou17?: SortOrder
    art16fer17?: SortOrder
    art16inc17?: SortOrder
    naf17art18?: SortOrder
    art17act18?: SortOrder
    art17hab18?: SortOrder
    art17mix18?: SortOrder
    art17rou18?: SortOrder
    art17fer18?: SortOrder
    art17inc18?: SortOrder
    naf18art19?: SortOrder
    art18act19?: SortOrder
    art18hab19?: SortOrder
    art18mix19?: SortOrder
    art18rou19?: SortOrder
    art18fer19?: SortOrder
    art18inc19?: SortOrder
    naf19art20?: SortOrder
    art19act20?: SortOrder
    art19hab20?: SortOrder
    art19mix20?: SortOrder
    art19rou20?: SortOrder
    art19fer20?: SortOrder
    art19inc20?: SortOrder
    naf20art21?: SortOrder
    art20act21?: SortOrder
    art20hab21?: SortOrder
    art20mix21?: SortOrder
    art20rou21?: SortOrder
    art20fer21?: SortOrder
    art20inc21?: SortOrder
    naf21art22?: SortOrder
    art21act22?: SortOrder
    art21hab22?: SortOrder
    art21mix22?: SortOrder
    art21rou22?: SortOrder
    art21fer22?: SortOrder
    art21inc22?: SortOrder
    naf22art23?: SortOrder
    art22act23?: SortOrder
    art22hab23?: SortOrder
    art22mix23?: SortOrder
    art22rou23?: SortOrder
    art22fer23?: SortOrder
    art22inc23?: SortOrder
    naf09art23?: SortOrder
    art09act23?: SortOrder
    art09hab23?: SortOrder
    art09mix23?: SortOrder
    art09inc23?: SortOrder
    art09rou23?: SortOrder
    art09fer23?: SortOrder
    artcom0923?: SortOrder
    pop14?: SortOrder
    pop20?: SortOrder
    pop1420?: SortOrder
    men14?: SortOrder
    men20?: SortOrder
    men1420?: SortOrder
    emp14?: SortOrder
    emp20?: SortOrder
    emp1420?: SortOrder
    mepart1420?: SortOrder
    menhab1420?: SortOrder
    artpop1420?: SortOrder
    surfcom2023?: SortOrder
    C10_MEN?: SortOrder
    C15_MEN?: SortOrder
    C21_MEN?: SortOrder
  }

  export type consommation_espaces_nafMinOrderByAggregateInput = {
    index?: SortOrder
    code_geographique?: SortOrder
    libelle_geographique?: SortOrder
    epci?: SortOrder
    libelle_epci?: SortOrder
    departement?: SortOrder
    region?: SortOrder
    naf09art10?: SortOrder
    art09act10?: SortOrder
    art09hab10?: SortOrder
    art09mix10?: SortOrder
    art09rou10?: SortOrder
    art09fer10?: SortOrder
    art09inc10?: SortOrder
    naf10art11?: SortOrder
    art10act11?: SortOrder
    art10hab11?: SortOrder
    art10mix11?: SortOrder
    art10rou11?: SortOrder
    art10fer11?: SortOrder
    art10inc11?: SortOrder
    naf11art12?: SortOrder
    art11act12?: SortOrder
    art11hab12?: SortOrder
    art11mix12?: SortOrder
    art11rou12?: SortOrder
    art11fer12?: SortOrder
    art11inc12?: SortOrder
    naf12art13?: SortOrder
    art12act13?: SortOrder
    art12hab13?: SortOrder
    art12mix13?: SortOrder
    art12rou13?: SortOrder
    art12fer13?: SortOrder
    art12inc13?: SortOrder
    naf13art14?: SortOrder
    art13act14?: SortOrder
    art13hab14?: SortOrder
    art13mix14?: SortOrder
    art13rou14?: SortOrder
    art13fer14?: SortOrder
    art13inc14?: SortOrder
    naf14art15?: SortOrder
    art14act15?: SortOrder
    art14hab15?: SortOrder
    art14mix15?: SortOrder
    art14rou15?: SortOrder
    art14fer15?: SortOrder
    art14inc15?: SortOrder
    naf15art16?: SortOrder
    art15act16?: SortOrder
    art15hab16?: SortOrder
    art15mix16?: SortOrder
    art15rou16?: SortOrder
    art15fer16?: SortOrder
    art15inc16?: SortOrder
    naf16art17?: SortOrder
    art16act17?: SortOrder
    art16hab17?: SortOrder
    art16mix17?: SortOrder
    art16rou17?: SortOrder
    art16fer17?: SortOrder
    art16inc17?: SortOrder
    naf17art18?: SortOrder
    art17act18?: SortOrder
    art17hab18?: SortOrder
    art17mix18?: SortOrder
    art17rou18?: SortOrder
    art17fer18?: SortOrder
    art17inc18?: SortOrder
    naf18art19?: SortOrder
    art18act19?: SortOrder
    art18hab19?: SortOrder
    art18mix19?: SortOrder
    art18rou19?: SortOrder
    art18fer19?: SortOrder
    art18inc19?: SortOrder
    naf19art20?: SortOrder
    art19act20?: SortOrder
    art19hab20?: SortOrder
    art19mix20?: SortOrder
    art19rou20?: SortOrder
    art19fer20?: SortOrder
    art19inc20?: SortOrder
    naf20art21?: SortOrder
    art20act21?: SortOrder
    art20hab21?: SortOrder
    art20mix21?: SortOrder
    art20rou21?: SortOrder
    art20fer21?: SortOrder
    art20inc21?: SortOrder
    naf21art22?: SortOrder
    art21act22?: SortOrder
    art21hab22?: SortOrder
    art21mix22?: SortOrder
    art21rou22?: SortOrder
    art21fer22?: SortOrder
    art21inc22?: SortOrder
    naf22art23?: SortOrder
    art22act23?: SortOrder
    art22hab23?: SortOrder
    art22mix23?: SortOrder
    art22rou23?: SortOrder
    art22fer23?: SortOrder
    art22inc23?: SortOrder
    naf09art23?: SortOrder
    art09act23?: SortOrder
    art09hab23?: SortOrder
    art09mix23?: SortOrder
    art09inc23?: SortOrder
    art09rou23?: SortOrder
    art09fer23?: SortOrder
    artcom0923?: SortOrder
    pop14?: SortOrder
    pop20?: SortOrder
    pop1420?: SortOrder
    men14?: SortOrder
    men20?: SortOrder
    men1420?: SortOrder
    emp14?: SortOrder
    emp20?: SortOrder
    emp1420?: SortOrder
    mepart1420?: SortOrder
    menhab1420?: SortOrder
    artpop1420?: SortOrder
    surfcom2023?: SortOrder
    C10_MEN?: SortOrder
    C15_MEN?: SortOrder
    C21_MEN?: SortOrder
  }

  export type consommation_espaces_nafSumOrderByAggregateInput = {
    index?: SortOrder
    region?: SortOrder
    naf09art10?: SortOrder
    art09act10?: SortOrder
    art09hab10?: SortOrder
    art09mix10?: SortOrder
    art09rou10?: SortOrder
    art09fer10?: SortOrder
    art09inc10?: SortOrder
    naf10art11?: SortOrder
    art10act11?: SortOrder
    art10hab11?: SortOrder
    art10mix11?: SortOrder
    art10rou11?: SortOrder
    art10fer11?: SortOrder
    art10inc11?: SortOrder
    naf11art12?: SortOrder
    art11act12?: SortOrder
    art11hab12?: SortOrder
    art11mix12?: SortOrder
    art11rou12?: SortOrder
    art11fer12?: SortOrder
    art11inc12?: SortOrder
    naf12art13?: SortOrder
    art12act13?: SortOrder
    art12hab13?: SortOrder
    art12mix13?: SortOrder
    art12rou13?: SortOrder
    art12fer13?: SortOrder
    art12inc13?: SortOrder
    naf13art14?: SortOrder
    art13act14?: SortOrder
    art13hab14?: SortOrder
    art13mix14?: SortOrder
    art13rou14?: SortOrder
    art13fer14?: SortOrder
    art13inc14?: SortOrder
    naf14art15?: SortOrder
    art14act15?: SortOrder
    art14hab15?: SortOrder
    art14mix15?: SortOrder
    art14rou15?: SortOrder
    art14fer15?: SortOrder
    art14inc15?: SortOrder
    naf15art16?: SortOrder
    art15act16?: SortOrder
    art15hab16?: SortOrder
    art15mix16?: SortOrder
    art15rou16?: SortOrder
    art15fer16?: SortOrder
    art15inc16?: SortOrder
    naf16art17?: SortOrder
    art16act17?: SortOrder
    art16hab17?: SortOrder
    art16mix17?: SortOrder
    art16rou17?: SortOrder
    art16fer17?: SortOrder
    art16inc17?: SortOrder
    naf17art18?: SortOrder
    art17act18?: SortOrder
    art17hab18?: SortOrder
    art17mix18?: SortOrder
    art17rou18?: SortOrder
    art17fer18?: SortOrder
    art17inc18?: SortOrder
    naf18art19?: SortOrder
    art18act19?: SortOrder
    art18hab19?: SortOrder
    art18mix19?: SortOrder
    art18rou19?: SortOrder
    art18fer19?: SortOrder
    art18inc19?: SortOrder
    naf19art20?: SortOrder
    art19act20?: SortOrder
    art19hab20?: SortOrder
    art19mix20?: SortOrder
    art19rou20?: SortOrder
    art19fer20?: SortOrder
    art19inc20?: SortOrder
    naf20art21?: SortOrder
    art20act21?: SortOrder
    art20hab21?: SortOrder
    art20mix21?: SortOrder
    art20rou21?: SortOrder
    art20fer21?: SortOrder
    art20inc21?: SortOrder
    naf21art22?: SortOrder
    art21act22?: SortOrder
    art21hab22?: SortOrder
    art21mix22?: SortOrder
    art21rou22?: SortOrder
    art21fer22?: SortOrder
    art21inc22?: SortOrder
    naf22art23?: SortOrder
    art22act23?: SortOrder
    art22hab23?: SortOrder
    art22mix23?: SortOrder
    art22rou23?: SortOrder
    art22fer23?: SortOrder
    art22inc23?: SortOrder
    naf09art23?: SortOrder
    art09act23?: SortOrder
    art09hab23?: SortOrder
    art09mix23?: SortOrder
    art09inc23?: SortOrder
    art09rou23?: SortOrder
    art09fer23?: SortOrder
    artcom0923?: SortOrder
    pop14?: SortOrder
    pop20?: SortOrder
    pop1420?: SortOrder
    men14?: SortOrder
    men20?: SortOrder
    men1420?: SortOrder
    emp14?: SortOrder
    emp20?: SortOrder
    emp1420?: SortOrder
    mepart1420?: SortOrder
    menhab1420?: SortOrder
    artpop1420?: SortOrder
    surfcom2023?: SortOrder
    C10_MEN?: SortOrder
    C15_MEN?: SortOrder
    C21_MEN?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type north_star_metricCountOrderByAggregateInput = {
    pk?: SortOrder
    value?: SortOrder
    date?: SortOrder
  }

  export type north_star_metricAvgOrderByAggregateInput = {
    pk?: SortOrder
  }

  export type north_star_metricMaxOrderByAggregateInput = {
    pk?: SortOrder
    value?: SortOrder
    date?: SortOrder
  }

  export type north_star_metricMinOrderByAggregateInput = {
    pk?: SortOrder
    value?: SortOrder
    date?: SortOrder
  }

  export type north_star_metricSumOrderByAggregateInput = {
    pk?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type etat_cours_d_eauCountOrderByAggregateInput = {
    pk?: SortOrder
    name?: SortOrder
    longueur?: SortOrder
    etateco?: SortOrder
  }

  export type etat_cours_d_eauAvgOrderByAggregateInput = {
    pk?: SortOrder
    longueur?: SortOrder
  }

  export type etat_cours_d_eauMaxOrderByAggregateInput = {
    pk?: SortOrder
    name?: SortOrder
    longueur?: SortOrder
    etateco?: SortOrder
  }

  export type etat_cours_d_eauMinOrderByAggregateInput = {
    pk?: SortOrder
    name?: SortOrder
    longueur?: SortOrder
    etateco?: SortOrder
  }

  export type etat_cours_d_eauSumOrderByAggregateInput = {
    pk?: SortOrder
    longueur?: SortOrder
  }

  export type aot_40CountOrderByAggregateInput = {
    index?: SortOrder
    nom_site?: SortOrder
    type_d_implantation?: SortOrder
    valeur_brute?: SortOrder
    Latitude?: SortOrder
    Longitude?: SortOrder
  }

  export type aot_40AvgOrderByAggregateInput = {
    index?: SortOrder
    valeur_brute?: SortOrder
    Latitude?: SortOrder
    Longitude?: SortOrder
  }

  export type aot_40MaxOrderByAggregateInput = {
    index?: SortOrder
    nom_site?: SortOrder
    type_d_implantation?: SortOrder
    valeur_brute?: SortOrder
    Latitude?: SortOrder
    Longitude?: SortOrder
  }

  export type aot_40MinOrderByAggregateInput = {
    index?: SortOrder
    nom_site?: SortOrder
    type_d_implantation?: SortOrder
    valeur_brute?: SortOrder
    Latitude?: SortOrder
    Longitude?: SortOrder
  }

  export type aot_40SumOrderByAggregateInput = {
    index?: SortOrder
    valeur_brute?: SortOrder
    Latitude?: SortOrder
    Longitude?: SortOrder
  }

  export type qualite_sites_baignadeCountOrderByAggregateInput = {
    index?: SortOrder
    DEP_NOM?: SortOrder
    DEP_NUM?: SortOrder
    TYPE?: SortOrder
    COMMUNE?: SortOrder
    POINT?: SortOrder
    LONG?: SortOrder
    LAT?: SortOrder
    QEB_2013?: SortOrder
    QEB_2014?: SortOrder
    QEB_2015?: SortOrder
    QEB_2016?: SortOrder
    QEB_2017?: SortOrder
    QEB_2018?: SortOrder
    QEB_2019?: SortOrder
    QEB_2020?: SortOrder
  }

  export type qualite_sites_baignadeAvgOrderByAggregateInput = {
    index?: SortOrder
    LONG?: SortOrder
    LAT?: SortOrder
  }

  export type qualite_sites_baignadeMaxOrderByAggregateInput = {
    index?: SortOrder
    DEP_NOM?: SortOrder
    DEP_NUM?: SortOrder
    TYPE?: SortOrder
    COMMUNE?: SortOrder
    POINT?: SortOrder
    LONG?: SortOrder
    LAT?: SortOrder
    QEB_2013?: SortOrder
    QEB_2014?: SortOrder
    QEB_2015?: SortOrder
    QEB_2016?: SortOrder
    QEB_2017?: SortOrder
    QEB_2018?: SortOrder
    QEB_2019?: SortOrder
    QEB_2020?: SortOrder
  }

  export type qualite_sites_baignadeMinOrderByAggregateInput = {
    index?: SortOrder
    DEP_NOM?: SortOrder
    DEP_NUM?: SortOrder
    TYPE?: SortOrder
    COMMUNE?: SortOrder
    POINT?: SortOrder
    LONG?: SortOrder
    LAT?: SortOrder
    QEB_2013?: SortOrder
    QEB_2014?: SortOrder
    QEB_2015?: SortOrder
    QEB_2016?: SortOrder
    QEB_2017?: SortOrder
    QEB_2018?: SortOrder
    QEB_2019?: SortOrder
    QEB_2020?: SortOrder
  }

  export type qualite_sites_baignadeSumOrderByAggregateInput = {
    index?: SortOrder
    LONG?: SortOrder
    LAT?: SortOrder
  }

  export type communesCountOrderByAggregateInput = {
    pk?: SortOrder
    code_commune?: SortOrder
    libelle_commune?: SortOrder
    epci?: SortOrder
    libelle_epci?: SortOrder
    libgeo?: SortOrder
    coordinates?: SortOrder
    densite_bati?: SortOrder
    precarite_logement?: SortOrder
  }

  export type communesAvgOrderByAggregateInput = {
    pk?: SortOrder
    densite_bati?: SortOrder
    precarite_logement?: SortOrder
  }

  export type communesMaxOrderByAggregateInput = {
    pk?: SortOrder
    code_commune?: SortOrder
    libelle_commune?: SortOrder
    epci?: SortOrder
    libelle_epci?: SortOrder
    libgeo?: SortOrder
    coordinates?: SortOrder
    densite_bati?: SortOrder
    precarite_logement?: SortOrder
  }

  export type communesMinOrderByAggregateInput = {
    pk?: SortOrder
    code_commune?: SortOrder
    libelle_commune?: SortOrder
    epci?: SortOrder
    libelle_epci?: SortOrder
    libgeo?: SortOrder
    coordinates?: SortOrder
    densite_bati?: SortOrder
    precarite_logement?: SortOrder
  }

  export type communesSumOrderByAggregateInput = {
    pk?: SortOrder
    densite_bati?: SortOrder
    precarite_logement?: SortOrder
  }

  export type patch4cCountOrderByAggregateInput = {
    index?: SortOrder
    code_geographique?: SortOrder
    niveaux_marins?: SortOrder
    feux_foret?: SortOrder
    secheresse_sols?: SortOrder
    fortes_precipitations?: SortOrder
    fortes_chaleurs?: SortOrder
  }

  export type patch4cAvgOrderByAggregateInput = {
    index?: SortOrder
    niveaux_marins?: SortOrder
    feux_foret?: SortOrder
    secheresse_sols?: SortOrder
    fortes_precipitations?: SortOrder
    fortes_chaleurs?: SortOrder
  }

  export type patch4cMaxOrderByAggregateInput = {
    index?: SortOrder
    code_geographique?: SortOrder
    niveaux_marins?: SortOrder
    feux_foret?: SortOrder
    secheresse_sols?: SortOrder
    fortes_precipitations?: SortOrder
    fortes_chaleurs?: SortOrder
  }

  export type patch4cMinOrderByAggregateInput = {
    index?: SortOrder
    code_geographique?: SortOrder
    niveaux_marins?: SortOrder
    feux_foret?: SortOrder
    secheresse_sols?: SortOrder
    fortes_precipitations?: SortOrder
    fortes_chaleurs?: SortOrder
  }

  export type patch4cSumOrderByAggregateInput = {
    index?: SortOrder
    niveaux_marins?: SortOrder
    feux_foret?: SortOrder
    secheresse_sols?: SortOrder
    fortes_precipitations?: SortOrder
    fortes_chaleurs?: SortOrder
  }

  export type agricultureCountOrderByAggregateInput = {
    index?: SortOrder
    CODGEO?: SortOrder
    LIBGEO?: SortOrder
    EPCI?: SortOrder
    LIBEPCI?: SortOrder
    DEP?: SortOrder
    REG?: SortOrder
    part_irr_SAU_2020?: SortOrder
    part_over_55?: SortOrder
  }

  export type agricultureAvgOrderByAggregateInput = {
    index?: SortOrder
    REG?: SortOrder
    part_irr_SAU_2020?: SortOrder
    part_over_55?: SortOrder
  }

  export type agricultureMaxOrderByAggregateInput = {
    index?: SortOrder
    CODGEO?: SortOrder
    LIBGEO?: SortOrder
    EPCI?: SortOrder
    LIBEPCI?: SortOrder
    DEP?: SortOrder
    REG?: SortOrder
    part_irr_SAU_2020?: SortOrder
    part_over_55?: SortOrder
  }

  export type agricultureMinOrderByAggregateInput = {
    index?: SortOrder
    CODGEO?: SortOrder
    LIBGEO?: SortOrder
    EPCI?: SortOrder
    LIBEPCI?: SortOrder
    DEP?: SortOrder
    REG?: SortOrder
    part_irr_SAU_2020?: SortOrder
    part_over_55?: SortOrder
  }

  export type agricultureSumOrderByAggregateInput = {
    index?: SortOrder
    REG?: SortOrder
    part_irr_SAU_2020?: SortOrder
    part_over_55?: SortOrder
  }

  export type incendies_foretCountOrderByAggregateInput = {
    index?: SortOrder
    code_geographique?: SortOrder
    libelle_geographique?: SortOrder
    epci?: SortOrder
    libelle_epci?: SortOrder
    departement?: SortOrder
    region?: SortOrder
    nature?: SortOrder
    annee?: SortOrder
    surface_parcourue?: SortOrder
    surface_foret?: SortOrder
    surface_maquis_garrigues?: SortOrder
    autres_surfaces_naturelles_hors_foret?: SortOrder
    surfaces_agricoles?: SortOrder
    surfaces_non_boisees?: SortOrder
    surfaces_non_boisees_artificialisees?: SortOrder
    surfaces_non_boisees_naturelles?: SortOrder
    surface_autres_terres_boisees?: SortOrder
    autres_surfaces?: SortOrder
  }

  export type incendies_foretAvgOrderByAggregateInput = {
    index?: SortOrder
    region?: SortOrder
    annee?: SortOrder
    surface_parcourue?: SortOrder
    surface_foret?: SortOrder
    surface_maquis_garrigues?: SortOrder
    autres_surfaces_naturelles_hors_foret?: SortOrder
    surfaces_agricoles?: SortOrder
    surfaces_non_boisees?: SortOrder
    surfaces_non_boisees_artificialisees?: SortOrder
    surfaces_non_boisees_naturelles?: SortOrder
    surface_autres_terres_boisees?: SortOrder
    autres_surfaces?: SortOrder
  }

  export type incendies_foretMaxOrderByAggregateInput = {
    index?: SortOrder
    code_geographique?: SortOrder
    libelle_geographique?: SortOrder
    epci?: SortOrder
    libelle_epci?: SortOrder
    departement?: SortOrder
    region?: SortOrder
    nature?: SortOrder
    annee?: SortOrder
    surface_parcourue?: SortOrder
    surface_foret?: SortOrder
    surface_maquis_garrigues?: SortOrder
    autres_surfaces_naturelles_hors_foret?: SortOrder
    surfaces_agricoles?: SortOrder
    surfaces_non_boisees?: SortOrder
    surfaces_non_boisees_artificialisees?: SortOrder
    surfaces_non_boisees_naturelles?: SortOrder
    surface_autres_terres_boisees?: SortOrder
    autres_surfaces?: SortOrder
  }

  export type incendies_foretMinOrderByAggregateInput = {
    index?: SortOrder
    code_geographique?: SortOrder
    libelle_geographique?: SortOrder
    epci?: SortOrder
    libelle_epci?: SortOrder
    departement?: SortOrder
    region?: SortOrder
    nature?: SortOrder
    annee?: SortOrder
    surface_parcourue?: SortOrder
    surface_foret?: SortOrder
    surface_maquis_garrigues?: SortOrder
    autres_surfaces_naturelles_hors_foret?: SortOrder
    surfaces_agricoles?: SortOrder
    surfaces_non_boisees?: SortOrder
    surfaces_non_boisees_artificialisees?: SortOrder
    surfaces_non_boisees_naturelles?: SortOrder
    surface_autres_terres_boisees?: SortOrder
    autres_surfaces?: SortOrder
  }

  export type incendies_foretSumOrderByAggregateInput = {
    index?: SortOrder
    region?: SortOrder
    annee?: SortOrder
    surface_parcourue?: SortOrder
    surface_foret?: SortOrder
    surface_maquis_garrigues?: SortOrder
    autres_surfaces_naturelles_hors_foret?: SortOrder
    surfaces_agricoles?: SortOrder
    surfaces_non_boisees?: SortOrder
    surfaces_non_boisees_artificialisees?: SortOrder
    surfaces_non_boisees_naturelles?: SortOrder
    surface_autres_terres_boisees?: SortOrder
    autres_surfaces?: SortOrder
  }

  export type BigIntFieldUpdateOperationsInput = {
    set?: bigint | number
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NestedBigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}